-- =============================================
-- Author:		houpeng
-- Create date: 2016-10-19
-- Description:	生成翻包需求记录
-- =============================================
CREATE PROCEDURE [LES].[PROC_WMM_REPACKAGE_REQUEST_CREATE]
AS
BEGIN
	BEGIN TRANSACTION
	BEGIN TRY
		
		--读取目前有效的窗口时间定义的翻包路径
		DECLARE @R_TABLE TABLE
		(
			[R_PLANT] NVARCHAR(5),
			[R_ASSEMBLY_LINE] NVARCHAR(10),
			[REPACK_ROUTE] NVARCHAR(30)
		)

		DECLARE @R_PLANT NVARCHAR(5)
		DECLARE @R_ASSEMBLY_LINE NVARCHAR(10)
		DECLARE @R_XML XML

		DECLARE SCHEDULE_CURS1 CURSOR FOR
		SELECT
			M.[PLANT],
			M.[ASSEMBLY_LINE],
			CONVERT(XML,'<RS><R>' + REPLACE((SELECT D.[ROUTES] + ',' FROM [LES].[TT_WMM_REPACKAGE_SCHEDULE] D WITH(NOLOCK) WHERE D.[IS_ACTIVE] = 1 AND D.[PLANT] = M.[PLANT] AND D.[ASSEMBLY_LINE] = M.[ASSEMBLY_LINE] FOR XML PATH('')), ',', '</R><R>') + ' </R></RS>') AS R_XML 
		FROM [LES].[TT_WMM_REPACKAGE_SCHEDULE] M WITH (NOLOCK) WHERE M.[IS_ACTIVE] = 1
		GROUP BY M.[PLANT], M.[ASSEMBLY_LINE]

		OPEN SCHEDULE_CURS1
		FETCH NEXT FROM SCHEDULE_CURS1 INTO @R_PLANT, @R_ASSEMBLY_LINE, @R_XML
		WHILE(@@FETCH_STATUS=0)
			BEGIN --窗口时间
				INSERT INTO @R_TABLE ([R_PLANT], [R_ASSEMBLY_LINE], [REPACK_ROUTE])
				SELECT DISTINCT @R_PLANT, @R_ASSEMBLY_LINE, R_NODE.R.value('.','NVARCHAR(30)') AS [ROUTE] FROM @R_XML.nodes('/RS/R') AS R_NODE(R)

				FETCH NEXT FROM SCHEDULE_CURS1 INTO @R_PLANT, @R_ASSEMBLY_LINE, @R_XML
			END	--窗口时间
		CLOSE  SCHEDULE_CURS1
		DEALLOCATE SCHEDULE_CURS1

		DELETE FROM @R_TABLE WHERE [REPACK_ROUTE] IS NULL OR [REPACK_ROUTE] = ''

		IF(NOT EXISTS(SELECT * FROM @R_TABLE))
			BEGIN
				COMMIT TRANSACTION
				RETURN
			END

		--读取最小的上次运行时间
		DECLARE @LAST_RUN DATETIME = NULL
		SELECT @LAST_RUN = MIN([LAST_RUN]) FROM [LES].[TT_WMM_REPACKAGE_SCHEDULE] WITH (NOLOCK) WHERE [IS_ACTIVE] = 1 
		SET @LAST_RUN = ISNULL(@LAST_RUN, '1900-1-1')

		DECLARE @OPERATION_ID UNIQUEIDENTIFIER = NEWID()

		DECLARE @T_Request TABLE (
			OUTPUT_DETAIL_ID		BIGINT
			,PLANT					NVARCHAR(5)
			,ASSEMBLY_LINE			NVARCHAR(10)
			,WM_NO					NVARCHAR(10)
			,ZONE_NO				NVARCHAR(20)
			,REPACKAGE_ROUTE		NVARCHAR(30)
			,PART_NO				NVARCHAR(30)
			,PART_CNAME				NVARCHAR(100)
			,PART_NICKNAME			NVARCHAR(50)
			,DLOC					NVARCHAR(30)
			,PACKAGE				INT
			,REQUIRED_BOX_NUM		NUMERIC(18,2)
			,REQUIRED_QTY			INT
			,PACKAGE_MODEL			NVARCHAR(30)
			,INHOUSE_PACKAGE		INT
			,INHOUSE_PACKAGE_MODEL	NVARCHAR(30)
		)

		INSERT INTO @T_Request (
				OUTPUT_DETAIL_ID
				,PLANT
				,ASSEMBLY_LINE
				,WM_NO
				,ZONE_NO
				,REPACKAGE_ROUTE
				,PART_NO
				,PART_CNAME
				,PART_NICKNAME
				,DLOC
				,PACKAGE
				,REQUIRED_BOX_NUM
				,REQUIRED_QTY
				,PACKAGE_MODEL
				,INHOUSE_PACKAGE
				,INHOUSE_PACKAGE_MODEL
			)
			SELECT	 O.OUTPUT_DETAIL_ID			-- OUTPUT_DETAIL_ID
					,S.PLANT					--,PLANT
					,S.ASSEMBLY_LINE			--,ASSEMBLY_LINE
					,S.WM_NO					--,WM_NO
					,S.ZONE_NO					--,ZONE_NO
					,S.REPACK_ROUTE				--,REPACKAGE_ROUTE
					,S.PART_NO					--,PART_NO
					,S.PART_CNAME				--,PART_CNAME
					,S.PART_NICKNAME			--,PART_NICKNAME
					,S.DLOC						--,DLOC
					,S.PACKAGE					--,PACKAGE
					,O.REQUIRED_BOX_NUM			--,REQUIRED_BOX_NUM
					,O.REQUIRED_QTY
					,S.PACKAGE_MODEL			--,PACKAGE_MODEL
					,O.PACKAGE					--,INHOUSE_PACKAGE
					,O.PACKAGE_MODEL			--,INHOUSE_PACKAGE_MODEL
				FROM [LES].[TT_WMM_OUTPUT_DETAIL] O WITH (NOLOCK)
					INNER JOIN [LES].[TM_BAS_PARTS_STOCK] S  WITH(NOLOCK)
						ON O.PLANT=S.PLANT AND O.WM_NO=S.WM_NO AND O.PART_NO=S.PART_NO											--S和O的关联条件
							AND ISNULL(S.DELETE_FLAG,0)=0 AND ISNULL(S.IS_REPACK,0)=1 AND S.INHOUSE_PACKAGE>0 AND S.PACKAGE>0
					INNER JOIN 	@R_TABLE R
						ON S.PLANT=R.R_PLANT AND S.ASSEMBLY_LINE=R.R_ASSEMBLY_LINE AND S.REPACK_ROUTE=R.REPACK_ROUTE			--筛选条件：翻包路径参数
					INNER JOIN [LES].[TM_WMM_ZONES] Z  WITH(NOLOCK)
						ON Z.PLANT=S.PLANT AND Z.WM_NO=S.WM_NO AND Z.ZONE_NO=S.ZONE_NO AND Z.REPACKAGE_ZONE=O.ZONE_NO			--Z和S的关联条件，Z和O：出库存储区等于翻包后的存储区
							AND ISNULL(Z.REPACKAGE_ZONE,'')<>''																	--支持翻包的Z筛选条件
				WHERE ISNULL(O.REPACKAGE_FLAG,0)=0 AND O.REQUIRED_BOX_NUM>0														--出库子表的筛选条件

		DECLARE @MAX_ID BIGINT = -1
		SELECT @MAX_ID=MAX([OUTPUT_DETAIL_ID]) FROM @T_Request
		IF(@MAX_ID=-1)
		BEGIN
			COMMIT TRANSACTION
			RETURN
		END

		UPDATE [LES].[TT_WMM_OUTPUT_DETAIL] WITH (ROWLOCK) SET [REPACKAGE_FLAG] = 1 WHERE ISNULL([REPACKAGE_FLAG], 0) = 0 AND [OUTPUT_DETAIL_ID] <= @MAX_ID

		INSERT INTO [LES].[TT_WMM_REPACKAGE_REQUEST] (
				 OUTPUT_DETAIL_ID
				,PLANT
				,ASSEMBLY_LINE
				,WM_NO
				,ZONE_NO
				,REPACKAGE_ROUTE
				,PART_NO
				,PART_CNAME
				,PART_NICKNAME
				,DLOC
				,PACKAGE
				,REQUIRED_BOX_NUM
				,REQUIRED_QTY
				,PACKAGE_MODEL
				,INHOUSE_PACKAGE
				,INHOUSE_PACKAGE_MODEL
				,DEAL_FLAG
				,CREATE_USER
				,CREATE_DATE
				,OPERATION_ID
			)
			SELECT	 OUTPUT_DETAIL_ID		-- OUTPUT_DETAIL_ID
					,PLANT					--,PLANT
					,ASSEMBLY_LINE			--,ASSEMBLY_LINE
					,WM_NO					--,WM_NO
					,ZONE_NO				--,ZONE_NO
					,REPACKAGE_ROUTE		--,REPACKAGE_ROUTE
					,PART_NO				--,PART_NO
					,PART_CNAME				--,PART_CNAME
					,PART_NICKNAME			--,PART_NICKNAME
					,DLOC					--,DLOC
					,PACKAGE				--,PACKAGE
					,REQUIRED_BOX_NUM		--,REQUIRED_BOX_NUM
					,REQUIRED_QTY
					,PACKAGE_MODEL			--,PACKAGE_MODEL
					,INHOUSE_PACKAGE		--,INHOUSE_PACKAGE
					,INHOUSE_PACKAGE_MODEL	--,INHOUSE_PACKAGE_MODEL
					,0						--,DEAL_FLAG
					,'admin'				--,CREATE_USER
					,GETDATE()				--,CREATE_DATE
					,@OPERATION_ID			--,OPERATION_ID
				FROM @T_Request

		--更新出库子表
		UPDATE O SET O.[REPACKAGE_FLAG] = 2 FROM [LES].[TT_WMM_OUTPUT_DETAIL] O WITH (ROWLOCK)
		INNER JOIN @T_Request R
		ON O.[OUTPUT_DETAIL_ID] = R.[OUTPUT_DETAIL_ID]

		COMMIT TRANSACTION
	END TRY
	BEGIN CATCH
		--回滚事务
		ROLLBACK TRANSACTION
		--记录错误日志
		INSERT INTO [LES].[TS_SYS_EXCEPTION] (time_stamp, [application], [METHOD], class,  exception_message, error_code)
		SELECT getdate(),'WMM','PROC_WMM_REPACKAGE_REQUEST_CREATE','Procedure',ISNULL(error_message(),''),ERROR_LINE()
		--标记错误数据
		UPDATE O SET O.[REPACKAGE_FLAG] = 9 FROM [LES].[TT_WMM_OUTPUT_DETAIL] O WITH (ROWLOCK)
		INNER JOIN @T_Request R
		ON O.[OUTPUT_DETAIL_ID] = R.[OUTPUT_DETAIL_ID]
	END CATCH
END