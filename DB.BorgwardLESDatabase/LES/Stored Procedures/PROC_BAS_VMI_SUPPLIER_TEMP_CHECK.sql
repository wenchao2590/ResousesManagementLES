CREATE PROC [LES].[PROC_BAS_VMI_SUPPLIER_TEMP_CHECK]
AS
	BEGIN TRANSACTION;	

	BEGIN TRY

	UPDATE [LES].TE_BAS_VMI_SUPPLIER_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '工厂不存在;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM [LES].[TM_BAS_PLANT] S (nolock) WHERE S.PLANT = TE_BAS_VMI_SUPPLIER_TEMP.PLANT
	)
 
	UPDATE t_Temp
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '工厂、仓库、存储区没有关联;'
	FROM [LES].TE_BAS_VMI_SUPPLIER_TEMP t_Temp
	WHERE not EXISTS(SELECT 1 FROM [LES].[TM_WMM_ZONES] t_ZONES WHERE
	 t_Temp.PLANT=t_ZONES.PLANT 
	 AND t_ZONES.WM_NO=t_Temp.WM_NO
	 AND t_ZONES.ZONE_NO=t_Temp.ZONE_NO)


	UPDATE [LES].TE_BAS_VMI_SUPPLIER_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '供应商不正确;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM LES.TM_BAS_SUPPLIER S (nolock) WHERE S.SUPPLIER_NUM = TE_BAS_VMI_SUPPLIER_TEMP.SUPPLIER_NUM
	)
	
    UPDATE [LES].TE_BAS_VMI_SUPPLIER_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '供应商和存储区关系已存在;'
	WHERE  EXISTS 
	(
		SELECT 1 FROM [LES].TM_BAS_VMI_SUPPLIER S (nolock) WHERE S.SUPPLIER_NUM = TE_BAS_VMI_SUPPLIER_TEMP.SUPPLIER_NUM AND S.ZONE_NO=TE_BAS_VMI_SUPPLIER_TEMP.ZONE_NO
	)

	UPDATE [LES].TE_BAS_VMI_SUPPLIER_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '该供应商已经设置过了不合格品存储区;'
	FROM [LES].TE_BAS_VMI_SUPPLIER_TEMP AS T
	INNER JOIN LES.[TM_WMM_ZONES] AS Z WITH(NOLOCK)
	ON T.ZONE_NO=Z.ZONE_NO
	WHERE  EXISTS 
	(
		SELECT 1 FROM [LES].TM_BAS_VMI_SUPPLIER S1 WITH(NOLOCK) 
		INNER JOIN LES.[TM_WMM_ZONES] AS Z1 WITH(NOLOCK)
		ON S1.ZONE_NO=Z1.ZONE_NO
		WHERE S1.SUPPLIER_NUM = T.SUPPLIER_NUM AND Z.IS_MANAGE=120 AND Z1.IS_MANAGE=120
	)

	UPDATE [LES].TE_BAS_VMI_SUPPLIER_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '该供应商已经设置过了合格品存储区;'
	FROM [LES].TE_BAS_VMI_SUPPLIER_TEMP AS T
	INNER JOIN LES.[TM_WMM_ZONES] AS Z WITH(NOLOCK)
	ON T.ZONE_NO=Z.ZONE_NO
	WHERE  EXISTS 
	(
		SELECT 1 FROM [LES].TM_BAS_VMI_SUPPLIER S1 WITH(NOLOCK) 
		INNER JOIN LES.[TM_WMM_ZONES] AS Z1 WITH(NOLOCK)
		ON S1.ZONE_NO=Z1.ZONE_NO
		WHERE S1.SUPPLIER_NUM = T.SUPPLIER_NUM AND Z.IS_MANAGE=10 AND Z1.IS_MANAGE=10
	)

	END TRY
	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
	END CATCH;

	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION;