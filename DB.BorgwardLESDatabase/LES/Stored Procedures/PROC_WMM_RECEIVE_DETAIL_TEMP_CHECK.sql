CREATE PROC [LES].[PROC_WMM_RECEIVE_DETAIL_TEMP_CHECK]
AS
BEGIN
	BEGIN TRANSACTION
	BEGIN TRY

	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '在指定区域未检索到该零件;'
	WHERE [PART_NO] NOT IN 
	(
		SELECT S.[PART_NO] FROM
		[LES].[TM_BAS_PARTS_STOCK] S WITH (NOLOCK),
		[LES].[TT_WMM_RECEIVE] R WITH (NOLOCK),
		[LES].[TE_WMM_RECEIVE_DETAIL_TEMP] T WITH (NOLOCK)
		WHERE R.[RECEIVE_NO] = T.[RECEIVE_NO] AND
		R.[PLANT] = S.[PLANT] AND R.[WM_NO] = S.[WM_NO] AND R.[ZONE_NO] = S.[ZONE_NO]
	)

	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '该零件的零件仓库信息中入库包装数为空或者为零;' 
	WHERE [PART_NO] IN
	(
		SELECT S.[PART_NO] FROM
		[LES].[TE_WMM_RECEIVE_DETAIL_TEMP] T WITH (NOLOCK),
		[LES].[TT_WMM_RECEIVE] R WITH (NOLOCK),
	    [LES].[TM_BAS_PARTS_STOCK] S WITH (NOLOCK)
		WHERE R.[RECEIVE_NO] = T.[RECEIVE_NO] AND
		R.[PLANT] = S.[PLANT] AND R.[WM_NO] = S.[WM_NO] AND R.[ZONE_NO] = S.[ZONE_NO]
		AND ISNULL(S.[INBOUND_PACKAGE],0) = 0
	)

	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '零件号重复;'
	WHERE [PART_NO] IN
	(
		SELECT tmp.[PART_NO] FROM 
		(SELECT [RECEIVE_NO], [PART_NO], COUNT(*) AS [NUM] FROM [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (NOLOCK) WHERE [PART_NO] IS NOT NULL GROUP BY [RECEIVE_NO], [PART_NO]) tmp 
		WHERE tmp.[NUM] > 1
	)

	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '需求箱数不能为空;' WHERE [REQUIRED_BOX_NUM] = ''
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '需求件数不能为空;' WHERE [REQUIRED_QTY] = ''
	--UPDATE [LES].TE_WMM_RECEIVE_DETAIL_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次箱数不能为空;' WHERE Current_BOX_NUM = ''
	--UPDATE [LES].TE_WMM_RECEIVE_DETAIL_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次件数不能为空;' WHERE Current_QTY = ''
	
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '需求箱数格式错误;'
	WHERE [REQUIRED_BOX_NUM] <> '' AND ISNUMERIC([REQUIRED_BOX_NUM]) = 0
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '需求件数格式错误;'
	WHERE [REQUIRED_QTY] <> '' AND ISNUMERIC([REQUIRED_QTY]) = 0
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '本次箱数格式错误;'
	WHERE [Current_BOX_NUM] <> '' AND ISNUMERIC([Current_BOX_NUM]) = 0
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK)
	SET [VALID_FLAG] = 0,
		[ERROR_MSG] = [ERROR_MSG] + '本次件数格式错误;'
	WHERE [Current_QTY] <> '' AND ISNUMERIC([Current_QTY]) = 0

	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '需求箱数应该是大于0的整数;' WHERE [REQUIRED_BOX_NUM] <> '' AND [REQUIRED_BOX_NUM] <= 0
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '需求件数应该是大于0的整数;' WHERE [REQUIRED_QTY] <> '' AND [REQUIRED_QTY] <= 0
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '本次箱数不能小于0;' WHERE [Current_BOX_NUM] <> '' AND [Current_BOX_NUM] < 0
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '本次件数不能小于0;' WHERE [Current_QTY] <> '' AND [Current_QTY] < 0

	--UPDATE [LES].TE_WMM_RECEIVE_DETAIL_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '输入的数字格式不对或超出范围;' 
	--WHERE ISNUMERIC(REQUIRED_BOX_NUM) = 0 OR ISNUMERIC(REQUIRED_QTY) = 0 OR ISNUMERIC(Current_BOX_NUM) = 0 OR ISNUMERIC(Current_QTY) = 0

	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '本次箱数不应大于需求箱数;' WHERE [Current_BOX_NUM] <> '' AND [REQUIRED_BOX_NUM] <> '' AND [Current_BOX_NUM] > [REQUIRED_BOX_NUM]
	UPDATE [LES].[TE_WMM_RECEIVE_DETAIL_TEMP] WITH (ROWLOCK) SET [VALID_FLAG] = 0, [ERROR_MSG] = [ERROR_MSG] + '本次件数不应大于需求件数;' WHERE [Current_QTY] <> '' AND [REQUIRED_QTY] <> '' AND [Current_QTY] > [REQUIRED_QTY]

	END TRY
	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber,
			ERROR_SEVERITY() AS ErrorSeverity,
			ERROR_STATE() AS ErrorState,
			ERROR_PROCEDURE() AS ErrorProcedure,
			ERROR_LINE() AS ErrorLine,
			ERROR_MESSAGE() AS ErrorMessage

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION
	END CATCH

	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION
END