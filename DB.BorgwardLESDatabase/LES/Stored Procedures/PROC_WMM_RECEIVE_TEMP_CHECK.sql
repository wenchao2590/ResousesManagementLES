




CREATE PROC [LES].[PROC_WMM_RECEIVE_TEMP_CHECK]
AS
	BEGIN TRANSACTION;	

	BEGIN TRY

	DECLARE @Count INT 
	SELECT DISTINCT RECEIVE_TYPE, PLANT, WM_NO,ZONE_NO,SUPPLIER_NUM, SEND_TIME, DELIVERY_LOCATION_NAME, DOCK
	INTO #tmp FROM LES.TE_WMM_RECEIVE_TEMP T (NOLOCK)
 	SELECT @Count = COUNT(*) FROM #tmp
	DROP TABLE #tmp
	IF(@Count > 1)
	BEGIN 
		UPDATE [LES].TE_WMM_RECEIVE_TEMP 
		SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '检测到主表信息不一致;'
	END

	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '工厂不存在;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM [LES].[TM_BAS_PLANT] S (nolock) WHERE S.PLANT = TE_WMM_RECEIVE_TEMP.PLANT
	)

	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '入库类型不正确;'
	WHERE [RECEIVE_TYPE] NOT IN ('1','2')
	
	--UPDATE t_Temp
	--SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '存在重复记录;'
	--FROM [LES].TE_WMM_RECEIVE_TEMP t_Temp
	--WHERE EXISTS(SELECT 1 FROM LES.TT_WMM_RECEIVE t_Receive WHERE
	-- t_Temp.PLANT=t_Receive.PLANT 
	-- AND t_Receive.WM_NO=t_Temp.WM_NO
	-- AND t_Receive.ZONE_NO=t_Temp.ZONE_NO
	-- AND t_Receive.SUPPLIER_NUM=t_Temp.SUPPLIER_NUM
	-- AND t_Receive.RECEIVE_TYPE=t_Temp.RECEIVE_TYPE
	-- AND t_Receive.COMMENTS=t_Temp.COMMENTS
	-- AND t_Receive.RECEIVE_REASON=t_Temp.RECEIVE_REASON)

	 
	UPDATE t_Temp
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '工厂、仓库、存储区没有关联;'
	FROM [LES].TE_WMM_RECEIVE_TEMP t_Temp
	WHERE not EXISTS(SELECT 1 FROM [LES].[TM_WMM_ZONES] t_ZONES WHERE
	 t_Temp.PLANT=t_ZONES.PLANT 
	 AND t_ZONES.WM_NO=t_Temp.WM_NO
	 AND t_ZONES.ZONE_NO=t_Temp.ZONE_NO)


	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '在指定区域未检索到该零件;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM 
		LES.TM_BAS_PARTS_STOCK S(NOLOCK), 
		LES.TE_WMM_RECEIVE_TEMP T(NOLOCK) 
		WHERE 
		 T.PLANT = S.PLANT AND T.WM_NO = S.WM_NO AND T.ZONE_NO = S.ZONE_NO
		 AND S.[PART_NO] = TE_WMM_RECEIVE_TEMP.PART_NO
	)

	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '该零件的零件仓库信息中标准包装数为空或者为零;' 
	WHERE PART_NO IN 
	(
		SELECT T.PART_NO FROM 
		LES.TE_WMM_RECEIVE_TEMP T(NOLOCK)
	    JOIN LES.TM_BAS_PARTS_STOCK S(NOLOCK) 
		ON S.[PART_NO] = T.PART_NO AND 
		S.PLANT = T.PLANT AND S.WM_NO = T.WM_NO AND S.ZONE_NO = T.ZONE_NO
		where ISNULL(S.PACKAGE,0) = 0
	)

	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '卸货区不正确;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM LES.TM_BAS_DOCK D (nolock) WHERE D.DOCK = TE_WMM_RECEIVE_TEMP.Dock
	)

	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '供应商不正确;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM LES.TM_BAS_SUPPLIER S (nolock) WHERE S.SUPPLIER_NUM = TE_WMM_RECEIVE_TEMP.SUPPLIER_NUM
	)
	

	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '零件号重复;'
	WHERE PART_NO IN (
		SELECT tmp.PART_NO FROM 
			(SELECT RECEIVE_NO, PART_NO, COUNT(*) AS NUM FROM [LES].[TE_WMM_RECEIVE_TEMP] WHERE PART_NO is not NULL GROUP BY RECEIVE_NO, PART_NO) tmp 
		WHERE tmp.NUM > 1)

	
	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数格式错误;'
	WHERE REQUIRED_BOX_NUM_TEXT<>'' AND ISNUMERIC(REQUIRED_BOX_NUM_TEXT)=0
	
	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数格式错误;'
	WHERE REQUIRED_QTY_TEXT<>'' AND ISNUMERIC(REQUIRED_QTY_TEXT)=0
		
	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次箱数格式错误;'
	WHERE Current_BOX_NUM_TEXT<>'' AND ISNUMERIC(Current_BOX_NUM_TEXT)=0
	
	UPDATE [LES].TE_WMM_RECEIVE_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次件数格式错误;'
	WHERE Current_QTY_TEXT<>'' AND ISNUMERIC(Current_QTY_TEXT)=0

	
	DECLARE @ErrCount int
	
	SELECT @ErrCount=COUNT(1) FROM [LES].TE_WMM_RECEIVE_TEMP WHERE VALID_FLAG = 0
	
	IF(@ErrCount=0)
	BEGIN

	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET REQUIRED_BOX_NUM=REQUIRED_BOX_NUM_TEXT
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET REQUIRED_QTY=REQUIRED_QTY_TEXT
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET Current_BOX_NUM=Current_BOX_NUM_TEXT
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET Current_QTY=Current_QTY_TEXT

	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数不能为空;' WHERE isnull(REQUIRED_BOX_NUM_TEXT,'') = ''
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数不能为空;' WHERE isnull(REQUIRED_QTY_TEXT,'') = ''
	--UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次箱数不能为空;' WHERE isnull(Current_BOX_NUM_TEXT,'') = ''
	--UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次件数不能为空;' WHERE isnull(Current_QTY_TEXT,'') = ''

	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数应该是大于0的整数;' WHERE isnull(REQUIRED_BOX_NUM_TEXT,'') <> '' AND REQUIRED_BOX_NUM_TEXT <= 0
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数应该是大于0的整数;' WHERE isnull(REQUIRED_QTY_TEXT,'') <> '' AND REQUIRED_QTY_TEXT <= 0
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次箱数不能小于0;' WHERE isnull(Current_BOX_NUM_TEXT,'') <> '' and Current_BOX_NUM_TEXT < 0
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次件数不能小于0;' WHERE isnull(Current_QTY_TEXT,'')<>'' and Current_QTY_TEXT < 0

	--UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '输入的数字格式不对或超出范围;' 
	--WHERE ISNUMERIC(REQUIRED_BOX_NUM_TEXT) = 0 OR ISNUMERIC(REQUIRED_QTY_TEXT) = 0 OR ISNUMERIC(Current_BOX_NUM_TEXT) = 0 OR ISNUMERIC(Current_QTY_TEXT) = 0

	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次箱数不应大于需求箱数;' WHERE isnull(Current_BOX_NUM_TEXT,'') <> '' and isnull(REQUIRED_BOX_NUM_TEXT,'') <> '' and Current_BOX_NUM_TEXT > REQUIRED_BOX_NUM_TEXT
	UPDATE [LES].TE_WMM_RECEIVE_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '本次件数不应大于需求件数;' WHERE isnull(Current_QTY_TEXT,'') <> '' and isnull(REQUIRED_QTY_TEXT,'') <> '' and Current_QTY_TEXT > REQUIRED_QTY_TEXT
	END;

	END TRY
	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
	END CATCH;

	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION;