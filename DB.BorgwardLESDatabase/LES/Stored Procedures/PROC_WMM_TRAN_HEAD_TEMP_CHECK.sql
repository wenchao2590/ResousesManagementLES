



/********************************************************************/
/*                                                                  */
/*   Project Name:  LES System                          */
/*   Program Name:  [PROC_WMM_TRAN_HEAD_TEMP_CHECK]                       */
/*   Called By:     by the Page							*/
/*   Purpose:       This is the main stored procedure for the       */
/*   author:       andy	2015-06-09   				       */
/********************************************************************/
CREATE PROC [LES].[PROC_WMM_TRAN_HEAD_TEMP_CHECK]
AS
	BEGIN TRANSACTION;

	
	BEGIN TRY

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数格式错误;'
	WHERE BOX_NUM_TEXT='' or ISNUMERIC(BOX_NUM_TEXT)=0 or CAST(BOX_NUM_TEXT AS INT)<0
	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数格式错误;'
	WHERE NUM_TEXT='' or ISNUMERIC(NUM_TEXT)=0 or CAST(NUM_TEXT AS INT)<0

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '交易单号为空;'
	WHERE TRAN_NO IS NULL or LEN([TRAN_NO]) < 1

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '交易单已被确认不可再修改;'
	WHERE EXISTS
	(
		SELECT 1 FROM LES.TT_WMM_TRAN_HEAD R (NOLOCK)
		WHERE R.TRAN_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.TRAN_NO 
		AND R.TRAN_STATUS IN (1,2)
	)

	DECLARE @Count INT 
	SELECT DISTINCT PLANT, S_WM_NO,O_WM_NO, S_ZONE_NO,O_ZONE_NO, TRAN_TYPE,
	COST_CODE,FINANCIAL_CODE,INTERNAL_CODE, WBS_CODE  
	INTO #tmp FROM LES.TE_WMM_TRAN_HEAD_TEMP T (NOLOCK)
 	SELECT @Count = COUNT(*) FROM #tmp
	DROP TABLE #tmp
	IF(@Count > 1)
	BEGIN 
		UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP 
		SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '检测到工厂，仓库，存储区，交易类型等基础数据不一致;'
	END
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '工厂不正确;'
	WHERE [PLANT] NOT IN (SELECT [PLANT] FROM [LES].[TM_BAS_PLANT])
	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '交易类型不能为空;'
	WHERE isnull([TRAN_TYPE],'') =''
	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '交易类型不存在;'
	WHERE isnull([TRAN_TYPE],'') <>''
	and TRAN_TYPE not in ('311-移库','311-零件封存','311-零件解封','Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废','Z17-调试样件领用','Z57-工程报废')
	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '源仓库不正确;'
	WHERE 
		(SELECT COUNT(*) FROM 
			(SELECT iWH.PLANT, iWH.WAREHOUSE WM_NO FROM [LES].[TM_BAS_WAREHOUSE] iWH) WH 
		 WHERE 
			[PLANT] = [WH].[PLANT]
			AND [S_WM_NO] = [WH].[WM_NO]) = 0

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '源存储区不正确;'
	WHERE 
		(SELECT COUNT(*) FROM 
			(SELECT iWZ.PLANT, iWZ.WM_NO, iWZ.ZONE_NO FROM [LES].[TM_WMM_ZONES] iWZ) WZ
		 WHERE 
			[PLANT] = [WZ].[PLANT]
			AND [S_WM_NO] = [WZ].[WM_NO]
			AND [S_ZONE_NO] = [WZ].[ZONE_NO]) = 0

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '目的仓库不正确;'
	WHERE TRAN_TYPE in ('311-移库','311-零件封存','311-零件解封') AND
		(SELECT COUNT(*) FROM 
			(SELECT iWH.PLANT, iWH.WAREHOUSE WM_NO FROM [LES].[TM_BAS_WAREHOUSE] iWH) WH 
		 WHERE 
			[PLANT] = [WH].[PLANT]
			AND [O_WM_NO] = [WH].[WM_NO]) = 0

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '目的存储区不正确;'
	WHERE TRAN_TYPE in ('311-移库','311-零件封存','311-零件解封') AND
		(SELECT COUNT(*) FROM 
			(SELECT iWZ.PLANT, iWZ.WM_NO, iWZ.ZONE_NO FROM [LES].[TM_WMM_ZONES] iWZ) WZ
		 WHERE 
			[PLANT] = [WZ].[PLANT]
			AND [O_WM_NO] = [WZ].[WM_NO]
			AND [O_ZONE_NO] = [WZ].[ZONE_NO]) = 0
	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '不能填写目的仓库;'
	WHERE TRAN_TYPE in ('Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废') AND
		isnull([O_WM_NO],'') <>''

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '不能填写目的存储区;'
	WHERE TRAN_TYPE in ('Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废') AND
		isnull([O_ZONE_NO],'') <>''

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '源存储区的零件包装数不能为空或者为零;' 
	WHERE PART_NO IN 
	(
		SELECT S.[PART_NO] FROM 
		LES.TE_WMM_TRAN_HEAD_TEMP T(NOLOCK),
	    LES.TM_BAS_PARTS_STOCK S(NOLOCK) 
		where 
		T.[PLANT] = S.PLANT AND T.[S_WM_NO] = S.WM_NO AND T.[S_ZONE_NO] = S.ZONE_NO
		AND ISNULL(S.PACKAGE,0) = 0
		)

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '目的存储区的零件包装数不能为空或者为零;' 
	WHERE PART_NO IN 
	(
		SELECT S.[PART_NO] FROM 
		LES.TE_WMM_TRAN_HEAD_TEMP T(NOLOCK),
	    LES.TM_BAS_PARTS_STOCK S(NOLOCK) 
		where T.TRAN_TYPE in ('311-移库','311-零件封存','311-零件解封') AND
		T.[PLANT] = S.PLANT AND T.[O_WM_NO] = S.WM_NO AND T.[O_ZONE_NO] = S.ZONE_NO
		AND ISNULL(S.PACKAGE,0) = 0
	)

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '成本中心必填;'
	WHERE TRAN_TYPE in ('Z05-返修领用','Z07-部门领用','Z55-生产物料报废') AND
		isnull([COST_CODE],'')=''
		
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '不能填写成本中心;'
	WHERE TRAN_TYPE ='Z11-项目阶段生产物资领用' AND
		isnull([COST_CODE],'') <>''
		
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '内部订单必填;'
	WHERE TRAN_TYPE ='Z11-项目阶段生产物资领用' AND
		isnull([INTERNAL_CODE],'')=''
		
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '不能填写内部订单;'
	WHERE TRAN_TYPE in ('Z07-部门领用','Z51-库内物料报废','Z55-生产物料报废') AND
		isnull([INTERNAL_CODE],'') <>''
		
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '不能填写财务科目;'
	WHERE TRAN_TYPE in ('Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废') AND
		isnull([FINANCIAL_CODE],'') <>''
		
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '不能填写WBS;'
	WHERE TRAN_TYPE in ('Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废') AND
		isnull([WBS_CODE],'') <>''

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '源存储区不存在该零件;'
	WHERE [PART_NO] NOT IN (SELECT [PART_NO] FROM [LES].[TM_BAS_PARTS_STOCK] st WHERE st.PLANT=[LES].TE_WMM_TRAN_HEAD_TEMP.PLANT AND WM_NO=S_WM_NO AND ZONE_NO=S_ZONE_NO)
		

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '目标存储区不存在该零件;'
	WHERE TRAN_TYPE in ('311-移库','311-零件封存','311-零件解封') and
		isnull(O_ZONE_NO,'') <>'' AND
		[PART_NO] NOT IN (SELECT [PART_NO] FROM [LES].[TM_BAS_PARTS_STOCK] st WHERE st.PLANT=[LES].TE_WMM_TRAN_HEAD_TEMP.PLANT AND WM_NO=O_WM_NO AND ZONE_NO=O_ZONE_NO)

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '零件号重复;'
	WHERE PART_NO IN (
		SELECT tmp.PART_NO FROM 
			(SELECT TRAN_NO, PART_NO, COUNT(*) AS NUM FROM [LES].[TE_WMM_TRAN_HEAD_TEMP] WHERE PART_NO is not NULL GROUP BY TRAN_NO, PART_NO) tmp 
		WHERE tmp.NUM > 1)

	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '箱数格式错误;'
	WHERE BOX_NUM_TEXT='' or ISNUMERIC(BOX_NUM_TEXT)=0
	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '件数格式错误;'
	WHERE NUM_TEXT='' or ISNUMERIC(NUM_TEXT)=0

	--成本中心
	UPDATE 
		[LES].TE_WMM_TRAN_HEAD_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '成本中心不匹配;'
	WHERE 
		TRAN_TYPE <>'Z11-项目阶段生产物资领用' and
		COST_CODE <> '' AND
		COST_CODE not IN(
			SELECT COST_CODE FROM LES.[TM_BAS_COST_CENTER] WHERE PLANT=[LES].TE_WMM_TRAN_HEAD_TEMP.PLANT
		)
		
	--内部订单
	UPDATE 
		[LES].TE_WMM_TRAN_HEAD_TEMP
	SET 
		VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '内部订单不匹配;'
	WHERE  
		TRAN_TYPE not in ('Z07-部门领用','Z51-库内物料报废','Z55-生产物料报废') and
		INTERNAL_CODE <> '' AND
		INTERNAL_CODE not IN(
			SELECT INTERNAL_CODE FROM [LES].TM_BAS_INTERNAL_ORDER WHERE PLANT=[LES].TE_WMM_TRAN_HEAD_TEMP.PLANT
		)
	--财务科目
	UPDATE 
		[LES].TE_WMM_TRAN_HEAD_TEMP
	SET 
		VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '财务科目不匹配;'
	WHERE   
		TRAN_TYPE not in ('Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废') and
		FINANCIAL_CODE <> '' AND
		FINANCIAL_CODE not IN(
			SELECT FINANCIAL_CODE FROM LES.TM_BAS_FINANCIAL_ACCOUNT WHERE PLANT=[LES].TE_WMM_TRAN_HEAD_TEMP.PLANT
		)
	--WBS
	UPDATE 
		[LES].TE_WMM_TRAN_HEAD_TEMP
	SET 
		VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + 'WBS不匹配;'
	WHERE
		TRAN_TYPE not in ('Z05-返修领用','Z07-部门领用','Z11-项目阶段生产物资领用','Z51-库内物料报废','Z55-生产物料报废') and   
		WBS_CODE <> '' AND
		WBS_CODE not IN(
			SELECT WBS_CODE FROM [LES].TM_BAS_WBS WHERE PLANT=[LES].TE_WMM_TRAN_HEAD_TEMP.PLANT
		)

	--判断库存	
	DECLARE @TranType INT,@ErrCount int
	
	SELECT @ErrCount=COUNT(1) FROM [LES].TE_WMM_TRAN_HEAD_TEMP WHERE VALID_FLAG = 0

	IF(@ErrCount=0)
	BEGIN

	
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP SET NUM=NUM_TEXT
	UPDATE [LES].TE_WMM_TRAN_HEAD_TEMP SET BOX_NUM=BOX_NUM_TEXT

	
	UPDATE t_head
	SET t_head.VALID_FLAG = 0, t_head.ERROR_MSG = ERROR_MSG + '可用库存量不足;'
	 FROM  [LES].TE_WMM_TRAN_HEAD_TEMP t_head 
	LEFT JOIN LES.TT_WMS_STOCKS t_STOCK
	  ON t_STOCK.PART_NO = t_head.PART_NO
	   AND t_STOCK.PLANT=t_head.PLANT
	   AND t_STOCK.WM_NO=t_head.S_WM_NO
	   AND t_STOCK.ZONE_NO=t_head.S_ZONE_NO
	WHERE  t_STOCK.IS_BATCH!=1 AND t_head.TRAN_TYPE IN ('移库','零件封存','零件不良品出库','物料报废-工废','其他')
	 AND (t_STOCK.Stocks_Num-t_STOCK.FROZEN_STOCKS)<t_head.NUM
	
	
	UPDATE t_head
	SET t_head.VALID_FLAG = 0, t_head.ERROR_MSG = ERROR_MSG + '冻结件数不足;'
	 FROM  [LES].TE_WMM_TRAN_HEAD_TEMP t_head 
	LEFT JOIN LES.TT_WMS_STOCKS t_STOCK
	  ON t_STOCK.PART_NO = t_head.PART_NO
	   AND t_STOCK.PLANT=t_head.PLANT
	   AND t_STOCK.WM_NO=t_head.S_WM_NO
	   AND t_STOCK.ZONE_NO=t_head.S_ZONE_NO
	WHERE  t_STOCK.IS_BATCH!=1 AND t_head.TRAN_TYPE='零件解封'
	 AND (t_STOCK.FROZEN_STOCKS)<t_head.NUM	

	--UPDATE 
	--	[LES].TE_WMM_TRAN_HEAD_TEMP
	--SET 
	--	VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '可用库存量不足;'
	--WHERE 
	--	TRAN_TYPE <> '302' AND 
	--	(SELECT SUM(AVAILBLE_STOCKS * PACKAGE) FROM LES.TT_WMS_STOCKS s WHERE 
	--		s.PLANT = [LES].TE_WMM_TRAN_HEAD_TEMP.PLANT AND s.WM_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.O_WM_NO AND s.ZONE_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.O_ZONE_NO AND s.PART_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.PART_NO) < [LES].TE_WMM_TRAN_HEAD_TEMP.NUM

	--UPDATE 
	--	[LES].TE_WMM_TRAN_HEAD_TEMP
	--SET 
	--	VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '冻结库存量不足;'
	--WHERE 
	--	TRAN_TYPE = '302' AND 
	--	(SELECT SUM(FROZEN_STOCKS * PACKAGE) FROM LES.TT_WMS_STOCKS s WHERE 
	--		s.PLANT = [LES].TE_WMM_TRAN_HEAD_TEMP.PLANT AND s.WM_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.O_WM_NO AND s.ZONE_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.O_ZONE_NO AND s.PART_NO = [LES].TE_WMM_TRAN_HEAD_TEMP.PART_NO) < [LES].TE_WMM_TRAN_HEAD_TEMP.NUM
	END;

	END TRY
	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
	END CATCH;

	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION;