/************************************************/
/* Author:		孙述霄							*/
/* Create date: 2017-08-09						*/
/* Description:	更新收货批次号					*/
/************************************************/
CREATE PROCEDURE [LES].[PROC_WMM_UPDATE_RECEIVE_BATCHNO]
(
    @RECEIVE_NO NVARCHAR(20),	--入库单编号
	@BATCH_NO NVARCHAR(50),		--批次号
	@LOGINAME NVARCHAR(50)		--处理人
)
AS
BEGIN
    BEGIN TRY
        BEGIN TRAN
			DECLARE @PLANT NVARCHAR(5)
			DECLARE @WM_NO NVARCHAR(10)
			DECLARE @ZONE_NO NVARCHAR(20)
			DECLARE @RUNSHEET_CODE NVARCHAR(12)
			DECLARE @IS_DYNAMIC_DLOC INT

			--定义箱标签零时表
			DECLARE @BarCodeTable TABLE
			(
				[ID] INT IDENTITY,
				[BARCODE_DATA] NVARCHAR(50) --箱号
			)

			--定义托号零时表
			DECLARE @TrayNoTable TABLE
			(
				[ID] INT IDENTITY,
				[TRAY_NO] NVARCHAR(20) --托号
			)

			--获取入库工厂、仓库、存储区
			SELECT @PLANT=[PLANT], @WM_NO=[WM_NO], @ZONE_NO=[ZONE_NO], @RUNSHEET_CODE = [RUNSHEET_CODE] FROM [LES].[TT_WMM_RECEIVE] WITH (NOLOCK) WHERE [RECEIVE_NO] = @RECEIVE_NO

			IF @RUNSHEET_CODE = 'CTD'
				BEGIN
					UPDATE B
					SET B.[BATCH_NO] = @BATCH_NO
					FROM [LES].[TT_SPM_TRAY_INFO] A WITH (NOLOCK)
					INNER JOIN [LES].[TT_SPM_TRAY_DETAIL] B WITH (ROWLOCK)
					ON A.[TRAY_NO] = B.[TRAY_NO] AND B.[BIND_FLAG] = 1 AND B.[VALID_FLAG] = 1
					WHERE A.[BILL_NO] = @RECEIVE_NO AND A.[VALID_FLAG] = 1 AND A.[TRAY_STATUS] = 5

					UPDATE [LES].[TT_SPM_TRAY_INFO] WITH (ROWLOCK)
					SET [BATCH_NO] = @BATCH_NO,
						[TRAY_STATUS] = 4
					WHERE [BILL_NO] = @RECEIVE_NO AND [VALID_FLAG] = 1 AND [TRAY_STATUS] = 5
				END
			ELSE
				BEGIN
					SELECT @IS_DYNAMIC_DLOC = ISNULL([IS_DYNAMIC_DLOC], 0) FROM [LES].[TM_WMM_ZONES] WITH (NOLOCK) WHERE [PLANT] = @PLANT AND [WM_NO] = @WM_NO AND [ZONE_NO] = @ZONE_NO

					--获取本次提交的箱条码及托号
					INSERT INTO @BarCodeTable SELECT [BARCODE_DATA] FROM [LES].[TM_WMM_TRAN_DETAILS] WITH (NOLOCK) WHERE [TRAN_NO] = @RECEIVE_NO
					INSERT INTO @TrayNoTable SELECT DISTINCT [TRAY_NO] FROM [LES].[TT_SPM_TRAY_DETAIL] WITH (NOLOCK) WHERE [BIND_FLAG] = 1 AND [VALID_FLAG] = 1 AND [BARCODE_DATA] IN (SELECT [BARCODE_DATA] FROM @BarCodeTable)

					IF @IS_DYNAMIC_DLOC = 1
						BEGIN
							UPDATE [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH (ROWLOCK)
							SET [BATTH_NO] = @BATCH_NO,
								[WM_NO] = @WM_NO,
								[ZONE_NO] = @ZONE_NO,
								[BARCODE_STATUS] = 1,
								[UPDATE_USER] = @LOGINAME,
								[UPDATE_DATE] = GETDATE()
							WHERE [PLAN_ASN_RUNSHEET_NO] = @RECEIVE_NO AND [BARCODE_DATA] IN (SELECT [BARCODE_DATA] FROM @BarCodeTable)
						END
					ELSE
						BEGIN
							UPDATE [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH (ROWLOCK)
							SET [BATTH_NO] = @BATCH_NO,
								[WM_NO] = @WM_NO,
								[ZONE_NO] = @ZONE_NO,
								[DLOC] = [STORAGE_LOCATION],
								[BARCODE_STATUS] = 1,
								[UPDATE_USER] = @LOGINAME,
								[UPDATE_DATE] = GETDATE()
							WHERE [PLAN_ASN_RUNSHEET_NO] = @RECEIVE_NO AND [BARCODE_DATA] IN (SELECT [BARCODE_DATA] FROM @BarCodeTable)
						END

					UPDATE [LES].[TT_SPM_TRAY_INFO] WITH (ROWLOCK)
					SET [BATCH_NO] = @BATCH_NO
					WHERE [BILL_NO] = @RECEIVE_NO AND [VALID_FLAG] = 1 AND [TRAY_NO] IN (SELECT [TRAY_NO] FROM @TrayNoTable)

					UPDATE B
					SET B.[BATCH_NO] = @BATCH_NO
					FROM [LES].[TT_SPM_TRAY_INFO] A WITH (NOLOCK)
					INNER JOIN [LES].[TT_SPM_TRAY_DETAIL] B WITH (ROWLOCK)
					ON A.[TRAY_NO] = B.[TRAY_NO] AND B.[BIND_FLAG] = 1 AND B.[VALID_FLAG] = 1
					WHERE A.[BILL_NO] = @RECEIVE_NO AND A.[VALID_FLAG] = 1 AND A.[TRAY_NO] IN (SELECT [TRAY_NO] FROM @TrayNoTable)

					UPDATE B
					SET B.[BATCH_NO] = @BATCH_NO,
						B.[DLOC_STATUS] = 2
					FROM [LES].[TT_SPM_TRAY_INFO] A WITH (NOLOCK)
					INNER JOIN [LES].[TR_BAS_PART_TRAY_STOCK] B WITH (ROWLOCK)
					ON A.[TRAY_NO] = B.[TRAY_NO] AND B.[VALID_FLAG] = 1
					WHERE A.[BILL_NO] = @RECEIVE_NO AND A.[VALID_FLAG] = 1 AND A.[TRAY_NO] IN (SELECT [TRAY_NO] FROM @TrayNoTable)

					UPDATE [LES].[TT_SPM_TRAY_LOG] WITH (ROWLOCK)
					SET [BATCH_NO] = @BATCH_NO
					WHERE [ORDER_NO] = @RECEIVE_NO AND [VALID_FLAG] = 1 AND [TRAY_NO] IN (SELECT [TRAY_NO] FROM @TrayNoTable)
				END
			COMMIT TRAN
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION

		--记录错误信息
		INSERT INTO [LES].[TS_SYS_EXCEPTION] ([TIME_STAMP], [APPLICATION], [METHOD], [CLASS],  [EXCEPTION_MESSAGE], [ERROR_CODE])
		SELECT GETDATE(), 'INTERFACE', '[LES].[PROC_WMM_UPDATE_RECEIVE_BATCHNO]', 'Procedure', ERROR_MESSAGE(), ERROR_LINE()
    END CATCH
END