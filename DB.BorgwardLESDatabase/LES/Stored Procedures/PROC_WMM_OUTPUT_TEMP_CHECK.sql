






/********************************************************************/
/*                                                                  */
/*   Project Name:  LES System                          */
/*   Program Name:  [PROC_CHECK_TE_WMM_OUTPUT_TEMP]                       */
/*   Called By:     by the Page							*/
/*   Purpose:       This is the main stored procedure for the       */
/*   author:       andy	2015-06-09   				       */
/********************************************************************/
CREATE PROC [LES].[PROC_WMM_OUTPUT_TEMP_CHECK]
AS
	BEGIN TRANSACTION;

	
	BEGIN TRY

	DECLARE @Count INT 
	SELECT DISTINCT OUTPUT_TYPE, PLANT, WM_NO,ZONE_NO,SUPPLIER_NUM, SEND_TIME
	INTO #tmp FROM LES.TE_WMM_OUTPUT_TEMP T (NOLOCK)
 	SELECT @Count = COUNT(*) FROM #tmp
	DROP TABLE #tmp
	IF(@Count > 1)
	BEGIN 
		UPDATE [LES].TE_WMM_OUTPUT_TEMP 
		SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '检测到主表信息不一致;'
	END

	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '工厂不正确;'
	WHERE [PLANT] NOT IN (SELECT [PLANT] FROM [LES].[TM_BAS_PLANT])
	
	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '仓库不正确;'
	WHERE WM_NO NOT IN (SELECT WAREHOUSE FROM [LES].TM_BAS_WAREHOUSE)
	
	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '供应商不正确;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM LES.TM_BAS_SUPPLIER S (nolock) WHERE S.SUPPLIER_NUM = TE_WMM_OUTPUT_TEMP.SUPPLIER_NUM
	)
	
	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '目的存储区不正确;'
	WHERE PLANT_ZONE not in 
	(
		SELECT ZONE_NO FROM LES.TM_WMM_ZONES
	)

	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '在指定区域未检索到该零件;'
	WHERE PART_NO NOT IN 
	(
		SELECT T.PART_NO FROM 
		LES.TE_WMM_OUTPUT_TEMP T(NOLOCK)
		JOIN LES.TM_BAS_PARTS_STOCK S(NOLOCK)
		ON S.[PART_NO] = T.PART_NO AND
		 S.PLANT = T.PLANT AND S.WM_NO = T.WM_NO AND S.ZONE_NO = T.ZONE_NO
	)

	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '在目的存储区未检索到该零件;'
	WHERE PART_NO NOT IN 
	(
		SELECT T.PART_NO FROM 
		LES.TE_WMM_OUTPUT_TEMP T(NOLOCK)
		JOIN [LES].[TM_WMM_ZONES] Z(NOLOCK) 
			ON Z.ZONE_NO=T.PLANT_ZONE
		JOIN LES.TM_BAS_PARTS_STOCK S(NOLOCK) 
			ON S.[PART_NO] = T.PART_NO AND 
			S.PLANT = Z.PLANT AND S.WM_NO = Z.WM_NO AND S.ZONE_NO = Z.ZONE_NO
	)

    UPDATE [LES].TE_WMM_OUTPUT_TEMP 
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '源仓库对应的零件仓库信息中标准包装数为空或者为零;' 
	WHERE PART_NO IN 
	(
		SELECT T.PART_NO FROM 
		LES.TE_WMM_OUTPUT_TEMP T(NOLOCK)
	    JOIN LES.TM_BAS_PARTS_STOCK S(NOLOCK) 
		ON S.[PART_NO] = T.PART_NO AND 
		S.PLANT = T.PLANT AND S.WM_NO = T.WM_NO AND S.ZONE_NO = T.ZONE_NO
		where ISNULL(S.PACKAGE,0) = 0
	)

	UPDATE [LES].TE_WMM_OUTPUT_TEMP 
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '目的存储区对应的零件仓库信息中标准包装数为空或者为零;' 
	WHERE PART_NO IN 
	(
		SELECT T.PART_NO FROM 
		LES.TE_WMM_OUTPUT_TEMP T(NOLOCK)
	    JOIN LES.TM_BAS_PARTS_STOCK S(NOLOCK) 
		ON S.[PART_NO] = T.PART_NO AND 
		S.PLANT = T.PLANT AND S.ZONE_NO = T.PLANT_ZONE
		where ISNULL(S.PACKAGE,0) = 0
	)

	UPDATE [LES].TE_WMM_OUTPUT_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '零件号重复;'
	WHERE PART_NO IN (
		SELECT tmp.PART_NO FROM 
			(SELECT OUTPUT_NO, PART_NO, COUNT(*) AS NUM FROM [LES].[TE_WMM_OUTPUT_TEMP] WHERE PART_NO is not NULL GROUP BY OUTPUT_NO, PART_NO) tmp 
		WHERE tmp.NUM > 1)

	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数不能为空;' WHERE ISNULL(REQUIRED_BOX_NUM, '') = ''
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数不能为空;' WHERE ISNULL(REQUIRED_QTY, '') = ''
	--UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '实际箱数不能为空;' WHERE ISNULL(ACTUAL_BOX_NUM, '') = ''
	--UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '实际件数不能为空;' WHERE ISNULL(ACTUAL_QTY, '') = ''
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数应该是大于0的整数;' WHERE REQUIRED_BOX_NUM <= 0
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数应该是大于0的整数;' WHERE REQUIRED_QTY <= 0
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '实际箱数不能为负数;' WHERE ACTUAL_BOX_NUM < 0 AND ISNULL(ACTUAL_BOX_NUM, '') <> ''
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '实际件数不能为负数;' WHERE ACTUAL_QTY < 0 AND ISNULL(ACTUAL_QTY, '') <> ''

	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求箱数格式不对或超出范围;' WHERE ISNUMERIC(REQUIRED_BOX_NUM) = 0 AND ISNULL(REQUIRED_BOX_NUM, '') <> ''
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '需求件数格式不对或超出范围;' WHERE ISNUMERIC(REQUIRED_QTY) = 0 AND ISNULL(REQUIRED_QTY, '') <> ''
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '实际箱数格式不对或超出范围;' WHERE ISNUMERIC(ACTUAL_BOX_NUM) = 0 AND ISNULL(ACTUAL_BOX_NUM, '') <> ''
	UPDATE [LES].TE_WMM_OUTPUT_TEMP SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '实际件数格式不对或超出范围;' WHERE ISNUMERIC(ACTUAL_QTY) = 0 AND ISNULL(ACTUAL_QTY, '') <> ''


	END TRY
	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
	END CATCH;

	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION;