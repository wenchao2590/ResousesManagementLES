CREATE PROC [LES].[PROC_WMM_NOTIFICATION_TEMP_CHECK]
AS
BEGIN
	BEGIN TRANSACTION;

	BEGIN TRY

	DECLARE @CNT INT

	UPDATE [LES].TE_WMM_NOTIFICATION_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '盘点通知单号为空;'
	WHERE NOTIFICATION_NO IS NULL or LEN([NOTIFICATION_NO]) < 1

	UPDATE [LES].TE_WMM_NOTIFICATION_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '盘点通知单已被发布不可再修改;'
	WHERE EXISTS
	(
		SELECT 1 FROM LES.TT_WMM_NOTIFICATION_HEAD R (NOLOCK)
		WHERE R.NOTIFICATION_NO = [LES].TE_WMM_NOTIFICATION_TEMP.NOTIFICATION_NO 
		AND R.COUNT_STATUS >= 1
	)

	UPDATE [LES].TE_WMM_NOTIFICATION_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '盘点通知类型不正确;'
	WHERE [COUNT_TYPE_TEXT] NOT IN (SELECT DETAIL_VALUE FROM LES.TC_SYS_CODE_DETAIL WHERE CODE_NAME='wms_notifi_type')

	UPDATE [LES].TE_WMM_NOTIFICATION_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '盘点紧急程度不正确;'
	WHERE [EMERGENCY_TYPE_TEXT] NOT IN (SELECT DETAIL_VALUE FROM LES.TC_SYS_CODE_DETAIL WHERE CODE_NAME='wms_notif_emergercy_type')


	UPDATE [LES].TE_WMM_NOTIFICATION_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '零件号不正确或与该存储区域不匹配;'
	WHERE NOT EXISTS 
	(
		SELECT 1 FROM 
		LES.TM_BAS_PARTS_STOCK S(NOLOCK), 
		LES.TE_WMM_NOTIFICATION_TEMP T(NOLOCK) 
		WHERE 
		 T.PLANT = S.PLANT AND T.WM_NO = T.WM_NO AND T.ZONE_NO = S.ZONE_NO
		 AND S.[PART_NO] = T.PART_NO
	)

	UPDATE [LES].TE_WMM_NOTIFICATION_TEMP
	SET VALID_FLAG = 0, ERROR_MSG = ERROR_MSG + '零件号重复;'
	WHERE PART_NO IN (
		SELECT tmp.PART_NO FROM 
			(SELECT NOTIFICATION_NO, PART_NO, COUNT(*) AS NUM FROM [LES].[TE_WMM_NOTIFICATION_TEMP] WHERE PART_NO is not NULL GROUP BY NOTIFICATION_NO, PART_NO) tmp 
		WHERE tmp.NUM > 1)

	SELECT
		@CNT = COUNT(1)
	FROM
	(
		SELECT
			ISNULL(ST.[COUNT_PARTITION], '') AS [COUNT_PARTITION]
		FROM [LES].[TE_WMM_NOTIFICATION_TEMP] TE WITH (NOLOCK)
		LEFT JOIN [LES].[V_WMM_PART_STOCKS_VIEW] ST WITH (NOLOCK)
		ON TE.[PLANT] = ST.[PLANT] AND TE.[WM_NO] = ST.[WM_NO] AND TE.[ZONE_NO] = ST.[ZONE_NO] AND TE.[PART_NO] = ST.[PART_NO]
		GROUP BY ISNULL(ST.[COUNT_PARTITION], '')
	) AS A
	IF @CNT > 1
		BEGIN
			UPDATE TE
			SET TE.[VALID_FLAG] = 0,
				TE.[ERROR_MSG] = TE.[ERROR_MSG] + '不同盘点分区的零件不允许存在同一盘点通知单上，盘点分区：' + ISNULL(ST.[COUNT_PARTITION], '') + ';'
			FROM [LES].[TE_WMM_NOTIFICATION_TEMP] TE WITH (ROWLOCK)
			LEFT JOIN [LES].[V_WMM_PART_STOCKS_VIEW] ST WITH (NOLOCK)
			ON TE.[PLANT] = ST.[PLANT] AND TE.[WM_NO] = ST.[WM_NO] AND TE.[ZONE_NO] = ST.[ZONE_NO] AND TE.[PART_NO] = ST.[PART_NO]
		END
	
	UPDATE T1 SET T1.EMERGENCY_TYPE=T3.DETAIL_CODE,T1.COUNT_TYPE=T2.DETAIL_CODE
	FROM [LES].TE_WMM_NOTIFICATION_TEMP T1 
	LEFT JOIN LES.TC_SYS_CODE_DETAIL T2
	 ON T2.DETAIL_VALUE = T1.COUNT_TYPE_TEXT AND T2.CODE_NAME='wms_notifi_type'
	LEFT JOIN LES.TC_SYS_CODE_DETAIL T3
	 ON T3.DETAIL_VALUE = T1.EMERGENCY_TYPE_TEXT AND T3.CODE_NAME='wms_notif_emergercy_type'
    WHERE T1.VALID_FLAG!=0
	
	END TRY
	BEGIN CATCH
		SELECT 
			ERROR_NUMBER() AS ErrorNumber
			,ERROR_SEVERITY() AS ErrorSeverity
			,ERROR_STATE() AS ErrorState
			,ERROR_PROCEDURE() AS ErrorProcedure
			,ERROR_LINE() AS ErrorLine
			,ERROR_MESSAGE() AS ErrorMessage;

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
	END CATCH;

	IF @@TRANCOUNT > 0
		COMMIT TRANSACTION;
END