#region Declaim
//---------------------------------------------------------------------------
// Name:		EventLogInfo
// Function: 	Expose data in table TL_SYS_EVENT_LOG from database as business object to LOB system.
// Tool:		T4
// CreateDate:	2011年7月1日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.Runtime.Serialization;

using Infrustructure.Data;
using Infrustructure.Data.Integration;

#endregion

namespace Infrustructure.Event
{
    /// <summary>
    /// EventLogInfo对应表[TL_SYS_EVENT_LOG]
    /// </summary>	
    [Serializable]
    [DataContract]
    public  class EventLogInfo : BusinessObject, ICloneable
    {
        #region Constructors

        public EventLogInfo(int sequenceId,
                DateTime eventTime,
                EventID eventId,
                string eventSource,
                EventState eventState,
                EventType eventType,
                EventLevel eventLevel,
                string eventDetail,
                string parameter1,
                string parameter2,
                string parameter3,
                string parameter4,
                string parameter5,
                string parameter6,
                string parameter7,
                string parameter8,
                string parameter9,
                string parameter10,
                string comments
        )
            : this()
        {

            SequenceId = sequenceId;

            EventTime = eventTime;

            EventId = eventId;

            EventSource = eventSource;

            EventState = eventState;

            EventType = eventType;

            EventLevel = eventLevel;

            EventDetail = eventDetail;

            Parameter1 = parameter1;

            Parameter2 = parameter2;

            Parameter3 = parameter3;

            Parameter4 = parameter4;

            Parameter5 = parameter5;

            Parameter6 = parameter6;

            Parameter7 = parameter7;

            Parameter8 = parameter8;

            Parameter9 = parameter9;

            Parameter10 = parameter10;

            Comments = comments;
        }

        public EventLogInfo()
            : base("TL_SYS_EVENT_LOG")
        {
            List<string> keys = new List<string>();
            keys.Add("SEQUENCE_ID"); _Keys = keys.ToArray();

            Schema = new DataSchema();
            List<DataSchemaField> fields = new List<DataSchemaField>();


            DataSchemaField SEQUENCE_IDField = new DataSchemaField();
            SEQUENCE_IDField.Name = "SEQUENCE_ID";
            SEQUENCE_IDField.Type = typeof(int).ToString();
            SEQUENCE_IDField.Index = 0;
            fields.Add(SEQUENCE_IDField);

            DataSchemaField EVENT_TIMEField = new DataSchemaField();
            EVENT_TIMEField.Name = "EVENT_TIME";
            EVENT_TIMEField.Type = typeof(DateTime).ToString();
            EVENT_TIMEField.Index = 1;
            fields.Add(EVENT_TIMEField);

            DataSchemaField EVENT_IDField = new DataSchemaField();
            EVENT_IDField.Name = "EVENT_ID";
            EVENT_IDField.Type = typeof(int).ToString();
            EVENT_IDField.Index = 2;
            fields.Add(EVENT_IDField);

            DataSchemaField EVENT_SOURCEField = new DataSchemaField();
            EVENT_SOURCEField.Name = "EVENT_SOURCE";
            EVENT_SOURCEField.Type = typeof(string).ToString();
            EVENT_SOURCEField.Index = 3;
            fields.Add(EVENT_SOURCEField);

            DataSchemaField EVENT_STATEField = new DataSchemaField();
            EVENT_STATEField.Name = "EVENT_STATE";
            EVENT_STATEField.Type = typeof(int).ToString();
            EVENT_STATEField.Index = 4;
            fields.Add(EVENT_STATEField);

            DataSchemaField EVENT_TYPEField = new DataSchemaField();
            EVENT_TYPEField.Name = "EVENT_TYPE";
            EVENT_TYPEField.Type = typeof(int).ToString();
            EVENT_TYPEField.Index = 5;
            fields.Add(EVENT_TYPEField);

            DataSchemaField EVENT_LEVELField = new DataSchemaField();
            EVENT_LEVELField.Name = "EVENT_LEVEL";
            EVENT_LEVELField.Type = typeof(int).ToString();
            EVENT_LEVELField.Index = 6;
            fields.Add(EVENT_LEVELField);

            DataSchemaField EVENT_DETAILField = new DataSchemaField();
            EVENT_DETAILField.Name = "EVENT_DETAIL";
            EVENT_DETAILField.Type = typeof(string).ToString();
            EVENT_DETAILField.Index = 7;
            fields.Add(EVENT_DETAILField);

            DataSchemaField PARAMETER1Field = new DataSchemaField();
            PARAMETER1Field.Name = "PARAMETER1";
            PARAMETER1Field.Type = typeof(string).ToString();
            PARAMETER1Field.Index = 8;
            fields.Add(PARAMETER1Field);

            DataSchemaField PARAMETER2Field = new DataSchemaField();
            PARAMETER2Field.Name = "PARAMETER2";
            PARAMETER2Field.Type = typeof(string).ToString();
            PARAMETER2Field.Index = 9;
            fields.Add(PARAMETER2Field);

            DataSchemaField PARAMETER3Field = new DataSchemaField();
            PARAMETER3Field.Name = "PARAMETER3";
            PARAMETER3Field.Type = typeof(string).ToString();
            PARAMETER3Field.Index = 10;
            fields.Add(PARAMETER3Field);

            DataSchemaField PARAMETER4Field = new DataSchemaField();
            PARAMETER4Field.Name = "PARAMETER4";
            PARAMETER4Field.Type = typeof(string).ToString();
            PARAMETER4Field.Index = 11;
            fields.Add(PARAMETER4Field);

            DataSchemaField PARAMETER5Field = new DataSchemaField();
            PARAMETER5Field.Name = "PARAMETER5";
            PARAMETER5Field.Type = typeof(string).ToString();
            PARAMETER5Field.Index = 12;
            fields.Add(PARAMETER5Field);

            DataSchemaField PARAMETER6Field = new DataSchemaField();
            PARAMETER6Field.Name = "PARAMETER6";
            PARAMETER6Field.Type = typeof(string).ToString();
            PARAMETER6Field.Index = 13;
            fields.Add(PARAMETER6Field);

            DataSchemaField PARAMETER7Field = new DataSchemaField();
            PARAMETER7Field.Name = "PARAMETER7";
            PARAMETER7Field.Type = typeof(string).ToString();
            PARAMETER7Field.Index = 14;
            fields.Add(PARAMETER7Field);

            DataSchemaField PARAMETER8Field = new DataSchemaField();
            PARAMETER8Field.Name = "PARAMETER8";
            PARAMETER8Field.Type = typeof(string).ToString();
            PARAMETER8Field.Index = 15;
            fields.Add(PARAMETER8Field);

            DataSchemaField PARAMETER9Field = new DataSchemaField();
            PARAMETER9Field.Name = "PARAMETER9";
            PARAMETER9Field.Type = typeof(string).ToString();
            PARAMETER9Field.Index = 16;
            fields.Add(PARAMETER9Field);

            DataSchemaField PARAMETER10Field = new DataSchemaField();
            PARAMETER10Field.Name = "PARAMETER10";
            PARAMETER10Field.Type = typeof(string).ToString();
            PARAMETER10Field.Index = 17;
            fields.Add(PARAMETER10Field);

            DataSchemaField COMMENTSField = new DataSchemaField();
            COMMENTSField.Name = "COMMENTS";
            COMMENTSField.Type = typeof(string).ToString();
            COMMENTSField.Index = 18;
            fields.Add(COMMENTSField);

            Schema.Fields = fields.ToArray();
        }

        #endregion

        #region Attributes

        public int SequenceId { get; set; }

        public DateTime EventTime { get; set; }

        public EventID EventId { get; set; }

        public string EventSource { get; set; }

        public EventState EventState { get; set; }

        public EventType EventType { get; set; }

        public EventLevel EventLevel { get; set; }

        public string EventDetail { get; set; }

        public string Parameter1 { get; set; }

        public string Parameter2 { get; set; }

        public string Parameter3 { get; set; }

        public string Parameter4 { get; set; }

        public string Parameter5 { get; set; }

        public string Parameter6 { get; set; }

        public string Parameter7 { get; set; }

        public string Parameter8 { get; set; }

        public string Parameter9 { get; set; }

        public string Parameter10 { get; set; }

        public string Comments { get; set; }

        #endregion

        #region ICloneable Members

        object ICloneable.Clone()
        {
            EventLogInfo info = new EventLogInfo();

            info.SequenceId = this.SequenceId;
            info.EventTime = this.EventTime;
            info.EventId = this.EventId;
            info.EventSource = this.EventSource;
            info.EventState = this.EventState;
            info.EventType = this.EventType;
            info.EventLevel = this.EventLevel;
            info.EventDetail = this.EventDetail;
            info.Parameter1 = this.Parameter1;
            info.Parameter2 = this.Parameter2;
            info.Parameter3 = this.Parameter3;
            info.Parameter4 = this.Parameter4;
            info.Parameter5 = this.Parameter5;
            info.Parameter6 = this.Parameter6;
            info.Parameter7 = this.Parameter7;
            info.Parameter8 = this.Parameter8;
            info.Parameter9 = this.Parameter9;
            info.Parameter10 = this.Parameter10;
            info.Comments = this.Comments;
            return info;
        }

        public EventLogInfo Clone()
        {
            return ((ICloneable)this).Clone() as EventLogInfo;
        }

        #endregion

        public override string ToString()
        {
            return base.ToString();
        }
    }

    /// <summary>
    /// EventLogInfoCollection对应表[TL_SYS_EVENT_LOG]
    /// </summary>
    public partial class EventLogInfoCollection : BusinessObjectCollection<EventLogInfo>
    {
        public EventLogInfoCollection() : base("TL_SYS_EVENT_LOG") { }
    }
}
