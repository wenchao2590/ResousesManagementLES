<#@ include file="$(SolutionDir)\Reference\DBEntity.SQLServer.ttinclude" #> 
<#@ output extension=".txt" #>
<#	        
	var tableNames = "TS_SYS_MESSAGE";     
	var NameSpace = "DM.SYS";    
	//Output File Path
	var outputFilePath =  Path.GetDirectoryName(Host.TemplateFile);
	                   
	var manager = Manager.Create(Host, GenerationEnvironment);
	var dbExporter = new DBExporter(); 
    var entities = dbExporter.LoadEntities(); 
    foreach(Entity tbl in entities){  
		if(tableNames!="")
		{   
			if(tbl.Name.ToLower() != tableNames.ToLower())
				continue; 
		}     
		manager.StartNewFile(Helper.TableNameToPascal(tbl.Name) + "Info.Gen.cs", outputFilePath);
#>
#region Declaim
//---------------------------------------------------------------------------
// Name:		<#= Helper.TableNameToPascal(tbl.Name) #>Info
// Function: 	Expose data in table <#= tbl.Name #> from database as business object to MES system.
// Tool:		T4
// CreateDate:	<#= DateTime.Now.ToLongDateString() #>
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace <#= NameSpace #> 
{   
	/// <summary>
    /// <#= Helper.TableNameToPascal(tbl.Name) #>Info对应表[<#= tbl.Name #>]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class <#= Helper.TableNameToPascal(tbl.Name) #>Info : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public <#= Helper.TableNameToPascal(tbl.Name) #>Info(<# var paramStr=""; int length=tbl.Columns.ToList().Count; var index=0; foreach(Column col in tbl.Columns){ if(index!=length-1) paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) + ",\r\n\t\t\t\t"; else paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) + "\t\t\t\t" ; index++;}  #>
		 <#= paramStr #>
		) : this()
		{
			<# foreach(Column col in tbl.Columns){ #> 
			<#= Helper.ConvertToPascal(col.Name) #> = a<#= Helper.ConvertToPascal(col.Name) #>;
		<# } #>}
		
		public <#= Helper.TableNameToPascal(tbl.Name) #>Info():base("<#= tbl.Name #>")
		{
			List<string> keys = new List<string>();
			<# foreach(Column col in tbl.Columns){ #> <# if(col.IsPrimaryKey) { #>
			keys.Add("<#= col.Name #>");<# }}#>_Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			<# int num=0; foreach(Column col in tbl.Columns){  #> 
			DataSchemaField <#= col.Name #>Field = new DataSchemaField();
			<#= col.Name #>Field.Name = "<#= col.Name #>";
			<#= col.Name #>Field.Type = typeof(<#= Helper.GetSysType(col.DataType) #>).ToString();
			<#= col.Name #>Field.Index = <#= num #>;
			fields.Add(<#= col.Name #>Field);
			<# num++; } #>			
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

	<#  
		foreach(Column col in tbl.Columns){
	#>
	<# if(!col.HasDefault){ #>[DataMember]
		public <#= col.SysType#><#= Helper.CheckNullable(col) #> <#= Helper.ConvertToPascal(col.Name) #>{ get;set; }		
		<# }else{ #>		
		private <#= col.SysType#><#= Helper.CheckNullable(col) #> _<#= Helper.ConvertToPascal(col.Name) #> = <#= col.DefaultValue #>;
		
		[DataMember]	
		public <#= col.SysType#><#= Helper.CheckNullable(col) #> <#= Helper.ConvertToPascal(col.Name) #>
		{
			get
			{
				return _<#= Helper.ConvertToPascal(col.Name) #>;
			}
			set
			{
				_<#= Helper.ConvertToPascal(col.Name) #> = value;
			}
		}
				
		<# }#>
		
	<#
		}
	#>
	#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			<#= Helper.TableNameToPascal(tbl.Name) #>Info info = new <#= Helper.TableNameToPascal(tbl.Name) #>Info();

			<#	foreach(Column col in tbl.Columns){ #>info.<#= Helper.ConvertToPascal(col.Name) #> = this.<#= Helper.ConvertToPascal(col.Name) #>;
			<# } #>return info;			
		}
		 
		public <#= Helper.TableNameToPascal(tbl.Name) #>Info Clone()
		{
			return ((ICloneable) this).Clone() as <#= Helper.TableNameToPascal(tbl.Name) #>Info;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// <#= Helper.TableNameToPascal(tbl.Name) #>InfoCollection对应表[<#= tbl.Name #>]
    /// </summary>
	public partial class <#= Helper.TableNameToPascal(tbl.Name) #>InfoCollection : BusinessObjectCollection<<#= Helper.TableNameToPascal(tbl.Name) #>Info>
	{
		public <#= Helper.TableNameToPascal(tbl.Name) #>InfoCollection():base("<#= tbl.Name #>"){}	
	}
}
<#   
	manager.EndBlock();
		
}
	manager.Process(true); 
#>
