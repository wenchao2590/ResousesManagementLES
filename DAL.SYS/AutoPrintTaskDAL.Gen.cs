#region Declaim
//---------------------------------------------------------------------------
// Name:		AutoPrintTaskDAL
// Function: 	Expose data in table TL_SYS_AUTO_PRINT_TASK from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月18日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.SYS;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.SYS 
{     
	//// <summary>
    /// AutoPrintTaskDAL对应表[TL_SYS_AUTO_PRINT_TASK]
    /// </summary>
    public partial class AutoPrintTaskDAL : BusinessObjectProvider<AutoPrintTaskInfo>
	{
		#region Sql Statements
		private const string TL_SYS_AUTO_PRINT_TASK_SELECT_BY_ID =
			@"SELECT ID,
				SHEET_FID,
				FID,
				PRINT_CONFIG_CODE,
				PRINT_FILEPATH,
				STATUS,
				PRINT_TIME,
				VALID_FLAG,
				PULL_MODEL,
				PART_BOX_CODE,
				SOURCE_ID,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				  
				FROM [dbo].[TL_SYS_AUTO_PRINT_TASK] WITH(NOLOCK) WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			
		private const string TL_SYS_AUTO_PRINT_TASK_SELECT = 
			@"SELECT ID,
				SHEET_FID,
				FID,
				PRINT_CONFIG_CODE,
				PRINT_FILEPATH,
				STATUS,
				PRINT_TIME,
				VALID_FLAG,
				PULL_MODEL,
				PART_BOX_CODE,
				SOURCE_ID,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
				FROM [dbo].[TL_SYS_AUTO_PRINT_TASK] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TL_SYS_AUTO_PRINT_TASK_SELECT_COUNTS = 
			@"SELECT count(*) FROM [dbo].[TL_SYS_AUTO_PRINT_TASK]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TL_SYS_AUTO_PRINT_TASK_INSERT =
			@"INSERT INTO [dbo].[TL_SYS_AUTO_PRINT_TASK] (
				SHEET_FID,
				FID,
				PRINT_CONFIG_CODE,
				PRINT_FILEPATH,
				STATUS,
				PRINT_TIME,
				VALID_FLAG,
				PULL_MODEL,
				PART_BOX_CODE,
				SOURCE_ID,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
			) VALUES (
				@SHEET_FID,
				@FID,
				@PRINT_CONFIG_CODE,
				@PRINT_FILEPATH,
				@STATUS,
				@PRINT_TIME,
				@VALID_FLAG,
				@PULL_MODEL,
				@PART_BOX_CODE,
				@SOURCE_ID,
				@CREATE_DATE,
				@CREATE_USER,
				@MODIFY_DATE,
				@MODIFY_USER				 
			);SELECT @@IDENTITY;";
		private const string TL_SYS_AUTO_PRINT_TASK_UPDATE =
			@"UPDATE [dbo].[TL_SYS_AUTO_PRINT_TASK] WITH(ROWLOCK) 
				SET SHEET_FID=@SHEET_FID,
				FID=@FID,
				PRINT_CONFIG_CODE=@PRINT_CONFIG_CODE,
				PRINT_FILEPATH=@PRINT_FILEPATH,
				STATUS=@STATUS,
				PRINT_TIME=@PRINT_TIME,
				VALID_FLAG=@VALID_FLAG,
				PULL_MODEL=@PULL_MODEL,
				PART_BOX_CODE=@PART_BOX_CODE,
				SOURCE_ID=@SOURCE_ID,
				CREATE_DATE=@CREATE_DATE,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				MODIFY_USER=@MODIFY_USER				 
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";

		private const string TL_SYS_AUTO_PRINT_TASK_DELETE =
			@"DELETE FROM [dbo].[TL_SYS_AUTO_PRINT_TASK] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get AutoPrintTaskInfo
		/// </summary>
		/// <param name="ID">AutoPrintTaskInfo Primary key </param>
		/// <returns></returns> 
		public AutoPrintTaskInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TL_SYS_AUTO_PRINT_TASK_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateAutoPrintTaskInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>AutoPrintTaskInfo Collection </returns>
		public List<AutoPrintTaskInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TL_SYS_AUTO_PRINT_TASK_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>AutoPrintTaskInfo Collection </returns>
		public List<AutoPrintTaskInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<AutoPrintTaskInfo> list = new List<AutoPrintTaskInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateAutoPrintTaskInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<AutoPrintTaskInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [dbo].[TL_SYS_AUTO_PRINT_TASK]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<AutoPrintTaskInfo> list = new List<AutoPrintTaskInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateAutoPrintTaskInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TL_SYS_AUTO_PRINT_TASK_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(AutoPrintTaskInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TL_SYS_AUTO_PRINT_TASK_INSERT);			
			db.AddInParameter(dbCommand, "@SHEET_FID", DbType.Guid, info.SheetFid);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@PRINT_CONFIG_CODE", DbType.String, info.PrintConfigCode);
			db.AddInParameter(dbCommand, "@PRINT_FILEPATH", DbType.String, info.PrintFilepath);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@PRINT_TIME", DbType.DateTime, info.PrintTime);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@PULL_MODEL", DbType.Int32, info.PullModel);
			db.AddInParameter(dbCommand, "@PART_BOX_CODE", DbType.String, info.PartBoxCode);
			db.AddInParameter(dbCommand, "@SOURCE_ID", DbType.Int32, info.SourceId);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(AutoPrintTaskInfo info)
		{
			return  
			@"insert into [dbo].[TL_SYS_AUTO_PRINT_TASK] (
				SHEET_FID,
				FID,
				PRINT_CONFIG_CODE,
				PRINT_FILEPATH,
				STATUS,
				PRINT_TIME,
				VALID_FLAG,
				PULL_MODEL,
				PART_BOX_CODE,
				SOURCE_ID,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
			) values ("+
				(info.SheetFid == null ? "NULL" : "N'" + info.SheetFid.GetValueOrDefault() + "'") + ","+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.PrintConfigCode) ? "NULL" : "N'" + info.PrintConfigCode + "'") + ","+
				(string.IsNullOrEmpty(info.PrintFilepath) ? "NULL" : "N'" + info.PrintFilepath + "'") + ","+
				(info.Status == null ? "NULL" : "" + info.Status.GetValueOrDefault() + "") + ","+
				(info.PrintTime == null ? "NULL" : "N'" + info.PrintTime.GetValueOrDefault() + "'") + ","+
				"1" + ","+		
				(info.PullModel == null ? "NULL" : "" + info.PullModel.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PartBoxCode) ? "NULL" : "N'" + info.PartBoxCode + "'") + ","+
				(info.SourceId == null ? "NULL" : "" + info.SourceId.GetValueOrDefault() + "") + ","+
				"GETDATE()" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				"NULL" + ","+			
				"NULL" + ");";			
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(AutoPrintTaskInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TL_SYS_AUTO_PRINT_TASK_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@SHEET_FID", DbType.Guid, info.SheetFid);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@PRINT_CONFIG_CODE", DbType.String, info.PrintConfigCode);
			db.AddInParameter(dbCommand, "@PRINT_FILEPATH", DbType.String, info.PrintFilepath);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@PRINT_TIME", DbType.DateTime, info.PrintTime);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@PULL_MODEL", DbType.Int32, info.PullModel);
			db.AddInParameter(dbCommand, "@PART_BOX_CODE", DbType.String, info.PartBoxCode);
			db.AddInParameter(dbCommand, "@SOURCE_ID", DbType.Int32, info.SourceId);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">AutoPrintTaskInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TL_SYS_AUTO_PRINT_TASK_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">AutoPrintTaskInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [dbo].[TL_SYS_AUTO_PRINT_TASK] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
              db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">AutoPrintTaskInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [dbo].[TL_SYS_AUTO_PRINT_TASK] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static AutoPrintTaskInfo CreateAutoPrintTaskInfo(IDataReader rdr)
		{
			AutoPrintTaskInfo info = new AutoPrintTaskInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.SheetFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("SHEET_FID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.PrintConfigCode = DBConvert.GetString(rdr, rdr.GetOrdinal("PRINT_CONFIG_CODE"));			
			info.PrintFilepath = DBConvert.GetString(rdr, rdr.GetOrdinal("PRINT_FILEPATH"));			
			info.Status = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("STATUS"));			
			info.PrintTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PRINT_TIME"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.PullModel = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PULL_MODEL"));			
			info.PartBoxCode = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_BOX_CODE"));			
			info.SourceId = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SOURCE_ID"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			return info;
		}
		
		#endregion
	}
}
