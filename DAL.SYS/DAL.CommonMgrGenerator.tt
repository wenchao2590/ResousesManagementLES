<#@ include file="$(SolutionDir)\Reference\DBEntity.SQLServer.ttinclude" #> 
<#@ output extension=".txt" #> 
<#	
	var tableNames = "TS_SYS_MESSAGE";     
	var MouldName = "SYS";
	var tableSchema = "dbo";
	var NameSpace = "DAL." + MouldName; 
	var lcTableName_Up = "";  
	//Output File Path
	var outputFilePath =  Path.GetDirectoryName(Host.TemplateFile);
	                   
	var manager = Manager.Create(Host, GenerationEnvironment);
	var dbExporter = new DBExporter(); 
    var entities = dbExporter.LoadEntities(); 
    foreach(Entity tbl in entities){  
		//表名按规则转换
		lcTableName_Up = Helper.TableNameToPascal(tbl.Name.ToLower());
		//非指定表明 或表名不符合转换规则 不生成类代码
		if(tableNames!="" && tbl.Name.ToLower() != tableNames.ToLower())
			continue;
		else if(string.IsNullOrEmpty(lcTableName_Up))
			continue;

		manager.StartNewFile(lcTableName_Up + "DAL.Gen.cs", outputFilePath);
#>
#region Declaim
//---------------------------------------------------------------------------
// Name:		<#= Helper.TableNameToPascal(tbl.Name) #>DAL
// Function: 	Expose data in table <#= tbl.Name #> from database as business object to MES system.
// Tool:		T4
// CreateDate:	<#= DateTime.Now.ToLongDateString() #>
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.<#= MouldName #>;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace <#= NameSpace #> 
{     
	//// <summary>
    /// <#= lcTableName_Up #>DAL对应表[<#= tbl.Name #>]
    /// </summary>
    public partial class <#=lcTableName_Up #>DAL : BusinessObjectProvider<<#=lcTableName_Up #>Info>
	{
<# bool logicDeleteFlag = false;var logicValidSql = "1=1"; foreach(Column col in tbl.Columns){ if(col.Name.ToLower()=="valid_flag") {logicDeleteFlag=true;logicValidSql="[VALID_FLAG] = 1";} } #>
<# var isIdentity = false;var identityDataType = "bool"; foreach(Column col in tbl.Columns){ if(col.IsIdentity){ isIdentity=true; identityDataType=Helper.GetSysType(col.DataType);} } #>
<# var keyField =""; foreach(Column col in tbl.Columns){ if(col.IsPrimaryKey) keyField=col.Name; } if(keyField.Length==0) keyField = "nid"; #>
<# var whereStr=""; foreach(Column col in tbl.Columns){ if(col.IsPrimaryKey) whereStr+="AND "+col.Name+" =@"+col.Name; } if(whereStr.Length>3) whereStr="WHERE "+ logicValidSql + " " + whereStr; #>
<# var selectStr=""; int length=tbl.Columns.ToList().Count; var index=0; foreach(Column col in tbl.Columns){ if(index!=length-1) selectStr+= col.Name + ",\r\n\t\t\t\t"; else selectStr+= col.Name + "\t\t\t\t" ; index++;}  #>
<# var insertStr=""; length=tbl.Columns.ToList().Count; index=0; foreach(Column col in tbl.Columns){ if(!col.IsIdentity)  { if(index!=length-1) insertStr+= col.Name + ",\r\n\t\t\t\t"; else insertStr+= col.Name + "\t\t\t\t" ;} index++;}  #>
<# var valuesStr=""; index=0; foreach(Column col in tbl.Columns){if(!col.IsIdentity) {if(index!=length-1) valuesStr+= "@"+col.Name + ",\r\n\t\t\t\t" ;  else valuesStr+="@"+col.Name + "\t\t\t\t"; } index++; } #>
<# var setStr=""; index=0; foreach(Column col in tbl.Columns){ if(!col.IsIdentity) { if(index!=length-1) setStr+=col.Name+"=@"+col.Name+",\r\n\t\t\t\t" ; else setStr+=col.Name+"=@"+col.Name + "\t\t\t\t"; } index++;}  #>
<# var paramStr=""; length=0; foreach(Column col in tbl.Columns){  if(col.IsPrimaryKey) length++; }  index=0; foreach(Column col in tbl.Columns){  if(col.IsPrimaryKey) { if(index!=length-1) paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) + ",\r\n\t\t\t\t"; else paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) ; index++; } }  #>
		#region Sql Statements
		private const string <#=tbl.Name #>_SELECT_BY_ID =
			<# if(whereStr.Length>0){ #>@"SELECT <#= selectStr #>  
				FROM [<#= tableSchema #>].[<#=tbl.Name #>] WITH(NOLOCK) <#= whereStr #>;";<# }else{ #>"";<# } #>

			
		private const string <#=tbl.Name #>_SELECT = 
			@"SELECT <#= selectStr #> 
				FROM [<#= tableSchema #>].[<#=tbl.Name #>] WITH (NOLOCK) WHERE <#=logicValidSql #> {0};";
		
		private const string <#=tbl.Name #>_SELECT_COUNTS = 
			@"SELECT count(*) FROM [<#= tableSchema #>].[<#=tbl.Name #>]  WITH(NOLOCK) WHERE <#=logicValidSql #> {0};";

		private const string <#=tbl.Name #>_INSERT =
			@"INSERT INTO [<#= tableSchema #>].[<#=tbl.Name #>] (
				<#= insertStr #> 
			) VALUES (
				<#= valuesStr #> 
			);<# if(isIdentity){ #>SELECT @@IDENTITY;";<# }else{ #>";<# } #>

		private const string <#=tbl.Name #>_UPDATE =
			<# if(whereStr.Length>0){ #>@"UPDATE [<#= tableSchema #>].[<#=tbl.Name #>] WITH(ROWLOCK) 
				SET <#= setStr #> 
				<#= whereStr #>;";<# }else{ #>"";<# } #>


		private const string <#=tbl.Name #>_DELETE =
			<# if(whereStr.Length>0){ #>@"DELETE FROM [<#= tableSchema #>].[<#=tbl.Name #>] WITH(ROWLOCK)  
				<#= whereStr #>;";<# }else{ #>"";<# } #>

		#endregion
		 
		#region Access Methods
		 
		<# if(paramStr.Length>0){ #>/// <summary>
		/// Get <#=lcTableName_Up #>Info
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns> 
		public <#=lcTableName_Up #>Info GetInfo(<#= paramStr #>)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_SELECT_BY_ID);
			<# foreach(Column col in tbl.Columns) { #><# if(col.IsPrimaryKey) { #>db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType)#>, a<#= Helper.ConvertToPascal(col.Name) #>);
			<# }} #>using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return Create<#=lcTableName_Up #>Info(dr);
			}
			return null;
		}
		<# } #>/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns><#=lcTableName_Up #>Info Collection </returns>
		public List<<#=lcTableName_Up #>Info> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(<#=tbl.Name #>_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns><#=lcTableName_Up #>Info Collection </returns>
		public List<<#=lcTableName_Up #>Info> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<<#=lcTableName_Up #>Info> list = new List<<#=lcTableName_Up #>Info>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(Create<#=lcTableName_Up #>Info(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<<#=lcTableName_Up #>Info> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where <#=logicValidSql #> " + textWhere;
                else
                    whereText += " where " + textWhere + " and <#=logicValidSql #>";
            }
			else
                whereText += " where <#=logicValidSql #> ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[<#= keyField #>] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [<#= tableSchema #>].[<#=tbl.Name #>]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<<#=lcTableName_Up #>Info> list = new List<<#=lcTableName_Up #>Info>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(Create<#=lcTableName_Up #>Info(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(<#=tbl.Name #>_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public <#=identityDataType #> Add(<#=lcTableName_Up #>Info info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_INSERT);			
			<# foreach(Column col in tbl.Columns) { if(!col.IsIdentity) { #>db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, info.<#= Helper.ConvertToPascal(col.Name) #>);
			<# } } #><# if(isIdentity){ #>return <#=identityDataType #>.Parse("0" + db.ExecuteScalar(dbCommand));<# }else{ #>return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;<# } #>
		
		}		
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(<#=lcTableName_Up #>Info info)
		{
			return  
			@"insert into [<#= tableSchema #>].[<#=tbl.Name #>] (
				<#= insertStr #> 
			) values ("+
				<# int colIndex = tbl.Columns.ToList().Count; foreach(Column col in tbl.Columns) { colIndex--; if(!col.IsIdentity) { var colName = Helper.ConvertToPascal(col.Name); if(colName == "ValidFlag") { #>
"1" + <# if (colIndex > 0) { #>","+<# }else{ #>");";<# } #>		
				<# continue; } if(colName == "CreateDate") { #>
"GETDATE()" + <# if (colIndex > 0) { #>","+<# }else{ #>");";<# } #>			
				<# continue; } if(colName == "CreateUser") { #>
"N'" + info.CreateUser + "'" + <# if (colIndex > 0) { #>","+<# }else{ #>");";<# } #>		
				<# continue; } if(colName == "Fid") { #>
(info.Fid == null ? "NEWID()" : "N'" + info.<#= colName #>.GetValueOrDefault() + "'") + <# if (colIndex > 0) { #>","+
<# }else{ #>");";<# } #>
				<# continue; } if(colName == "ModifyDate" || colName == "ModifyUser") { #>
"NULL" + <# if (colIndex > 0) { #>","+<# }else{ #>");";<# } #>			
				<# continue; } var colType = Helper.GetDbType(col.DataType); switch(colType){ case "DbType.Guid":case "DbType.DateTime": #>
(info.<#= colName #> == null ? "NULL" : "N'" + info.<#= colName #>.GetValueOrDefault() + "'") + <# if (colIndex > 0) { #>","+
<# }else{ #>");";<# } #>
				<# break; case "DbType.Decimal":case "DbType.Int32":case "DbType.Int64":#>
(info.<#= colName #> == null ? "NULL" : "" + info.<#= colName #>.GetValueOrDefault() + "") + <# if (colIndex > 0) { #>","+
<# }else{ #>");";<# } #>
				<# break; case "DbType.Boolean": #>
(info.<#= colName #> == null ? "NULL" : "" + (info.<#= colName #>.GetValueOrDefault() ? "1" : "0") + "") + <# if (colIndex > 0) { #>","+
<# }else{ #>");";<# } #>
				<# break; default: #>
(string.IsNullOrEmpty(info.<#= colName #>) ? "NULL" : "N'" + info.<#= colName #> + "'") + <# if (colIndex > 0) { #>","+
<# }else{ #>");";<# } #>
				<# break; } } } #>}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(<#=lcTableName_Up #>Info info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_UPDATE);				
			<# foreach(Column col in tbl.Columns) { #>db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, info.<#= Helper.ConvertToPascal(col.Name) #>);
			<# } #>return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		<# if(paramStr.Length>0){ #>/// <summary>
		/// Delete
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns>
		public int Delete(<#= paramStr #>)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_DELETE);
		    <# foreach(Column col in tbl.Columns) { #><# if(col.IsPrimaryKey) { #>db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, a<#= Helper.ConvertToPascal(col.Name) #>);
			<# }} #>return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}<# } #>
<# if(paramStr.Length>0&&logicDeleteFlag){ #>/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns>
		public int LogicDelete(<#if(paramStr.Length>0) #><#= paramStr #>, string loginUser)
		{
		    string sql = "update [<#= tableSchema #>].[<#=tbl.Name #>] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "<#= whereStr #>;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
<# foreach(Column col in tbl.Columns) { #> <# if(col.IsPrimaryKey) { #>
			db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, a<#= Helper.ConvertToPascal(col.Name) #>);
<# }} #>db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}<# } #>

<# if(paramStr.Length>0){ #>
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields<#= " ,"+paramStr #>)
		{
		    string sql = "update [<#= tableSchema #>].[<#=tbl.Name #>] WITH(ROWLOCK) "
                + "set " + fields
                + "<#= whereStr #>;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			<# foreach(Column col in tbl.Columns) { #><# if(col.IsPrimaryKey) { #>db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, a<#= Helper.ConvertToPascal(col.Name) #>);
			<# }} #>return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}<# } #>		
		#endregion
		  
		#region Helpers   
	  
		private static <#=lcTableName_Up #>Info Create<#=lcTableName_Up #>Info(IDataReader rdr)
		{
			<#=lcTableName_Up #>Info info = new <#=lcTableName_Up #>Info();
			<# foreach(Column col in tbl.Columns) { #>info.<#= Helper.ConvertToPascal(col.Name) #> = <#= Helper.GetDBConvertMethod(col.DataType + Helper.CheckNullable(col)) #>(rdr, rdr.GetOrdinal("<#= col.Name #>"));			
			<# ;} #>return info;
		}
		
		#endregion
	}
}
<#   
		manager.EndBlock();		
    }

	manager.Process(true); 
#>
