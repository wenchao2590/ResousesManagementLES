#region Declaim
//---------------------------------------------------------------------------
// Name:		ProcessScheduleDAL
// Function: 	Expose data in table TS_SYS_PROCESS_SCHEDULE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月9日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.SYS;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.SYS 
{     
	//// <summary>
    /// ProcessScheduleDAL对应表[TS_SYS_PROCESS_SCHEDULE]
    /// </summary>
    public partial class ProcessScheduleDAL : BusinessObjectProvider<ProcessScheduleInfo>
	{
		#region Sql Statements
		private const string TS_SYS_PROCESS_SCHEDULE_SELECT_BY_ID =
			@"SELECT PROCESS_CODE,
				PROCESS_NAME,
				LAST_RUN_BEGIN_TIME,
				LAST_RUN_END_TIME,
				LAST_RUN_STATUS,
				RUN_INTERVAL,
				CHECK_INTERVAL,
				SYSTEM_PARAMETER1,
				SYSTEM_PARAMETER2,
				SYSTEM_PARAMETER3,
				SYSTEM_PARAMETER4,
				SYSTEM_PARAMETER5,
				VALID_FLAG,
				ID,
				MODIFY_DATE,
				CREATE_DATE,
				MODIFY_USER,
				FID,
				CREATE_USER				  
				FROM [dbo].[TS_SYS_PROCESS_SCHEDULE] WITH(NOLOCK) WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			
		private const string TS_SYS_PROCESS_SCHEDULE_SELECT = 
			@"SELECT PROCESS_CODE,
				PROCESS_NAME,
				LAST_RUN_BEGIN_TIME,
				LAST_RUN_END_TIME,
				LAST_RUN_STATUS,
				RUN_INTERVAL,
				CHECK_INTERVAL,
				SYSTEM_PARAMETER1,
				SYSTEM_PARAMETER2,
				SYSTEM_PARAMETER3,
				SYSTEM_PARAMETER4,
				SYSTEM_PARAMETER5,
				VALID_FLAG,
				ID,
				MODIFY_DATE,
				CREATE_DATE,
				MODIFY_USER,
				FID,
				CREATE_USER				 
				FROM [dbo].[TS_SYS_PROCESS_SCHEDULE] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TS_SYS_PROCESS_SCHEDULE_SELECT_COUNTS = 
			@"SELECT count(*) FROM [dbo].[TS_SYS_PROCESS_SCHEDULE]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TS_SYS_PROCESS_SCHEDULE_INSERT =
			@"INSERT INTO [dbo].[TS_SYS_PROCESS_SCHEDULE] (
				PROCESS_CODE,
				PROCESS_NAME,
				LAST_RUN_BEGIN_TIME,
				LAST_RUN_END_TIME,
				LAST_RUN_STATUS,
				RUN_INTERVAL,
				CHECK_INTERVAL,
				SYSTEM_PARAMETER1,
				SYSTEM_PARAMETER2,
				SYSTEM_PARAMETER3,
				SYSTEM_PARAMETER4,
				SYSTEM_PARAMETER5,
				VALID_FLAG,
				MODIFY_DATE,
				CREATE_DATE,
				MODIFY_USER,
				FID,
				CREATE_USER				 
			) VALUES (
				@PROCESS_CODE,
				@PROCESS_NAME,
				@LAST_RUN_BEGIN_TIME,
				@LAST_RUN_END_TIME,
				@LAST_RUN_STATUS,
				@RUN_INTERVAL,
				@CHECK_INTERVAL,
				@SYSTEM_PARAMETER1,
				@SYSTEM_PARAMETER2,
				@SYSTEM_PARAMETER3,
				@SYSTEM_PARAMETER4,
				@SYSTEM_PARAMETER5,
				@VALID_FLAG,
				@MODIFY_DATE,
				@CREATE_DATE,
				@MODIFY_USER,
				@FID,
				@CREATE_USER				 
			);SELECT @@IDENTITY;";
		private const string TS_SYS_PROCESS_SCHEDULE_UPDATE =
			@"UPDATE [dbo].[TS_SYS_PROCESS_SCHEDULE] WITH(ROWLOCK) 
				SET PROCESS_CODE=@PROCESS_CODE,
				PROCESS_NAME=@PROCESS_NAME,
				LAST_RUN_BEGIN_TIME=@LAST_RUN_BEGIN_TIME,
				LAST_RUN_END_TIME=@LAST_RUN_END_TIME,
				LAST_RUN_STATUS=@LAST_RUN_STATUS,
				RUN_INTERVAL=@RUN_INTERVAL,
				CHECK_INTERVAL=@CHECK_INTERVAL,
				SYSTEM_PARAMETER1=@SYSTEM_PARAMETER1,
				SYSTEM_PARAMETER2=@SYSTEM_PARAMETER2,
				SYSTEM_PARAMETER3=@SYSTEM_PARAMETER3,
				SYSTEM_PARAMETER4=@SYSTEM_PARAMETER4,
				SYSTEM_PARAMETER5=@SYSTEM_PARAMETER5,
				VALID_FLAG=@VALID_FLAG,
				MODIFY_DATE=@MODIFY_DATE,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				FID=@FID,
				CREATE_USER=@CREATE_USER				 
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";

		private const string TS_SYS_PROCESS_SCHEDULE_DELETE =
			@"DELETE FROM [dbo].[TS_SYS_PROCESS_SCHEDULE] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get ProcessScheduleInfo
		/// </summary>
		/// <param name="ID">ProcessScheduleInfo Primary key </param>
		/// <returns></returns> 
		public ProcessScheduleInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_PROCESS_SCHEDULE_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateProcessScheduleInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>ProcessScheduleInfo Collection </returns>
		public List<ProcessScheduleInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TS_SYS_PROCESS_SCHEDULE_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>ProcessScheduleInfo Collection </returns>
		public List<ProcessScheduleInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<ProcessScheduleInfo> list = new List<ProcessScheduleInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateProcessScheduleInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<ProcessScheduleInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [dbo].[TS_SYS_PROCESS_SCHEDULE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<ProcessScheduleInfo> list = new List<ProcessScheduleInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateProcessScheduleInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TS_SYS_PROCESS_SCHEDULE_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(ProcessScheduleInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_PROCESS_SCHEDULE_INSERT);			
			db.AddInParameter(dbCommand, "@PROCESS_CODE", DbType.String, info.ProcessCode);
			db.AddInParameter(dbCommand, "@PROCESS_NAME", DbType.String, info.ProcessName);
			db.AddInParameter(dbCommand, "@LAST_RUN_BEGIN_TIME", DbType.DateTime, info.LastRunBeginTime);
			db.AddInParameter(dbCommand, "@LAST_RUN_END_TIME", DbType.DateTime, info.LastRunEndTime);
			db.AddInParameter(dbCommand, "@LAST_RUN_STATUS", DbType.Int32, info.LastRunStatus);
			db.AddInParameter(dbCommand, "@RUN_INTERVAL", DbType.Int32, info.RunInterval);
			db.AddInParameter(dbCommand, "@CHECK_INTERVAL", DbType.Int32, info.CheckInterval);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER1", DbType.String, info.SystemParameter1);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER2", DbType.String, info.SystemParameter2);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER3", DbType.String, info.SystemParameter3);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER4", DbType.String, info.SystemParameter4);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER5", DbType.String, info.SystemParameter5);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(ProcessScheduleInfo info)
		{
			return  
			@"insert into [dbo].[TS_SYS_PROCESS_SCHEDULE] (
				PROCESS_CODE,
				PROCESS_NAME,
				LAST_RUN_BEGIN_TIME,
				LAST_RUN_END_TIME,
				LAST_RUN_STATUS,
				RUN_INTERVAL,
				CHECK_INTERVAL,
				SYSTEM_PARAMETER1,
				SYSTEM_PARAMETER2,
				SYSTEM_PARAMETER3,
				SYSTEM_PARAMETER4,
				SYSTEM_PARAMETER5,
				VALID_FLAG,
				MODIFY_DATE,
				CREATE_DATE,
				MODIFY_USER,
				FID,
				CREATE_USER				 
			) values ("+
				(string.IsNullOrEmpty(info.ProcessCode) ? "NULL" : "N'" + info.ProcessCode + "'") + ","+
				(string.IsNullOrEmpty(info.ProcessName) ? "NULL" : "N'" + info.ProcessName + "'") + ","+
				(info.LastRunBeginTime == null ? "NULL" : "N'" + info.LastRunBeginTime.GetValueOrDefault() + "'") + ","+
				(info.LastRunEndTime == null ? "NULL" : "N'" + info.LastRunEndTime.GetValueOrDefault() + "'") + ","+
				(info.LastRunStatus == null ? "NULL" : "" + info.LastRunStatus.GetValueOrDefault() + "") + ","+
				(info.RunInterval == null ? "NULL" : "" + info.RunInterval.GetValueOrDefault() + "") + ","+
				(info.CheckInterval == null ? "NULL" : "" + info.CheckInterval.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.SystemParameter1) ? "NULL" : "N'" + info.SystemParameter1 + "'") + ","+
				(string.IsNullOrEmpty(info.SystemParameter2) ? "NULL" : "N'" + info.SystemParameter2 + "'") + ","+
				(string.IsNullOrEmpty(info.SystemParameter3) ? "NULL" : "N'" + info.SystemParameter3 + "'") + ","+
				(string.IsNullOrEmpty(info.SystemParameter4) ? "NULL" : "N'" + info.SystemParameter4 + "'") + ","+
				(string.IsNullOrEmpty(info.SystemParameter5) ? "NULL" : "N'" + info.SystemParameter5 + "'") + ","+
				"1" + ","+		
				"NULL" + ","+			
				"GETDATE()" + ","+			
				"NULL" + ","+			
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				"N'" + info.CreateUser + "'" + ");";		
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(ProcessScheduleInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_PROCESS_SCHEDULE_UPDATE);				
			db.AddInParameter(dbCommand, "@PROCESS_CODE", DbType.String, info.ProcessCode);
			db.AddInParameter(dbCommand, "@PROCESS_NAME", DbType.String, info.ProcessName);
			db.AddInParameter(dbCommand, "@LAST_RUN_BEGIN_TIME", DbType.DateTime, info.LastRunBeginTime);
			db.AddInParameter(dbCommand, "@LAST_RUN_END_TIME", DbType.DateTime, info.LastRunEndTime);
			db.AddInParameter(dbCommand, "@LAST_RUN_STATUS", DbType.Int32, info.LastRunStatus);
			db.AddInParameter(dbCommand, "@RUN_INTERVAL", DbType.Int32, info.RunInterval);
			db.AddInParameter(dbCommand, "@CHECK_INTERVAL", DbType.Int32, info.CheckInterval);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER1", DbType.String, info.SystemParameter1);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER2", DbType.String, info.SystemParameter2);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER3", DbType.String, info.SystemParameter3);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER4", DbType.String, info.SystemParameter4);
			db.AddInParameter(dbCommand, "@SYSTEM_PARAMETER5", DbType.String, info.SystemParameter5);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">ProcessScheduleInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_PROCESS_SCHEDULE_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">ProcessScheduleInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [dbo].[TS_SYS_PROCESS_SCHEDULE] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
              			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
     db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">ProcessScheduleInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [dbo].[TS_SYS_PROCESS_SCHEDULE] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static ProcessScheduleInfo CreateProcessScheduleInfo(IDataReader rdr)
		{
			ProcessScheduleInfo info = new ProcessScheduleInfo();
			info.ProcessCode = DBConvert.GetString(rdr, rdr.GetOrdinal("PROCESS_CODE"));			
			info.ProcessName = DBConvert.GetString(rdr, rdr.GetOrdinal("PROCESS_NAME"));			
			info.LastRunBeginTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("LAST_RUN_BEGIN_TIME"));			
			info.LastRunEndTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("LAST_RUN_END_TIME"));			
			info.LastRunStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("LAST_RUN_STATUS"));			
			info.RunInterval = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("RUN_INTERVAL"));			
			info.CheckInterval = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("CHECK_INTERVAL"));			
			info.SystemParameter1 = DBConvert.GetString(rdr, rdr.GetOrdinal("SYSTEM_PARAMETER1"));			
			info.SystemParameter2 = DBConvert.GetString(rdr, rdr.GetOrdinal("SYSTEM_PARAMETER2"));			
			info.SystemParameter3 = DBConvert.GetString(rdr, rdr.GetOrdinal("SYSTEM_PARAMETER3"));			
			info.SystemParameter4 = DBConvert.GetString(rdr, rdr.GetOrdinal("SYSTEM_PARAMETER4"));			
			info.SystemParameter5 = DBConvert.GetString(rdr, rdr.GetOrdinal("SYSTEM_PARAMETER5"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			return info;
		}
		
		#endregion
	}
}
