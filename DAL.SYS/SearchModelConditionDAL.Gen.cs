#region Declaim
//---------------------------------------------------------------------------
// Name:		SearchModelConditionDAL
// Function: 	Expose data in table TS_SYS_SEARCH_MODEL_CONDITION from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月9日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.SYS;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.SYS 
{     
	//// <summary>
    /// SearchModelConditionDAL对应表[TS_SYS_SEARCH_MODEL_CONDITION]
    /// </summary>
    public partial class SearchModelConditionDAL : BusinessObjectProvider<SearchModelConditionInfo>
	{
		#region Sql Statements
		private const string TS_SYS_SEARCH_MODEL_CONDITION_SELECT_BY_ID =
			@"SELECT CONTROL_TYPE,
				DEFAULT_VALUE,
				DISPLAY_ORDER,
				MAX_LENGTH,
				LABEL_TEXT,
				TABLE_NAME,
				COLUMN_NAME,
				COLUMN_TYPE,
				REGEX_EXPRESSION,
				DATASEARCH_TYPE,
				CODE_NAME,
				EXTEND_FIELD1,
				EXTEND_FIELD2,
				EXTEND_FIELD3,
				EXTEND_FIELD4,
				EXTEND_FIELD5,
				EXTEND_FIELD6,
				EXTEND_FIELD7,
				EXTEND_FIELD8,
				EXTEND_FIELD9,
				EXTEND_FIELD10,
				SEARCH_FID,
				VALID_FLAG,
				MODIFY_USER,
				ID,
				CREATE_USER,
				MODIFY_DATE,
				CONTROL_ID,
				FID,
				CREATE_DATE				  
				FROM [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] WITH(NOLOCK) WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			
		private const string TS_SYS_SEARCH_MODEL_CONDITION_SELECT = 
			@"SELECT CONTROL_TYPE,
				DEFAULT_VALUE,
				DISPLAY_ORDER,
				MAX_LENGTH,
				LABEL_TEXT,
				TABLE_NAME,
				COLUMN_NAME,
				COLUMN_TYPE,
				REGEX_EXPRESSION,
				DATASEARCH_TYPE,
				CODE_NAME,
				EXTEND_FIELD1,
				EXTEND_FIELD2,
				EXTEND_FIELD3,
				EXTEND_FIELD4,
				EXTEND_FIELD5,
				EXTEND_FIELD6,
				EXTEND_FIELD7,
				EXTEND_FIELD8,
				EXTEND_FIELD9,
				EXTEND_FIELD10,
				SEARCH_FID,
				VALID_FLAG,
				MODIFY_USER,
				ID,
				CREATE_USER,
				MODIFY_DATE,
				CONTROL_ID,
				FID,
				CREATE_DATE				 
				FROM [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TS_SYS_SEARCH_MODEL_CONDITION_SELECT_COUNTS = 
			@"SELECT count(*) FROM [dbo].[TS_SYS_SEARCH_MODEL_CONDITION]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TS_SYS_SEARCH_MODEL_CONDITION_INSERT =
			@"INSERT INTO [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] (
				CONTROL_TYPE,
				DEFAULT_VALUE,
				DISPLAY_ORDER,
				MAX_LENGTH,
				LABEL_TEXT,
				TABLE_NAME,
				COLUMN_NAME,
				COLUMN_TYPE,
				REGEX_EXPRESSION,
				DATASEARCH_TYPE,
				CODE_NAME,
				EXTEND_FIELD1,
				EXTEND_FIELD2,
				EXTEND_FIELD3,
				EXTEND_FIELD4,
				EXTEND_FIELD5,
				EXTEND_FIELD6,
				EXTEND_FIELD7,
				EXTEND_FIELD8,
				EXTEND_FIELD9,
				EXTEND_FIELD10,
				SEARCH_FID,
				VALID_FLAG,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				CONTROL_ID,
				FID,
				CREATE_DATE				 
			) VALUES (
				@CONTROL_TYPE,
				@DEFAULT_VALUE,
				@DISPLAY_ORDER,
				@MAX_LENGTH,
				@LABEL_TEXT,
				@TABLE_NAME,
				@COLUMN_NAME,
				@COLUMN_TYPE,
				@REGEX_EXPRESSION,
				@DATASEARCH_TYPE,
				@CODE_NAME,
				@EXTEND_FIELD1,
				@EXTEND_FIELD2,
				@EXTEND_FIELD3,
				@EXTEND_FIELD4,
				@EXTEND_FIELD5,
				@EXTEND_FIELD6,
				@EXTEND_FIELD7,
				@EXTEND_FIELD8,
				@EXTEND_FIELD9,
				@EXTEND_FIELD10,
				@SEARCH_FID,
				@VALID_FLAG,
				@MODIFY_USER,
				@CREATE_USER,
				@MODIFY_DATE,
				@CONTROL_ID,
				@FID,
				@CREATE_DATE				 
			);SELECT @@IDENTITY;";
		private const string TS_SYS_SEARCH_MODEL_CONDITION_UPDATE =
			@"UPDATE [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] WITH(ROWLOCK) 
				SET CONTROL_TYPE=@CONTROL_TYPE,
				DEFAULT_VALUE=@DEFAULT_VALUE,
				DISPLAY_ORDER=@DISPLAY_ORDER,
				MAX_LENGTH=@MAX_LENGTH,
				LABEL_TEXT=@LABEL_TEXT,
				TABLE_NAME=@TABLE_NAME,
				COLUMN_NAME=@COLUMN_NAME,
				COLUMN_TYPE=@COLUMN_TYPE,
				REGEX_EXPRESSION=@REGEX_EXPRESSION,
				DATASEARCH_TYPE=@DATASEARCH_TYPE,
				CODE_NAME=@CODE_NAME,
				EXTEND_FIELD1=@EXTEND_FIELD1,
				EXTEND_FIELD2=@EXTEND_FIELD2,
				EXTEND_FIELD3=@EXTEND_FIELD3,
				EXTEND_FIELD4=@EXTEND_FIELD4,
				EXTEND_FIELD5=@EXTEND_FIELD5,
				EXTEND_FIELD6=@EXTEND_FIELD6,
				EXTEND_FIELD7=@EXTEND_FIELD7,
				EXTEND_FIELD8=@EXTEND_FIELD8,
				EXTEND_FIELD9=@EXTEND_FIELD9,
				EXTEND_FIELD10=@EXTEND_FIELD10,
				SEARCH_FID=@SEARCH_FID,
				VALID_FLAG=@VALID_FLAG,
				MODIFY_USER=@MODIFY_USER,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				CONTROL_ID=@CONTROL_ID,
				FID=@FID,
				CREATE_DATE=@CREATE_DATE				 
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";

		private const string TS_SYS_SEARCH_MODEL_CONDITION_DELETE =
			@"DELETE FROM [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get SearchModelConditionInfo
		/// </summary>
		/// <param name="ID">SearchModelConditionInfo Primary key </param>
		/// <returns></returns> 
		public SearchModelConditionInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_SEARCH_MODEL_CONDITION_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateSearchModelConditionInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>SearchModelConditionInfo Collection </returns>
		public List<SearchModelConditionInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TS_SYS_SEARCH_MODEL_CONDITION_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>SearchModelConditionInfo Collection </returns>
		public List<SearchModelConditionInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<SearchModelConditionInfo> list = new List<SearchModelConditionInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateSearchModelConditionInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<SearchModelConditionInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [dbo].[TS_SYS_SEARCH_MODEL_CONDITION]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<SearchModelConditionInfo> list = new List<SearchModelConditionInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateSearchModelConditionInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TS_SYS_SEARCH_MODEL_CONDITION_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(SearchModelConditionInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_SEARCH_MODEL_CONDITION_INSERT);			
			db.AddInParameter(dbCommand, "@CONTROL_TYPE", DbType.String, info.ControlType);
			db.AddInParameter(dbCommand, "@DEFAULT_VALUE", DbType.String, info.DefaultValue);
			db.AddInParameter(dbCommand, "@DISPLAY_ORDER", DbType.Int32, info.DisplayOrder);
			db.AddInParameter(dbCommand, "@MAX_LENGTH", DbType.Int32, info.MaxLength);
			db.AddInParameter(dbCommand, "@LABEL_TEXT", DbType.String, info.LabelText);
			db.AddInParameter(dbCommand, "@TABLE_NAME", DbType.String, info.TableName);
			db.AddInParameter(dbCommand, "@COLUMN_NAME", DbType.String, info.ColumnName);
			db.AddInParameter(dbCommand, "@COLUMN_TYPE", DbType.String, info.ColumnType);
			db.AddInParameter(dbCommand, "@REGEX_EXPRESSION", DbType.String, info.RegexExpression);
			db.AddInParameter(dbCommand, "@DATASEARCH_TYPE", DbType.String, info.DatasearchType);
			db.AddInParameter(dbCommand, "@CODE_NAME", DbType.String, info.CodeName);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD1", DbType.String, info.ExtendField1);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD2", DbType.String, info.ExtendField2);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD3", DbType.String, info.ExtendField3);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD4", DbType.String, info.ExtendField4);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD5", DbType.String, info.ExtendField5);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD6", DbType.String, info.ExtendField6);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD7", DbType.String, info.ExtendField7);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD8", DbType.String, info.ExtendField8);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD9", DbType.String, info.ExtendField9);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD10", DbType.String, info.ExtendField10);
			db.AddInParameter(dbCommand, "@SEARCH_FID", DbType.Guid, info.SearchFid);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CONTROL_ID", DbType.String, info.ControlId);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(SearchModelConditionInfo info)
		{
			return  
			@"insert into [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] (
				CONTROL_TYPE,
				DEFAULT_VALUE,
				DISPLAY_ORDER,
				MAX_LENGTH,
				LABEL_TEXT,
				TABLE_NAME,
				COLUMN_NAME,
				COLUMN_TYPE,
				REGEX_EXPRESSION,
				DATASEARCH_TYPE,
				CODE_NAME,
				EXTEND_FIELD1,
				EXTEND_FIELD2,
				EXTEND_FIELD3,
				EXTEND_FIELD4,
				EXTEND_FIELD5,
				EXTEND_FIELD6,
				EXTEND_FIELD7,
				EXTEND_FIELD8,
				EXTEND_FIELD9,
				EXTEND_FIELD10,
				SEARCH_FID,
				VALID_FLAG,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				CONTROL_ID,
				FID,
				CREATE_DATE				 
			) values ("+
				(string.IsNullOrEmpty(info.ControlType) ? "NULL" : "N'" + info.ControlType + "'") + ","+
				(string.IsNullOrEmpty(info.DefaultValue) ? "NULL" : "N'" + info.DefaultValue + "'") + ","+
				(info.DisplayOrder == null ? "NULL" : "" + info.DisplayOrder.GetValueOrDefault() + "") + ","+
				(info.MaxLength == null ? "NULL" : "" + info.MaxLength.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.LabelText) ? "NULL" : "N'" + info.LabelText + "'") + ","+
				(string.IsNullOrEmpty(info.TableName) ? "NULL" : "N'" + info.TableName + "'") + ","+
				(string.IsNullOrEmpty(info.ColumnName) ? "NULL" : "N'" + info.ColumnName + "'") + ","+
				(string.IsNullOrEmpty(info.ColumnType) ? "NULL" : "N'" + info.ColumnType + "'") + ","+
				(string.IsNullOrEmpty(info.RegexExpression) ? "NULL" : "N'" + info.RegexExpression + "'") + ","+
				(string.IsNullOrEmpty(info.DatasearchType) ? "NULL" : "N'" + info.DatasearchType + "'") + ","+
				(string.IsNullOrEmpty(info.CodeName) ? "NULL" : "N'" + info.CodeName + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField1) ? "NULL" : "N'" + info.ExtendField1 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField2) ? "NULL" : "N'" + info.ExtendField2 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField3) ? "NULL" : "N'" + info.ExtendField3 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField4) ? "NULL" : "N'" + info.ExtendField4 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField5) ? "NULL" : "N'" + info.ExtendField5 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField6) ? "NULL" : "N'" + info.ExtendField6 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField7) ? "NULL" : "N'" + info.ExtendField7 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField8) ? "NULL" : "N'" + info.ExtendField8 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField9) ? "NULL" : "N'" + info.ExtendField9 + "'") + ","+
				(string.IsNullOrEmpty(info.ExtendField10) ? "NULL" : "N'" + info.ExtendField10 + "'") + ","+
				(info.SearchFid == null ? "NULL" : "N'" + info.SearchFid.GetValueOrDefault() + "'") + ","+
				"1" + ","+		
				"NULL" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				"NULL" + ","+			
				(string.IsNullOrEmpty(info.ControlId) ? "NULL" : "N'" + info.ControlId + "'") + ","+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				"GETDATE()" + ");";			
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(SearchModelConditionInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_SEARCH_MODEL_CONDITION_UPDATE);				
			db.AddInParameter(dbCommand, "@CONTROL_TYPE", DbType.String, info.ControlType);
			db.AddInParameter(dbCommand, "@DEFAULT_VALUE", DbType.String, info.DefaultValue);
			db.AddInParameter(dbCommand, "@DISPLAY_ORDER", DbType.Int32, info.DisplayOrder);
			db.AddInParameter(dbCommand, "@MAX_LENGTH", DbType.Int32, info.MaxLength);
			db.AddInParameter(dbCommand, "@LABEL_TEXT", DbType.String, info.LabelText);
			db.AddInParameter(dbCommand, "@TABLE_NAME", DbType.String, info.TableName);
			db.AddInParameter(dbCommand, "@COLUMN_NAME", DbType.String, info.ColumnName);
			db.AddInParameter(dbCommand, "@COLUMN_TYPE", DbType.String, info.ColumnType);
			db.AddInParameter(dbCommand, "@REGEX_EXPRESSION", DbType.String, info.RegexExpression);
			db.AddInParameter(dbCommand, "@DATASEARCH_TYPE", DbType.String, info.DatasearchType);
			db.AddInParameter(dbCommand, "@CODE_NAME", DbType.String, info.CodeName);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD1", DbType.String, info.ExtendField1);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD2", DbType.String, info.ExtendField2);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD3", DbType.String, info.ExtendField3);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD4", DbType.String, info.ExtendField4);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD5", DbType.String, info.ExtendField5);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD6", DbType.String, info.ExtendField6);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD7", DbType.String, info.ExtendField7);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD8", DbType.String, info.ExtendField8);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD9", DbType.String, info.ExtendField9);
			db.AddInParameter(dbCommand, "@EXTEND_FIELD10", DbType.String, info.ExtendField10);
			db.AddInParameter(dbCommand, "@SEARCH_FID", DbType.Guid, info.SearchFid);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CONTROL_ID", DbType.String, info.ControlId);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">SearchModelConditionInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TS_SYS_SEARCH_MODEL_CONDITION_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">SearchModelConditionInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
                         			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
     db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">SearchModelConditionInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [dbo].[TS_SYS_SEARCH_MODEL_CONDITION] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static SearchModelConditionInfo CreateSearchModelConditionInfo(IDataReader rdr)
		{
			SearchModelConditionInfo info = new SearchModelConditionInfo();
			info.ControlType = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTROL_TYPE"));			
			info.DefaultValue = DBConvert.GetString(rdr, rdr.GetOrdinal("DEFAULT_VALUE"));			
			info.DisplayOrder = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("DISPLAY_ORDER"));			
			info.MaxLength = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MAX_LENGTH"));			
			info.LabelText = DBConvert.GetString(rdr, rdr.GetOrdinal("LABEL_TEXT"));			
			info.TableName = DBConvert.GetString(rdr, rdr.GetOrdinal("TABLE_NAME"));			
			info.ColumnName = DBConvert.GetString(rdr, rdr.GetOrdinal("COLUMN_NAME"));			
			info.ColumnType = DBConvert.GetString(rdr, rdr.GetOrdinal("COLUMN_TYPE"));			
			info.RegexExpression = DBConvert.GetString(rdr, rdr.GetOrdinal("REGEX_EXPRESSION"));			
			info.DatasearchType = DBConvert.GetString(rdr, rdr.GetOrdinal("DATASEARCH_TYPE"));			
			info.CodeName = DBConvert.GetString(rdr, rdr.GetOrdinal("CODE_NAME"));			
			info.ExtendField1 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD1"));			
			info.ExtendField2 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD2"));			
			info.ExtendField3 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD3"));			
			info.ExtendField4 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD4"));			
			info.ExtendField5 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD5"));			
			info.ExtendField6 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD6"));			
			info.ExtendField7 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD7"));			
			info.ExtendField8 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD8"));			
			info.ExtendField9 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD9"));			
			info.ExtendField10 = DBConvert.GetString(rdr, rdr.GetOrdinal("EXTEND_FIELD10"));			
			info.SearchFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("SEARCH_FID"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.ControlId = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTROL_ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			return info;
		}
		
		#endregion
	}
}
