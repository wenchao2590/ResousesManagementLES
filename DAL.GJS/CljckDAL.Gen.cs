#region Declaim
//---------------------------------------------------------------------------
// Name:		CljckDAL
// Function: 	Expose data in table TT_WMS_CLJCK from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年10月11日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.GJS;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.GJS 
{     
	//// <summary>
    /// CljckDAL对应表[TT_WMS_CLJCK]
    /// </summary>
    public partial class CljckDAL : BusinessObjectProvider<CljckInfo>
	{
		#region Sql Statements
		private const string TT_WMS_CLJCK_SELECT_BY_ID =
			@"SELECT ID,
				JCDH,
				DM,
				MC,
				TM,
				JCSL,
				CCSL,
				KCSL,
				HWCW,
				JSMZ,
				HWC,
				HWK,
				HWG,
				JSTJ,
				DWMZ,
				DWTJ,
				SCRQ,
				YXRQ,
				JSDW,
				BZDW,
				BZSL,
				BZ,
				XJS,
				DJ,
				ZJ,
				MS,
				XH,
				CDDM,
				CD,
				SXH,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				  
				FROM [GJS].[TT_WMS_CLJCK] WITH(NOLOCK) WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			
		private const string TT_WMS_CLJCK_SELECT = 
			@"SELECT ID,
				JCDH,
				DM,
				MC,
				TM,
				JCSL,
				CCSL,
				KCSL,
				HWCW,
				JSMZ,
				HWC,
				HWK,
				HWG,
				JSTJ,
				DWMZ,
				DWTJ,
				SCRQ,
				YXRQ,
				JSDW,
				BZDW,
				BZSL,
				BZ,
				XJS,
				DJ,
				ZJ,
				MS,
				XH,
				CDDM,
				CD,
				SXH,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
				FROM [GJS].[TT_WMS_CLJCK] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_WMS_CLJCK_SELECT_COUNTS = 
			@"SELECT count(*) FROM [GJS].[TT_WMS_CLJCK]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_WMS_CLJCK_INSERT =
			@"INSERT INTO [GJS].[TT_WMS_CLJCK] (
				JCDH,
				DM,
				MC,
				TM,
				JCSL,
				CCSL,
				KCSL,
				HWCW,
				JSMZ,
				HWC,
				HWK,
				HWG,
				JSTJ,
				DWMZ,
				DWTJ,
				SCRQ,
				YXRQ,
				JSDW,
				BZDW,
				BZSL,
				BZ,
				XJS,
				DJ,
				ZJ,
				MS,
				XH,
				CDDM,
				CD,
				SXH,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
			) VALUES (
				@JCDH,
				@DM,
				@MC,
				@TM,
				@JCSL,
				@CCSL,
				@KCSL,
				@HWCW,
				@JSMZ,
				@HWC,
				@HWK,
				@HWG,
				@JSTJ,
				@DWMZ,
				@DWTJ,
				@SCRQ,
				@YXRQ,
				@JSDW,
				@BZDW,
				@BZSL,
				@BZ,
				@XJS,
				@DJ,
				@ZJ,
				@MS,
				@XH,
				@CDDM,
				@CD,
				@SXH,
				@VALID_FLAG,
				@CREATE_USER,
				@CREATE_DATE,
				@MODIFY_USER,
				@MODIFY_DATE				 
			);SELECT @@IDENTITY;";
		private const string TT_WMS_CLJCK_UPDATE =
			@"UPDATE [GJS].[TT_WMS_CLJCK] WITH(ROWLOCK) 
				SET JCDH=@JCDH,
				DM=@DM,
				MC=@MC,
				TM=@TM,
				JCSL=@JCSL,
				CCSL=@CCSL,
				KCSL=@KCSL,
				HWCW=@HWCW,
				JSMZ=@JSMZ,
				HWC=@HWC,
				HWK=@HWK,
				HWG=@HWG,
				JSTJ=@JSTJ,
				DWMZ=@DWMZ,
				DWTJ=@DWTJ,
				SCRQ=@SCRQ,
				YXRQ=@YXRQ,
				JSDW=@JSDW,
				BZDW=@BZDW,
				BZSL=@BZSL,
				BZ=@BZ,
				XJS=@XJS,
				DJ=@DJ,
				ZJ=@ZJ,
				MS=@MS,
				XH=@XH,
				CDDM=@CDDM,
				CD=@CD,
				SXH=@SXH,
				VALID_FLAG=@VALID_FLAG,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE				 
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";

		private const string TT_WMS_CLJCK_DELETE =
			@"DELETE FROM [GJS].[TT_WMS_CLJCK] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get CljckInfo
		/// </summary>
		/// <param name="ID">CljckInfo Primary key </param>
		/// <returns></returns> 
		public CljckInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCK_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateCljckInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>CljckInfo Collection </returns>
		public List<CljckInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_WMS_CLJCK_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>CljckInfo Collection </returns>
		public List<CljckInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<CljckInfo> list = new List<CljckInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateCljckInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<CljckInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [GJS].[TT_WMS_CLJCK]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<CljckInfo> list = new List<CljckInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateCljckInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_WMS_CLJCK_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(CljckInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCK_INSERT);			
			db.AddInParameter(dbCommand, "@JCDH", DbType.String, info.Jcdh);
			db.AddInParameter(dbCommand, "@DM", DbType.String, info.Dm);
			db.AddInParameter(dbCommand, "@MC", DbType.String, info.Mc);
			db.AddInParameter(dbCommand, "@TM", DbType.String, info.Tm);
			db.AddInParameter(dbCommand, "@JCSL", DbType.Decimal, info.Jcsl);
			db.AddInParameter(dbCommand, "@CCSL", DbType.Decimal, info.Ccsl);
			db.AddInParameter(dbCommand, "@KCSL", DbType.Decimal, info.Kcsl);
			db.AddInParameter(dbCommand, "@HWCW", DbType.String, info.Hwcw);
			db.AddInParameter(dbCommand, "@JSMZ", DbType.Decimal, info.Jsmz);
			db.AddInParameter(dbCommand, "@HWC", DbType.Decimal, info.Hwc);
			db.AddInParameter(dbCommand, "@HWK", DbType.Decimal, info.Hwk);
			db.AddInParameter(dbCommand, "@HWG", DbType.Decimal, info.Hwg);
			db.AddInParameter(dbCommand, "@JSTJ", DbType.Decimal, info.Jstj);
			db.AddInParameter(dbCommand, "@DWMZ", DbType.Decimal, info.Dwmz);
			db.AddInParameter(dbCommand, "@DWTJ", DbType.Decimal, info.Dwtj);
			db.AddInParameter(dbCommand, "@SCRQ", DbType.DateTime, info.Scrq);
			db.AddInParameter(dbCommand, "@YXRQ", DbType.DateTime, info.Yxrq);
			db.AddInParameter(dbCommand, "@JSDW", DbType.String, info.Jsdw);
			db.AddInParameter(dbCommand, "@BZDW", DbType.String, info.Bzdw);
			db.AddInParameter(dbCommand, "@BZSL", DbType.Decimal, info.Bzsl);
			db.AddInParameter(dbCommand, "@BZ", DbType.String, info.Bz);
			db.AddInParameter(dbCommand, "@XJS", DbType.Decimal, info.Xjs);
			db.AddInParameter(dbCommand, "@DJ", DbType.Decimal, info.Dj);
			db.AddInParameter(dbCommand, "@ZJ", DbType.Decimal, info.Zj);
			db.AddInParameter(dbCommand, "@MS", DbType.String, info.Ms);
			db.AddInParameter(dbCommand, "@XH", DbType.String, info.Xh);
			db.AddInParameter(dbCommand, "@CDDM", DbType.String, info.Cddm);
			db.AddInParameter(dbCommand, "@CD", DbType.String, info.Cd);
			db.AddInParameter(dbCommand, "@SXH", DbType.Int32, info.Sxh);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(CljckInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCK_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@JCDH", DbType.String, info.Jcdh);
			db.AddInParameter(dbCommand, "@DM", DbType.String, info.Dm);
			db.AddInParameter(dbCommand, "@MC", DbType.String, info.Mc);
			db.AddInParameter(dbCommand, "@TM", DbType.String, info.Tm);
			db.AddInParameter(dbCommand, "@JCSL", DbType.Decimal, info.Jcsl);
			db.AddInParameter(dbCommand, "@CCSL", DbType.Decimal, info.Ccsl);
			db.AddInParameter(dbCommand, "@KCSL", DbType.Decimal, info.Kcsl);
			db.AddInParameter(dbCommand, "@HWCW", DbType.String, info.Hwcw);
			db.AddInParameter(dbCommand, "@JSMZ", DbType.Decimal, info.Jsmz);
			db.AddInParameter(dbCommand, "@HWC", DbType.Decimal, info.Hwc);
			db.AddInParameter(dbCommand, "@HWK", DbType.Decimal, info.Hwk);
			db.AddInParameter(dbCommand, "@HWG", DbType.Decimal, info.Hwg);
			db.AddInParameter(dbCommand, "@JSTJ", DbType.Decimal, info.Jstj);
			db.AddInParameter(dbCommand, "@DWMZ", DbType.Decimal, info.Dwmz);
			db.AddInParameter(dbCommand, "@DWTJ", DbType.Decimal, info.Dwtj);
			db.AddInParameter(dbCommand, "@SCRQ", DbType.DateTime, info.Scrq);
			db.AddInParameter(dbCommand, "@YXRQ", DbType.DateTime, info.Yxrq);
			db.AddInParameter(dbCommand, "@JSDW", DbType.String, info.Jsdw);
			db.AddInParameter(dbCommand, "@BZDW", DbType.String, info.Bzdw);
			db.AddInParameter(dbCommand, "@BZSL", DbType.Decimal, info.Bzsl);
			db.AddInParameter(dbCommand, "@BZ", DbType.String, info.Bz);
			db.AddInParameter(dbCommand, "@XJS", DbType.Decimal, info.Xjs);
			db.AddInParameter(dbCommand, "@DJ", DbType.Decimal, info.Dj);
			db.AddInParameter(dbCommand, "@ZJ", DbType.Decimal, info.Zj);
			db.AddInParameter(dbCommand, "@MS", DbType.String, info.Ms);
			db.AddInParameter(dbCommand, "@XH", DbType.String, info.Xh);
			db.AddInParameter(dbCommand, "@CDDM", DbType.String, info.Cddm);
			db.AddInParameter(dbCommand, "@CD", DbType.String, info.Cd);
			db.AddInParameter(dbCommand, "@SXH", DbType.Int32, info.Sxh);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">CljckInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCK_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">CljckInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [GJS].[TT_WMS_CLJCK] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                                  db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">CljckInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [GJS].[TT_WMS_CLJCK] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static CljckInfo CreateCljckInfo(IDataReader rdr)
		{
			CljckInfo info = new CljckInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Jcdh = DBConvert.GetString(rdr, rdr.GetOrdinal("JCDH"));			
			info.Dm = DBConvert.GetString(rdr, rdr.GetOrdinal("DM"));			
			info.Mc = DBConvert.GetString(rdr, rdr.GetOrdinal("MC"));			
			info.Tm = DBConvert.GetString(rdr, rdr.GetOrdinal("TM"));			
			info.Jcsl = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("JCSL"));			
			info.Ccsl = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("CCSL"));			
			info.Kcsl = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("KCSL"));			
			info.Hwcw = DBConvert.GetString(rdr, rdr.GetOrdinal("HWCW"));			
			info.Jsmz = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("JSMZ"));			
			info.Hwc = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("HWC"));			
			info.Hwk = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("HWK"));			
			info.Hwg = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("HWG"));			
			info.Jstj = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("JSTJ"));			
			info.Dwmz = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("DWMZ"));			
			info.Dwtj = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("DWTJ"));			
			info.Scrq = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("SCRQ"));			
			info.Yxrq = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("YXRQ"));			
			info.Jsdw = DBConvert.GetString(rdr, rdr.GetOrdinal("JSDW"));			
			info.Bzdw = DBConvert.GetString(rdr, rdr.GetOrdinal("BZDW"));			
			info.Bzsl = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("BZSL"));			
			info.Bz = DBConvert.GetString(rdr, rdr.GetOrdinal("BZ"));			
			info.Xjs = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("XJS"));			
			info.Dj = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("DJ"));			
			info.Zj = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZJ"));			
			info.Ms = DBConvert.GetString(rdr, rdr.GetOrdinal("MS"));			
			info.Xh = DBConvert.GetString(rdr, rdr.GetOrdinal("XH"));			
			info.Cddm = DBConvert.GetString(rdr, rdr.GetOrdinal("CDDM"));			
			info.Cd = DBConvert.GetString(rdr, rdr.GetOrdinal("CD"));			
			info.Sxh = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SXH"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			return info;
		}
		
		#endregion
	}
}
