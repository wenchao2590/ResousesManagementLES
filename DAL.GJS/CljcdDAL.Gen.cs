#region Declaim
//---------------------------------------------------------------------------
// Name:		CljcdDAL
// Function: 	Expose data in table TT_WMS_CLJCD from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年10月11日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.GJS;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.GJS 
{     
	//// <summary>
    /// CljcdDAL对应表[TT_WMS_CLJCD]
    /// </summary>
    public partial class CljcdDAL : BusinessObjectProvider<CljcdInfo>
	{
		#region Sql Statements
		private const string TT_WMS_CLJCD_SELECT_BY_ID =
			@"SELECT ID,
				JCDH,
				JCLB,
				JCSJ,
				GYSDM,
				GYSMC,
				ZSL,
				ZMZ,
				ZTJ,
				ZJE,
				ZT,
				BM,
				ZDWCBJ,
				ZDWCSJ,
				ZDWCR,
				ZGSHBJ,
				ZGSHSJ,
				ZG,
				CWSHBJ,
				CWSHSJ,
				CW,
				HSXM,
				CK_CODE,
				CK_NAME,
				BZ,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				  
				FROM [GJS].[TT_WMS_CLJCD] WITH(NOLOCK) WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			
		private const string TT_WMS_CLJCD_SELECT = 
			@"SELECT ID,
				JCDH,
				JCLB,
				JCSJ,
				GYSDM,
				GYSMC,
				ZSL,
				ZMZ,
				ZTJ,
				ZJE,
				ZT,
				BM,
				ZDWCBJ,
				ZDWCSJ,
				ZDWCR,
				ZGSHBJ,
				ZGSHSJ,
				ZG,
				CWSHBJ,
				CWSHSJ,
				CW,
				HSXM,
				CK_CODE,
				CK_NAME,
				BZ,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
				FROM [GJS].[TT_WMS_CLJCD] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_WMS_CLJCD_SELECT_COUNTS = 
			@"SELECT count(*) FROM [GJS].[TT_WMS_CLJCD]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_WMS_CLJCD_INSERT =
			@"INSERT INTO [GJS].[TT_WMS_CLJCD] (
				JCDH,
				JCLB,
				JCSJ,
				GYSDM,
				GYSMC,
				ZSL,
				ZMZ,
				ZTJ,
				ZJE,
				ZT,
				BM,
				ZDWCBJ,
				ZDWCSJ,
				ZDWCR,
				ZGSHBJ,
				ZGSHSJ,
				ZG,
				CWSHBJ,
				CWSHSJ,
				CW,
				HSXM,
				CK_CODE,
				CK_NAME,
				BZ,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
			) VALUES (
				@JCDH,
				@JCLB,
				@JCSJ,
				@GYSDM,
				@GYSMC,
				@ZSL,
				@ZMZ,
				@ZTJ,
				@ZJE,
				@ZT,
				@BM,
				@ZDWCBJ,
				@ZDWCSJ,
				@ZDWCR,
				@ZGSHBJ,
				@ZGSHSJ,
				@ZG,
				@CWSHBJ,
				@CWSHSJ,
				@CW,
				@HSXM,
				@CK_CODE,
				@CK_NAME,
				@BZ,
				@VALID_FLAG,
				@CREATE_USER,
				@CREATE_DATE,
				@MODIFY_USER,
				@MODIFY_DATE				 
			);SELECT @@IDENTITY;";
		private const string TT_WMS_CLJCD_UPDATE =
			@"UPDATE [GJS].[TT_WMS_CLJCD] WITH(ROWLOCK) 
				SET JCDH=@JCDH,
				JCLB=@JCLB,
				JCSJ=@JCSJ,
				GYSDM=@GYSDM,
				GYSMC=@GYSMC,
				ZSL=@ZSL,
				ZMZ=@ZMZ,
				ZTJ=@ZTJ,
				ZJE=@ZJE,
				ZT=@ZT,
				BM=@BM,
				ZDWCBJ=@ZDWCBJ,
				ZDWCSJ=@ZDWCSJ,
				ZDWCR=@ZDWCR,
				ZGSHBJ=@ZGSHBJ,
				ZGSHSJ=@ZGSHSJ,
				ZG=@ZG,
				CWSHBJ=@CWSHBJ,
				CWSHSJ=@CWSHSJ,
				CW=@CW,
				HSXM=@HSXM,
				CK_CODE=@CK_CODE,
				CK_NAME=@CK_NAME,
				BZ=@BZ,
				VALID_FLAG=@VALID_FLAG,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE				 
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";

		private const string TT_WMS_CLJCD_DELETE =
			@"DELETE FROM [GJS].[TT_WMS_CLJCD] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1 AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get CljcdInfo
		/// </summary>
		/// <param name="ID">CljcdInfo Primary key </param>
		/// <returns></returns> 
		public CljcdInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCD_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateCljcdInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>CljcdInfo Collection </returns>
		public List<CljcdInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_WMS_CLJCD_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>CljcdInfo Collection </returns>
		public List<CljcdInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<CljcdInfo> list = new List<CljcdInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateCljcdInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<CljcdInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [GJS].[TT_WMS_CLJCD]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<CljcdInfo> list = new List<CljcdInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateCljcdInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_WMS_CLJCD_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(CljcdInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCD_INSERT);			
			db.AddInParameter(dbCommand, "@JCDH", DbType.String, info.Jcdh);
			db.AddInParameter(dbCommand, "@JCLB", DbType.Int32, info.Jclb);
			db.AddInParameter(dbCommand, "@JCSJ", DbType.DateTime, info.Jcsj);
			db.AddInParameter(dbCommand, "@GYSDM", DbType.String, info.Gysdm);
			db.AddInParameter(dbCommand, "@GYSMC", DbType.String, info.Gysmc);
			db.AddInParameter(dbCommand, "@ZSL", DbType.Decimal, info.Zsl);
			db.AddInParameter(dbCommand, "@ZMZ", DbType.Decimal, info.Zmz);
			db.AddInParameter(dbCommand, "@ZTJ", DbType.Decimal, info.Ztj);
			db.AddInParameter(dbCommand, "@ZJE", DbType.Decimal, info.Zje);
			db.AddInParameter(dbCommand, "@ZT", DbType.Int32, info.Zt);
			db.AddInParameter(dbCommand, "@BM", DbType.String, info.Bm);
			db.AddInParameter(dbCommand, "@ZDWCBJ", DbType.Boolean, info.Zdwcbj);
			db.AddInParameter(dbCommand, "@ZDWCSJ", DbType.DateTime, info.Zdwcsj);
			db.AddInParameter(dbCommand, "@ZDWCR", DbType.String, info.Zdwcr);
			db.AddInParameter(dbCommand, "@ZGSHBJ", DbType.Boolean, info.Zgshbj);
			db.AddInParameter(dbCommand, "@ZGSHSJ", DbType.DateTime, info.Zgshsj);
			db.AddInParameter(dbCommand, "@ZG", DbType.String, info.Zg);
			db.AddInParameter(dbCommand, "@CWSHBJ", DbType.Boolean, info.Cwshbj);
			db.AddInParameter(dbCommand, "@CWSHSJ", DbType.DateTime, info.Cwshsj);
			db.AddInParameter(dbCommand, "@CW", DbType.String, info.Cw);
			db.AddInParameter(dbCommand, "@HSXM", DbType.Int32, info.Hsxm);
			db.AddInParameter(dbCommand, "@CK_CODE", DbType.String, info.CkCode);
			db.AddInParameter(dbCommand, "@CK_NAME", DbType.String, info.CkName);
			db.AddInParameter(dbCommand, "@BZ", DbType.String, info.Bz);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(CljcdInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCD_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@JCDH", DbType.String, info.Jcdh);
			db.AddInParameter(dbCommand, "@JCLB", DbType.Int32, info.Jclb);
			db.AddInParameter(dbCommand, "@JCSJ", DbType.DateTime, info.Jcsj);
			db.AddInParameter(dbCommand, "@GYSDM", DbType.String, info.Gysdm);
			db.AddInParameter(dbCommand, "@GYSMC", DbType.String, info.Gysmc);
			db.AddInParameter(dbCommand, "@ZSL", DbType.Decimal, info.Zsl);
			db.AddInParameter(dbCommand, "@ZMZ", DbType.Decimal, info.Zmz);
			db.AddInParameter(dbCommand, "@ZTJ", DbType.Decimal, info.Ztj);
			db.AddInParameter(dbCommand, "@ZJE", DbType.Decimal, info.Zje);
			db.AddInParameter(dbCommand, "@ZT", DbType.Int32, info.Zt);
			db.AddInParameter(dbCommand, "@BM", DbType.String, info.Bm);
			db.AddInParameter(dbCommand, "@ZDWCBJ", DbType.Boolean, info.Zdwcbj);
			db.AddInParameter(dbCommand, "@ZDWCSJ", DbType.DateTime, info.Zdwcsj);
			db.AddInParameter(dbCommand, "@ZDWCR", DbType.String, info.Zdwcr);
			db.AddInParameter(dbCommand, "@ZGSHBJ", DbType.Boolean, info.Zgshbj);
			db.AddInParameter(dbCommand, "@ZGSHSJ", DbType.DateTime, info.Zgshsj);
			db.AddInParameter(dbCommand, "@ZG", DbType.String, info.Zg);
			db.AddInParameter(dbCommand, "@CWSHBJ", DbType.Boolean, info.Cwshbj);
			db.AddInParameter(dbCommand, "@CWSHSJ", DbType.DateTime, info.Cwshsj);
			db.AddInParameter(dbCommand, "@CW", DbType.String, info.Cw);
			db.AddInParameter(dbCommand, "@HSXM", DbType.Int32, info.Hsxm);
			db.AddInParameter(dbCommand, "@CK_CODE", DbType.String, info.CkCode);
			db.AddInParameter(dbCommand, "@CK_NAME", DbType.String, info.CkName);
			db.AddInParameter(dbCommand, "@BZ", DbType.String, info.Bz);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">CljcdInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMS_CLJCD_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">CljcdInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [GJS].[TT_WMS_CLJCD] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                             db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">CljcdInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [GJS].[TT_WMS_CLJCD] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1 AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static CljcdInfo CreateCljcdInfo(IDataReader rdr)
		{
			CljcdInfo info = new CljcdInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Jcdh = DBConvert.GetString(rdr, rdr.GetOrdinal("JCDH"));			
			info.Jclb = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("JCLB"));			
			info.Jcsj = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("JCSJ"));			
			info.Gysdm = DBConvert.GetString(rdr, rdr.GetOrdinal("GYSDM"));			
			info.Gysmc = DBConvert.GetString(rdr, rdr.GetOrdinal("GYSMC"));			
			info.Zsl = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZSL"));			
			info.Zmz = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZMZ"));			
			info.Ztj = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZTJ"));			
			info.Zje = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZJE"));			
			info.Zt = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ZT"));			
			info.Bm = DBConvert.GetString(rdr, rdr.GetOrdinal("BM"));			
			info.Zdwcbj = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("ZDWCBJ"));			
			info.Zdwcsj = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("ZDWCSJ"));			
			info.Zdwcr = DBConvert.GetString(rdr, rdr.GetOrdinal("ZDWCR"));			
			info.Zgshbj = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("ZGSHBJ"));			
			info.Zgshsj = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("ZGSHSJ"));			
			info.Zg = DBConvert.GetString(rdr, rdr.GetOrdinal("ZG"));			
			info.Cwshbj = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("CWSHBJ"));			
			info.Cwshsj = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CWSHSJ"));			
			info.Cw = DBConvert.GetString(rdr, rdr.GetOrdinal("CW"));			
			info.Hsxm = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("HSXM"));			
			info.CkCode = DBConvert.GetString(rdr, rdr.GetOrdinal("CK_CODE"));			
			info.CkName = DBConvert.GetString(rdr, rdr.GetOrdinal("CK_NAME"));			
			info.Bz = DBConvert.GetString(rdr, rdr.GetOrdinal("BZ"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			return info;
		}
		
		#endregion
	}
}
