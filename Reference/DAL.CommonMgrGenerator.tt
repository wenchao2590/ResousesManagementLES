<#@ include file="$(SolutionDir)\ReferenceDll\T4Template\DBEntity.SQLServer.ttinclude" #> 
<#@ output extension=".txt" #> 
<#	
    var tableNames = "TM_BAS_EQUIPMENT";      
	var MouldName = "MasterData";
	var NameSpace = "DAL." + MouldName; 
	//Output File Path
	var outputFilePath =  Path.GetDirectoryName(Host.TemplateFile);
	                
	var manager = Manager.Create(Host, GenerationEnvironment);
	var dbExporter = new DBExporter(); 
    var entities = dbExporter.LoadEntities();
    foreach(Entity tbl in entities){
	    //if(!ExcludeTables.Contains(tbl.Name)){
		
		if(tableNames!="")
		{  
			if(tbl.Name.ToLower() != tableNames.ToLower())
				continue;  
		}     
		manager.StartNewFile(Helper.TableNameToPascal(tbl.Name) + "DAL.Gen.cs", outputFilePath);
#>
#region Declaim
//---------------------------------------------------------------------------
// Name:		<#= Helper.TableNameToPascal(tbl.Name) #>DAL
// Function: 	Expose data in table <#= tbl.Name #> from database as business object to MES system.
// Tool:		T4
// CreateDate:	<#= DateTime.Now.ToLongDateString() #>
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.<#= MouldName #>;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace <#= NameSpace #> 
{     
	//// <summary>
    /// <#= Helper.TableNameToPascal(tbl.Name) #>DAL对应表[<#= tbl.Name #>]
    /// </summary>
    public partial class <#=Helper.TableNameToPascal(tbl.Name) #>DAL : BusinessObjectProvider<<#=Helper.TableNameToPascal(tbl.Name) #>Info>
	{
			 
		#region Sql Statements
		private const string <#=tbl.Name #>_SELECT_BY_ID=
			@"SELECT <# var selectStr=""; int length=tbl.Columns.ToList().Count; var index=0; foreach(Column col in tbl.Columns){ if(index!=length-1) selectStr+= col.Name + ",\r\n\t\t\t\t"; else selectStr+= col.Name + "\t\t\t\t" ; index++;}  #> <#= selectStr #> 
			FROM [MES].[<#=tbl.Name #>] WITH (NOLOCK)  
			<# var whereStr=""; foreach(Column col in tbl.Columns){ if(col.IsPrimaryKey) whereStr+=" "+col.Name+"=@"+col.Name+" AND"; } if(whereStr.Length>3) whereStr="WHERE" + whereStr.Substring(0, whereStr.Length-3); #> <#= whereStr #> ;";

		private const string <#=tbl.Name #>_SELECT= 
			@"SELECT <#= selectStr #> 
				FROM [MES].[<#=tbl.Name #>] WITH (NOLOCK) {0} ;";
		
		private const string <#=tbl.Name #>_SELECT_COUNTS= 
			@"SELECT count(*) FROM [MES].[<#=tbl.Name #>]  WITH (NOLOCK) WHERE 1=1 {0} ;";

		private const string <#=tbl.Name #>_INSERT=
			@"DECLARE @ReturnID INT; INSERT INTO [MES].[<#=tbl.Name #>] (<# var insertStr=""; length=tbl.Columns.ToList().Count; index=0; foreach(Column col in tbl.Columns){ if(!col.IsIdentity)  { if(index!=length-1) insertStr+= col.Name + ",\r\n\t\t\t\t"; else insertStr+= col.Name + "\t\t\t\t" ;} index++;}  #> 
			<#= insertStr #> 
			) VALUES (
			<# var valuesStr=""; index=0; foreach(Column col in tbl.Columns){if(!col.IsIdentity) {if(index!=length-1) valuesStr+= "@"+col.Name + ",\r\n\t\t\t\t" ;  else valuesStr+="@"+col.Name + "\t\t\t\t"; } index++; } #> <#= valuesStr #> 
			);
			SET @ReturnID=0;			 
			SELECT @ReturnID;";
		private const string <#=tbl.Name #>_UPDATE=
			@"UPDATE [MES].[<#=tbl.Name #>] WITH(ROWLOCK) SET 
			<# var setStr=""; index=0; foreach(Column col in tbl.Columns){ if(!col.IsIdentity) { if(index!=length-1) setStr+=col.Name+"=@"+col.Name+",\r\n\t\t\t\t" ; else setStr+=col.Name+"=@"+col.Name + "\t\t\t\t"; } index++;}  #> <#= setStr #> <#= whereStr #> 
			;";
		private const string <#=tbl.Name #>_DELETE=
			@"DELETE FROM [MES].[<#=tbl.Name #>] WITH(ROWLOCK) 
			<#= whereStr #> 
			;";

		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get <#=Helper.TableNameToPascal(tbl.Name) #>Info
		/// </summary>
		<# foreach(Column col in tbl.Columns) { #> <# if(col.IsPrimaryKey) { #>
		/// <param name="<#= col.Name #>"><#=Helper.TableNameToPascal(tbl.Name) #>Info Primary key </param>
		<# } } #>
/// <returns></returns> 
		public <#=Helper.TableNameToPascal(tbl.Name) #>Info GetInfo(<# var paramStr=""; length=0; foreach(Column col in tbl.Columns){  if(col.IsPrimaryKey) length++; }  index=0; foreach(Column col in tbl.Columns){  if(col.IsPrimaryKey) { if(index!=length-1) paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) + ",\r\n\t\t\t\t"; else paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) ; index++; } }  #><#= paramStr #>)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_SELECT_BY_ID);
			<# foreach(Column col in tbl.Columns) { #> <# if(col.IsPrimaryKey) { #>
			db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType)#>, a<#= Helper.ConvertToPascal(col.Name) #>);
			<# }} #>
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return Create<#=Helper.TableNameToPascal(tbl.Name) #>Info(dr);
			}
			return null;
		}	

		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns><#=Helper.TableNameToPascal(tbl.Name) #>Info Collection </returns>
		public List<<#=Helper.TableNameToPascal(tbl.Name) #>Info> GetList(string textWhere,string orderText)
		{
			string query=string.Empty;
			if(!string.IsNullOrEmpty(textWhere))
			{
				if(textWhere.Trim().StartsWith("and",StringComparison.OrdinalIgnoreCase))
				{
					query+=" where 1=1 " + textWhere;
				}
				else
				{
					query+=" where "+textWhere; 
				}
			}
			if(!string.IsNullOrEmpty(orderText))
				query+=" order by "+orderText;
			
			return GetList(string.Format(<#=tbl.Name #>_SELECT,query));
		}
		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns><#=Helper.TableNameToPascal(tbl.Name) #>Info Collection </returns>
		public List<<#=Helper.TableNameToPascal(tbl.Name) #>Info> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<<#=Helper.TableNameToPascal(tbl.Name) #>Info> list=new List<<#=Helper.TableNameToPascal(tbl.Name) #>Info>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while(dr.Read())
				{
					list.Add(Create<#=Helper.TableNameToPascal(tbl.Name) #>Info(dr));
				}
			}
			
			return list;
		}
		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<<#=Helper.TableNameToPascal(tbl.Name) #>Info> GetList(string textWhere, string orderText, int startRowIndex, int maximumRows)
		{
			if(string.IsNullOrEmpty(textWhere))
				textWhere = "";
			else
			{				
				if(!textWhere.Trim().StartsWith("and",StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}

			if(string.IsNullOrEmpty(orderText))
			{
				<# var orderStr=""; foreach(Column col in tbl.Columns){ if(col.IsPrimaryKey) { orderStr=" "+col.Name+" DESC"; break; } } #>

				orderText = "<#= orderStr #>";
			}


			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetStoredProcCommand("[MES].PROC_SYS_GET_DATA_PAGING");

            db.AddInParameter(cmd, "@SelectColumn", DbType.String, "*");
            db.AddInParameter(cmd, "@FromJoin", DbType.String, "[MES].[<#= tbl.Name #>] WITH (NOLOCK)");
            db.AddInParameter(cmd, "@WhereCond", DbType.String, textWhere);
            db.AddInParameter(cmd, "@OrderBy", DbType.String, orderText);            
            db.AddInParameter(cmd, "@StartRowIndex", DbType.Int32, startRowIndex);
			db.AddInParameter(cmd, "@MaximumRows", DbType.Int32, maximumRows);

			List<<#=Helper.TableNameToPascal(tbl.Name) #>Info> list=new List<<#=Helper.TableNameToPascal(tbl.Name) #>Info>();
			using (IDataReader dr = db.ExecuteReader(cmd))
			{
				while(dr.Read())
				{
					list.Add(Create<#=Helper.TableNameToPascal(tbl.Name) #>Info(dr));
				}
			}
			
			return list;
		}		

		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if(string.IsNullOrEmpty(textWhere))
				textWhere = "";
			else
			{				
				if(!textWhere.Trim().StartsWith("and",StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}

			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(<#=tbl.Name #>_SELECT_COUNTS, textWhere));

			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }

		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(<#=Helper.TableNameToPascal(tbl.Name) #>Info info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_INSERT);
			
			<# foreach(Column col in tbl.Columns) { if(!col.IsIdentity) { #> 			
			db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, info.<#= Helper.ConvertToPascal(col.Name) #>);			
			<# } } #>
		
			return int.Parse("0"+db.ExecuteScalar(dbCommand));
		}
		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(<#=Helper.TableNameToPascal(tbl.Name) #>Info info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_UPDATE);
				
			<# foreach(Column col in tbl.Columns) { #> 
			db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, info.<#= Helper.ConvertToPascal(col.Name) #>);
			<# } #>
			
			return int.Parse("0"+db.ExecuteNonQuery(dbCommand));
		}
		
		/// <summary>
		/// Delete
		/// </summary>
		<# foreach(Column col in tbl.Columns) { #> <# if(col.IsPrimaryKey) { #>
		/// <param name="<#= col.Name #>"><#=Helper.TableNameToPascal(tbl.Name) #>Info Primary key </param>
		<# } } #>
		/// <returns></returns>
		public int Delete(<#= paramStr #>)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(<#=tbl.Name #>_DELETE);

			<# foreach(Column col in tbl.Columns) { #> <# if(col.IsPrimaryKey) { #>
			db.AddInParameter(dbCommand, "@<#= col.Name #>", <#= Helper.GetDbType(col.DataType) #>, a<#= Helper.ConvertToPascal(col.Name) #>);
			<# }} #>
			
			return int.Parse("0"+db.ExecuteNonQuery(dbCommand));
		}
		
		#endregion
		  
		#region Helpers   
	  
		private static <#=Helper.TableNameToPascal(tbl.Name) #>Info Create<#=Helper.TableNameToPascal(tbl.Name) #>Info(IDataReader rdr)
		{
			<#=Helper.TableNameToPascal(tbl.Name) #>Info info = new <#=Helper.TableNameToPascal(tbl.Name) #>Info();

			<# foreach(Column col in tbl.Columns) { #>info.<#= Helper.ConvertToPascal(col.Name) #> = <#= Helper.GetDBConvertMethod(col.DataType + Helper.CheckNullable(col)) #>(rdr, rdr.GetOrdinal("<#= col.Name #>"));			
			<# ;} #>
			  
			return info;
		}
		
		#endregion
	}
}
<#   
		manager.EndBlock();		
    }

	manager.Process(true); 
#>
