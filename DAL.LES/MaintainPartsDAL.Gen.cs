#region Declaim
//---------------------------------------------------------------------------
// Name:		MaintainPartsDAL
// Function: 	Expose data in table TM_BAS_MAINTAIN_PARTS from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// MaintainPartsDAL对应表[TM_BAS_MAINTAIN_PARTS]
    /// </summary>
    public partial class MaintainPartsDAL : BusinessObjectProvider<MaintainPartsInfo>
	{
		#region Sql Statements
		private const string TM_BAS_MAINTAIN_PARTS_SELECT_BY_ID =
			@"SELECT ID,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				PART_WEIGHT,
				PART_CLS,
				PART_STATE,
				PART_ENGINEER,
				PART_PURCHASER,
				DOCK,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				MRP_TYPE,
				MRP_CONTROL,
				MRP_GROUP,
				ORDER_BATCH,
				ORDER_ADVANCE,
				REORDER_POINT,
				PART_GROUP,
				PULL_PERSON,
				INFO_PERSON,
				TRANS_STYLE,
				TRANS_TRUCK,
				TRUCK_SIZE,
				PACKAGE_FEE,
				TRANS_FEE,
				STOCK_FEE,
				PURCHASE_STYLE,
				SUPPLY_STYLE,
				ROUTE,
				TRAN_TYPE,
				TRAN_SIZES,
				COMMENTS,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				FID,
				CREATE_DATE,
				VALID_FLAG				  
				FROM [LES].[TM_BAS_MAINTAIN_PARTS] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TM_BAS_MAINTAIN_PARTS_SELECT = 
			@"SELECT ID,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				PART_WEIGHT,
				PART_CLS,
				PART_STATE,
				PART_ENGINEER,
				PART_PURCHASER,
				DOCK,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				MRP_TYPE,
				MRP_CONTROL,
				MRP_GROUP,
				ORDER_BATCH,
				ORDER_ADVANCE,
				REORDER_POINT,
				PART_GROUP,
				PULL_PERSON,
				INFO_PERSON,
				TRANS_STYLE,
				TRANS_TRUCK,
				TRUCK_SIZE,
				PACKAGE_FEE,
				TRANS_FEE,
				STOCK_FEE,
				PURCHASE_STYLE,
				SUPPLY_STYLE,
				ROUTE,
				TRAN_TYPE,
				TRAN_SIZES,
				COMMENTS,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				FID,
				CREATE_DATE,
				VALID_FLAG				 
				FROM [LES].[TM_BAS_MAINTAIN_PARTS] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TM_BAS_MAINTAIN_PARTS_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_BAS_MAINTAIN_PARTS]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TM_BAS_MAINTAIN_PARTS_INSERT =
			@"INSERT INTO [LES].[TM_BAS_MAINTAIN_PARTS] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				PART_WEIGHT,
				PART_CLS,
				PART_STATE,
				PART_ENGINEER,
				PART_PURCHASER,
				DOCK,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				MRP_TYPE,
				MRP_CONTROL,
				MRP_GROUP,
				ORDER_BATCH,
				ORDER_ADVANCE,
				REORDER_POINT,
				PART_GROUP,
				PULL_PERSON,
				INFO_PERSON,
				TRANS_STYLE,
				TRANS_TRUCK,
				TRUCK_SIZE,
				PACKAGE_FEE,
				TRANS_FEE,
				STOCK_FEE,
				PURCHASE_STYLE,
				SUPPLY_STYLE,
				ROUTE,
				TRAN_TYPE,
				TRAN_SIZES,
				COMMENTS,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				FID,
				CREATE_DATE,
				VALID_FLAG				 
			) VALUES (
				@PLANT,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@SUPPLIER_NUM,
				@PART_NO,
				@PART_CNAME,
				@PART_ENAME,
				@PART_NICKNAME,
				@PART_UNITS,
				@PART_WEIGHT,
				@PART_CLS,
				@PART_STATE,
				@PART_ENGINEER,
				@PART_PURCHASER,
				@DOCK,
				@INHOUSE_PACKAGE_MODEL,
				@INHOUSE_PACKAGE,
				@INBOUND_PACKAGE_MODEL,
				@INBOUND_PACKAGE,
				@PACKAGE_MODEL,
				@PACKAGE,
				@LOGICAL_PK,
				@MRP_TYPE,
				@MRP_CONTROL,
				@MRP_GROUP,
				@ORDER_BATCH,
				@ORDER_ADVANCE,
				@REORDER_POINT,
				@PART_GROUP,
				@PULL_PERSON,
				@INFO_PERSON,
				@TRANS_STYLE,
				@TRANS_TRUCK,
				@TRUCK_SIZE,
				@PACKAGE_FEE,
				@TRANS_FEE,
				@STOCK_FEE,
				@PURCHASE_STYLE,
				@SUPPLY_STYLE,
				@ROUTE,
				@TRAN_TYPE,
				@TRAN_SIZES,
				@COMMENTS,
				@MODIFY_USER,
				@MODIFY_DATE,
				@CREATE_USER,
				@FID,
				GETDATE(),
				@VALID_FLAG				 
			);SELECT @@IDENTITY;";
		private const string TM_BAS_MAINTAIN_PARTS_UPDATE =
			@"UPDATE [LES].[TM_BAS_MAINTAIN_PARTS] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				PART_NO=@PART_NO,
				PART_CNAME=@PART_CNAME,
				PART_ENAME=@PART_ENAME,
				PART_NICKNAME=@PART_NICKNAME,
				PART_UNITS=@PART_UNITS,
				PART_WEIGHT=@PART_WEIGHT,
				PART_CLS=@PART_CLS,
				PART_STATE=@PART_STATE,
				PART_ENGINEER=@PART_ENGINEER,
				PART_PURCHASER=@PART_PURCHASER,
				DOCK=@DOCK,
				INHOUSE_PACKAGE_MODEL=@INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE=@INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL=@INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE=@INBOUND_PACKAGE,
				PACKAGE_MODEL=@PACKAGE_MODEL,
				PACKAGE=@PACKAGE,
				LOGICAL_PK=@LOGICAL_PK,
				MRP_TYPE=@MRP_TYPE,
				MRP_CONTROL=@MRP_CONTROL,
				MRP_GROUP=@MRP_GROUP,
				ORDER_BATCH=@ORDER_BATCH,
				ORDER_ADVANCE=@ORDER_ADVANCE,
				REORDER_POINT=@REORDER_POINT,
				PART_GROUP=@PART_GROUP,
				PULL_PERSON=@PULL_PERSON,
				INFO_PERSON=@INFO_PERSON,
				TRANS_STYLE=@TRANS_STYLE,
				TRANS_TRUCK=@TRANS_TRUCK,
				TRUCK_SIZE=@TRUCK_SIZE,
				PACKAGE_FEE=@PACKAGE_FEE,
				TRANS_FEE=@TRANS_FEE,
				STOCK_FEE=@STOCK_FEE,
				PURCHASE_STYLE=@PURCHASE_STYLE,
				SUPPLY_STYLE=@SUPPLY_STYLE,
				ROUTE=@ROUTE,
				TRAN_TYPE=@TRAN_TYPE,
				TRAN_SIZES=@TRAN_SIZES,
				COMMENTS=@COMMENTS,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE,
				CREATE_USER=@CREATE_USER,
				FID=@FID,
				CREATE_DATE=@CREATE_DATE,
				VALID_FLAG=@VALID_FLAG				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TM_BAS_MAINTAIN_PARTS_DELETE =
			@"DELETE FROM [LES].[TM_BAS_MAINTAIN_PARTS] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get MaintainPartsInfo
		/// </summary>
		/// <param name="ID">MaintainPartsInfo Primary key </param>
		/// <returns></returns> 
		public MaintainPartsInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_PARTS_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateMaintainPartsInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>MaintainPartsInfo Collection </returns>
		public List<MaintainPartsInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_BAS_MAINTAIN_PARTS_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>MaintainPartsInfo Collection </returns>
		public List<MaintainPartsInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<MaintainPartsInfo> list = new List<MaintainPartsInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateMaintainPartsInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<MaintainPartsInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_BAS_MAINTAIN_PARTS]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<MaintainPartsInfo> list = new List<MaintainPartsInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateMaintainPartsInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_BAS_MAINTAIN_PARTS_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(MaintainPartsInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_PARTS_INSERT);			
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@PART_UNITS", DbType.String, info.PartUnits);
			db.AddInParameter(dbCommand, "@PART_WEIGHT", DbType.Decimal, info.PartWeight);
			db.AddInParameter(dbCommand, "@PART_CLS", DbType.String, info.PartCls);
			db.AddInParameter(dbCommand, "@PART_STATE", DbType.Int32, info.PartState);
			db.AddInParameter(dbCommand, "@PART_ENGINEER", DbType.String, info.PartEngineer);
			db.AddInParameter(dbCommand, "@PART_PURCHASER", DbType.String, info.PartPurchaser);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE_MODEL", DbType.String, info.InboundPackageModel);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE", DbType.Int32, info.InboundPackage);
			db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Int32, info.Package);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@MRP_TYPE", DbType.String, info.MrpType);
			db.AddInParameter(dbCommand, "@MRP_CONTROL", DbType.String, info.MrpControl);
			db.AddInParameter(dbCommand, "@MRP_GROUP", DbType.String, info.MrpGroup);
			db.AddInParameter(dbCommand, "@ORDER_BATCH", DbType.Int32, info.OrderBatch);
			db.AddInParameter(dbCommand, "@ORDER_ADVANCE", DbType.Int32, info.OrderAdvance);
			db.AddInParameter(dbCommand, "@REORDER_POINT", DbType.String, info.ReorderPoint);
			db.AddInParameter(dbCommand, "@PART_GROUP", DbType.String, info.PartGroup);
			db.AddInParameter(dbCommand, "@PULL_PERSON", DbType.String, info.PullPerson);
			db.AddInParameter(dbCommand, "@INFO_PERSON", DbType.String, info.InfoPerson);
			db.AddInParameter(dbCommand, "@TRANS_STYLE", DbType.String, info.TransStyle);
			db.AddInParameter(dbCommand, "@TRANS_TRUCK", DbType.String, info.TransTruck);
			db.AddInParameter(dbCommand, "@TRUCK_SIZE", DbType.String, info.TruckSize);
			db.AddInParameter(dbCommand, "@PACKAGE_FEE", DbType.Decimal, info.PackageFee);
			db.AddInParameter(dbCommand, "@TRANS_FEE", DbType.Decimal, info.TransFee);
			db.AddInParameter(dbCommand, "@STOCK_FEE", DbType.Decimal, info.StockFee);
			db.AddInParameter(dbCommand, "@PURCHASE_STYLE", DbType.String, info.PurchaseStyle);
			db.AddInParameter(dbCommand, "@SUPPLY_STYLE", DbType.String, info.SupplyStyle);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.String, info.TranType);
			db.AddInParameter(dbCommand, "@TRAN_SIZES", DbType.String, info.TranSizes);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(MaintainPartsInfo info)
		{
			return  
			@"insert into [LES].[TM_BAS_MAINTAIN_PARTS] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				PART_WEIGHT,
				PART_CLS,
				PART_STATE,
				PART_ENGINEER,
				PART_PURCHASER,
				DOCK,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				MRP_TYPE,
				MRP_CONTROL,
				MRP_GROUP,
				ORDER_BATCH,
				ORDER_ADVANCE,
				REORDER_POINT,
				PART_GROUP,
				PULL_PERSON,
				INFO_PERSON,
				TRANS_STYLE,
				TRANS_TRUCK,
				TRUCK_SIZE,
				PACKAGE_FEE,
				TRANS_FEE,
				STOCK_FEE,
				PURCHASE_STYLE,
				SUPPLY_STYLE,
				ROUTE,
				TRAN_TYPE,
				TRAN_SIZES,
				COMMENTS,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				FID,
				CREATE_DATE,
				VALID_FLAG				 
			) values ("+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLine) ? "NULL" : "N'" + info.AssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.PlantZone) ? "NULL" : "N'" + info.PlantZone + "'") + ","+
				(string.IsNullOrEmpty(info.Workshop) ? "NULL" : "N'" + info.Workshop + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.PartNo) ? "NULL" : "N'" + info.PartNo + "'") + ","+
				(string.IsNullOrEmpty(info.PartCname) ? "NULL" : "N'" + info.PartCname + "'") + ","+
				(string.IsNullOrEmpty(info.PartEname) ? "NULL" : "N'" + info.PartEname + "'") + ","+
				(string.IsNullOrEmpty(info.PartNickname) ? "NULL" : "N'" + info.PartNickname + "'") + ","+
				(string.IsNullOrEmpty(info.PartUnits) ? "NULL" : "N'" + info.PartUnits + "'") + ","+
				(info.PartWeight == null ? "NULL" : "" + info.PartWeight.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PartCls) ? "NULL" : "N'" + info.PartCls + "'") + ","+
				(info.PartState == null ? "NULL" : "" + info.PartState.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PartEngineer) ? "NULL" : "N'" + info.PartEngineer + "'") + ","+
				(string.IsNullOrEmpty(info.PartPurchaser) ? "NULL" : "N'" + info.PartPurchaser + "'") + ","+
				(string.IsNullOrEmpty(info.Dock) ? "NULL" : "N'" + info.Dock + "'") + ","+
				(string.IsNullOrEmpty(info.InhousePackageModel) ? "NULL" : "N'" + info.InhousePackageModel + "'") + ","+
				(info.InhousePackage == null ? "NULL" : "" + info.InhousePackage.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.InboundPackageModel) ? "NULL" : "N'" + info.InboundPackageModel + "'") + ","+
				(info.InboundPackage == null ? "NULL" : "" + info.InboundPackage.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PackageModel) ? "NULL" : "N'" + info.PackageModel + "'") + ","+
				(info.Package == null ? "NULL" : "" + info.Package.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.LogicalPk) ? "NULL" : "N'" + info.LogicalPk + "'") + ","+
				(string.IsNullOrEmpty(info.MrpType) ? "NULL" : "N'" + info.MrpType + "'") + ","+
				(string.IsNullOrEmpty(info.MrpControl) ? "NULL" : "N'" + info.MrpControl + "'") + ","+
				(string.IsNullOrEmpty(info.MrpGroup) ? "NULL" : "N'" + info.MrpGroup + "'") + ","+
				(info.OrderBatch == null ? "NULL" : "" + info.OrderBatch.GetValueOrDefault() + "") + ","+
				(info.OrderAdvance == null ? "NULL" : "" + info.OrderAdvance.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.ReorderPoint) ? "NULL" : "N'" + info.ReorderPoint + "'") + ","+
				(string.IsNullOrEmpty(info.PartGroup) ? "NULL" : "N'" + info.PartGroup + "'") + ","+
				(string.IsNullOrEmpty(info.PullPerson) ? "NULL" : "N'" + info.PullPerson + "'") + ","+
				(string.IsNullOrEmpty(info.InfoPerson) ? "NULL" : "N'" + info.InfoPerson + "'") + ","+
				(string.IsNullOrEmpty(info.TransStyle) ? "NULL" : "N'" + info.TransStyle + "'") + ","+
				(string.IsNullOrEmpty(info.TransTruck) ? "NULL" : "N'" + info.TransTruck + "'") + ","+
				(string.IsNullOrEmpty(info.TruckSize) ? "NULL" : "N'" + info.TruckSize + "'") + ","+
				(info.PackageFee == null ? "NULL" : "" + info.PackageFee.GetValueOrDefault() + "") + ","+
				(info.TransFee == null ? "NULL" : "" + info.TransFee.GetValueOrDefault() + "") + ","+
				(info.StockFee == null ? "NULL" : "" + info.StockFee.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PurchaseStyle) ? "NULL" : "N'" + info.PurchaseStyle + "'") + ","+
				(string.IsNullOrEmpty(info.SupplyStyle) ? "NULL" : "N'" + info.SupplyStyle + "'") + ","+
				(string.IsNullOrEmpty(info.Route) ? "NULL" : "N'" + info.Route + "'") + ","+
				(string.IsNullOrEmpty(info.TranType) ? "NULL" : "N'" + info.TranType + "'") + ","+
				(string.IsNullOrEmpty(info.TranSizes) ? "NULL" : "N'" + info.TranSizes + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				"NULL" + ","+			
				"NULL" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				"GETDATE()" + ","+			
				"1" + ");";		
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(MaintainPartsInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_PARTS_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@PART_UNITS", DbType.String, info.PartUnits);
			db.AddInParameter(dbCommand, "@PART_WEIGHT", DbType.Decimal, info.PartWeight);
			db.AddInParameter(dbCommand, "@PART_CLS", DbType.String, info.PartCls);
			db.AddInParameter(dbCommand, "@PART_STATE", DbType.Int32, info.PartState);
			db.AddInParameter(dbCommand, "@PART_ENGINEER", DbType.String, info.PartEngineer);
			db.AddInParameter(dbCommand, "@PART_PURCHASER", DbType.String, info.PartPurchaser);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE_MODEL", DbType.String, info.InboundPackageModel);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE", DbType.Int32, info.InboundPackage);
			db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Int32, info.Package);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@MRP_TYPE", DbType.String, info.MrpType);
			db.AddInParameter(dbCommand, "@MRP_CONTROL", DbType.String, info.MrpControl);
			db.AddInParameter(dbCommand, "@MRP_GROUP", DbType.String, info.MrpGroup);
			db.AddInParameter(dbCommand, "@ORDER_BATCH", DbType.Int32, info.OrderBatch);
			db.AddInParameter(dbCommand, "@ORDER_ADVANCE", DbType.Int32, info.OrderAdvance);
			db.AddInParameter(dbCommand, "@REORDER_POINT", DbType.String, info.ReorderPoint);
			db.AddInParameter(dbCommand, "@PART_GROUP", DbType.String, info.PartGroup);
			db.AddInParameter(dbCommand, "@PULL_PERSON", DbType.String, info.PullPerson);
			db.AddInParameter(dbCommand, "@INFO_PERSON", DbType.String, info.InfoPerson);
			db.AddInParameter(dbCommand, "@TRANS_STYLE", DbType.String, info.TransStyle);
			db.AddInParameter(dbCommand, "@TRANS_TRUCK", DbType.String, info.TransTruck);
			db.AddInParameter(dbCommand, "@TRUCK_SIZE", DbType.String, info.TruckSize);
			db.AddInParameter(dbCommand, "@PACKAGE_FEE", DbType.Decimal, info.PackageFee);
			db.AddInParameter(dbCommand, "@TRANS_FEE", DbType.Decimal, info.TransFee);
			db.AddInParameter(dbCommand, "@STOCK_FEE", DbType.Decimal, info.StockFee);
			db.AddInParameter(dbCommand, "@PURCHASE_STYLE", DbType.String, info.PurchaseStyle);
			db.AddInParameter(dbCommand, "@SUPPLY_STYLE", DbType.String, info.SupplyStyle);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.String, info.TranType);
			db.AddInParameter(dbCommand, "@TRAN_SIZES", DbType.String, info.TranSizes);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">MaintainPartsInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_PARTS_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">MaintainPartsInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TM_BAS_MAINTAIN_PARTS] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                                                  db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">MaintainPartsInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TM_BAS_MAINTAIN_PARTS] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static MaintainPartsInfo CreateMaintainPartsInfo(IDataReader rdr)
		{
			MaintainPartsInfo info = new MaintainPartsInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.PartEname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_ENAME"));			
			info.PartNickname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NICKNAME"));			
			info.PartUnits = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_UNITS"));			
			info.PartWeight = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("PART_WEIGHT"));			
			info.PartCls = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CLS"));			
			info.PartState = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PART_STATE"));			
			info.PartEngineer = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_ENGINEER"));			
			info.PartPurchaser = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_PURCHASER"));			
			info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));			
			info.InhousePackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE_MODEL"));			
			info.InhousePackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE"));			
			info.InboundPackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INBOUND_PACKAGE_MODEL"));			
			info.InboundPackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INBOUND_PACKAGE"));			
			info.PackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("PACKAGE_MODEL"));			
			info.Package = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PACKAGE"));			
			info.LogicalPk = DBConvert.GetString(rdr, rdr.GetOrdinal("LOGICAL_PK"));			
			info.MrpType = DBConvert.GetString(rdr, rdr.GetOrdinal("MRP_TYPE"));			
			info.MrpControl = DBConvert.GetString(rdr, rdr.GetOrdinal("MRP_CONTROL"));			
			info.MrpGroup = DBConvert.GetString(rdr, rdr.GetOrdinal("MRP_GROUP"));			
			info.OrderBatch = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ORDER_BATCH"));			
			info.OrderAdvance = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ORDER_ADVANCE"));			
			info.ReorderPoint = DBConvert.GetString(rdr, rdr.GetOrdinal("REORDER_POINT"));			
			info.PartGroup = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_GROUP"));			
			info.PullPerson = DBConvert.GetString(rdr, rdr.GetOrdinal("PULL_PERSON"));			
			info.InfoPerson = DBConvert.GetString(rdr, rdr.GetOrdinal("INFO_PERSON"));			
			info.TransStyle = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANS_STYLE"));			
			info.TransTruck = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANS_TRUCK"));			
			info.TruckSize = DBConvert.GetString(rdr, rdr.GetOrdinal("TRUCK_SIZE"));			
			info.PackageFee = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("PACKAGE_FEE"));			
			info.TransFee = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("TRANS_FEE"));			
			info.StockFee = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("STOCK_FEE"));			
			info.PurchaseStyle = DBConvert.GetString(rdr, rdr.GetOrdinal("PURCHASE_STYLE"));			
			info.SupplyStyle = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLY_STYLE"));			
			info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));			
			info.TranType = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_TYPE"));			
			info.TranSizes = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_SIZES"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			return info;
		}
		
		#endregion
	}
}
