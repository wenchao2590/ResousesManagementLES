#region Declaim
//---------------------------------------------------------------------------
// Name:		MaintainInhouseLogisticStandardDAL
// Function: 	Expose data in table TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// MaintainInhouseLogisticStandardDAL对应表[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD]
    /// </summary>
    public partial class MaintainInhouseLogisticStandardDAL : BusinessObjectProvider<MaintainInhouseLogisticStandardInfo>
	{
		#region Sql Statements
		private const string TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_SELECT_BY_ID =
			@"SELECT PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				WORKSHOP_SECTION,
				LOCATION,
				IN_PLANT_LOGISTIC_MODE,
				IN_PLANT_SYSTEM_MODE,
				IN_PLANT_LOGISTIC_PART_CLASS,
				INHOUSE_MODE,
				INHOUSE_SYSTEM_MODE,
				INHOUSE_PART_CLASS,
				LOGICAL_PK,
				STORAGE_LOCATION,
				SEQUENCE_NO,
				IS_ACTIVE,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				WM_NO,
				ZONE_NO,
				DLOC,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				ROUTE,
				TRAN_TYPE,
				TRAN_STYLE,
				TRAN_SIZES,
				CARD_NO,
				EMG_TIME,
				ELOC,
				BUSINESS_PK,
				COUNT_TYPE,
				DOCK,
				COMMENTS,
				MIN,
				MAX,
				T_WM_NO,
				S_WM_NO,
				T_ZONE_NO,
				S_ZONE_NO,
				MIN_PULL_BOX,
				BATCH_PULL_BOX,
				STATUS,
				KANBAN_CIRCLE_CNT,
				SETTLEMENTFLAG,
				MODIFY_USER,
				CREATE_USER,
				ID,
				MODIFY_DATE,
				VALID_FLAG,
				CREATE_DATE,
				FID				  
				FROM [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_SELECT = 
			@"SELECT PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				WORKSHOP_SECTION,
				LOCATION,
				IN_PLANT_LOGISTIC_MODE,
				IN_PLANT_SYSTEM_MODE,
				IN_PLANT_LOGISTIC_PART_CLASS,
				INHOUSE_MODE,
				INHOUSE_SYSTEM_MODE,
				INHOUSE_PART_CLASS,
				LOGICAL_PK,
				STORAGE_LOCATION,
				SEQUENCE_NO,
				IS_ACTIVE,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				WM_NO,
				ZONE_NO,
				DLOC,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				ROUTE,
				TRAN_TYPE,
				TRAN_STYLE,
				TRAN_SIZES,
				CARD_NO,
				EMG_TIME,
				ELOC,
				BUSINESS_PK,
				COUNT_TYPE,
				DOCK,
				COMMENTS,
				MIN,
				MAX,
				T_WM_NO,
				S_WM_NO,
				T_ZONE_NO,
				S_ZONE_NO,
				MIN_PULL_BOX,
				BATCH_PULL_BOX,
				STATUS,
				KANBAN_CIRCLE_CNT,
				SETTLEMENTFLAG,
				MODIFY_USER,
				CREATE_USER,
				ID,
				MODIFY_DATE,
				VALID_FLAG,
				CREATE_DATE,
				FID				 
				FROM [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_INSERT =
			@"INSERT INTO [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				WORKSHOP_SECTION,
				LOCATION,
				IN_PLANT_LOGISTIC_MODE,
				IN_PLANT_SYSTEM_MODE,
				IN_PLANT_LOGISTIC_PART_CLASS,
				INHOUSE_MODE,
				INHOUSE_SYSTEM_MODE,
				INHOUSE_PART_CLASS,
				LOGICAL_PK,
				STORAGE_LOCATION,
				SEQUENCE_NO,
				IS_ACTIVE,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				WM_NO,
				ZONE_NO,
				DLOC,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				ROUTE,
				TRAN_TYPE,
				TRAN_STYLE,
				TRAN_SIZES,
				CARD_NO,
				EMG_TIME,
				ELOC,
				BUSINESS_PK,
				COUNT_TYPE,
				DOCK,
				COMMENTS,
				MIN,
				MAX,
				T_WM_NO,
				S_WM_NO,
				T_ZONE_NO,
				S_ZONE_NO,
				MIN_PULL_BOX,
				BATCH_PULL_BOX,
				STATUS,
				KANBAN_CIRCLE_CNT,
				SETTLEMENTFLAG,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				VALID_FLAG,
				CREATE_DATE,
				FID				 
			) VALUES (
				@PLANT,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@SUPPLIER_NUM,
				@TRANS_SUPPLIER_NUM,
				@PART_NO,
				@PART_CNAME,
				@PART_ENAME,
				@PART_NICKNAME,
				@WORKSHOP_SECTION,
				@LOCATION,
				@IN_PLANT_LOGISTIC_MODE,
				@IN_PLANT_SYSTEM_MODE,
				@IN_PLANT_LOGISTIC_PART_CLASS,
				@INHOUSE_MODE,
				@INHOUSE_SYSTEM_MODE,
				@INHOUSE_PART_CLASS,
				@LOGICAL_PK,
				@STORAGE_LOCATION,
				@SEQUENCE_NO,
				@IS_ACTIVE,
				@IS_REPACK,
				@REPACK_ROUTE,
				@IS_TRIGGER_PULL,
				@WM_NO,
				@ZONE_NO,
				@DLOC,
				@INBOUND_PACKAGE_MODEL,
				@INBOUND_PACKAGE,
				@ROUTE,
				@TRAN_TYPE,
				@TRAN_STYLE,
				@TRAN_SIZES,
				@CARD_NO,
				@EMG_TIME,
				@ELOC,
				@BUSINESS_PK,
				@COUNT_TYPE,
				@DOCK,
				@COMMENTS,
				@MIN,
				@MAX,
				@T_WM_NO,
				@S_WM_NO,
				@T_ZONE_NO,
				@S_ZONE_NO,
				@MIN_PULL_BOX,
				@BATCH_PULL_BOX,
				@STATUS,
				@KANBAN_CIRCLE_CNT,
				@SETTLEMENTFLAG,
				@MODIFY_USER,
				@CREATE_USER,
				@MODIFY_DATE,
				@VALID_FLAG,
				GETDATE(),
				@FID				 
			);SELECT @@IDENTITY;";
		private const string TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_UPDATE =
			@"UPDATE [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM=@TRANS_SUPPLIER_NUM,
				PART_NO=@PART_NO,
				PART_CNAME=@PART_CNAME,
				PART_ENAME=@PART_ENAME,
				PART_NICKNAME=@PART_NICKNAME,
				WORKSHOP_SECTION=@WORKSHOP_SECTION,
				LOCATION=@LOCATION,
				IN_PLANT_LOGISTIC_MODE=@IN_PLANT_LOGISTIC_MODE,
				IN_PLANT_SYSTEM_MODE=@IN_PLANT_SYSTEM_MODE,
				IN_PLANT_LOGISTIC_PART_CLASS=@IN_PLANT_LOGISTIC_PART_CLASS,
				INHOUSE_MODE=@INHOUSE_MODE,
				INHOUSE_SYSTEM_MODE=@INHOUSE_SYSTEM_MODE,
				INHOUSE_PART_CLASS=@INHOUSE_PART_CLASS,
				LOGICAL_PK=@LOGICAL_PK,
				STORAGE_LOCATION=@STORAGE_LOCATION,
				SEQUENCE_NO=@SEQUENCE_NO,
				IS_ACTIVE=@IS_ACTIVE,
				IS_REPACK=@IS_REPACK,
				REPACK_ROUTE=@REPACK_ROUTE,
				IS_TRIGGER_PULL=@IS_TRIGGER_PULL,
				WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				DLOC=@DLOC,
				INBOUND_PACKAGE_MODEL=@INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE=@INBOUND_PACKAGE,
				ROUTE=@ROUTE,
				TRAN_TYPE=@TRAN_TYPE,
				TRAN_STYLE=@TRAN_STYLE,
				TRAN_SIZES=@TRAN_SIZES,
				CARD_NO=@CARD_NO,
				EMG_TIME=@EMG_TIME,
				ELOC=@ELOC,
				BUSINESS_PK=@BUSINESS_PK,
				COUNT_TYPE=@COUNT_TYPE,
				DOCK=@DOCK,
				COMMENTS=@COMMENTS,
				MIN=@MIN,
				MAX=@MAX,
				T_WM_NO=@T_WM_NO,
				S_WM_NO=@S_WM_NO,
				T_ZONE_NO=@T_ZONE_NO,
				S_ZONE_NO=@S_ZONE_NO,
				MIN_PULL_BOX=@MIN_PULL_BOX,
				BATCH_PULL_BOX=@BATCH_PULL_BOX,
				STATUS=@STATUS,
				KANBAN_CIRCLE_CNT=@KANBAN_CIRCLE_CNT,
				SETTLEMENTFLAG=@SETTLEMENTFLAG,
				MODIFY_USER=@MODIFY_USER,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				VALID_FLAG=@VALID_FLAG,
				CREATE_DATE=@CREATE_DATE,
				FID=@FID				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_DELETE =
			@"DELETE FROM [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get MaintainInhouseLogisticStandardInfo
		/// </summary>
		/// <param name="ID">MaintainInhouseLogisticStandardInfo Primary key </param>
		/// <returns></returns> 
		public MaintainInhouseLogisticStandardInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateMaintainInhouseLogisticStandardInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>MaintainInhouseLogisticStandardInfo Collection </returns>
		public List<MaintainInhouseLogisticStandardInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>MaintainInhouseLogisticStandardInfo Collection </returns>
		public List<MaintainInhouseLogisticStandardInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<MaintainInhouseLogisticStandardInfo> list = new List<MaintainInhouseLogisticStandardInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateMaintainInhouseLogisticStandardInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<MaintainInhouseLogisticStandardInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<MaintainInhouseLogisticStandardInfo> list = new List<MaintainInhouseLogisticStandardInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateMaintainInhouseLogisticStandardInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(MaintainInhouseLogisticStandardInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_INSERT);			
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@TRANS_SUPPLIER_NUM", DbType.String, info.TransSupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@WORKSHOP_SECTION", DbType.String, info.WorkshopSection);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@IN_PLANT_LOGISTIC_MODE", DbType.String, info.InPlantLogisticMode);
			db.AddInParameter(dbCommand, "@IN_PLANT_SYSTEM_MODE", DbType.String, info.InPlantSystemMode);
			db.AddInParameter(dbCommand, "@IN_PLANT_LOGISTIC_PART_CLASS", DbType.String, info.InPlantLogisticPartClass);
			db.AddInParameter(dbCommand, "@INHOUSE_MODE", DbType.String, info.InhouseMode);
			db.AddInParameter(dbCommand, "@INHOUSE_SYSTEM_MODE", DbType.String, info.InhouseSystemMode);
			db.AddInParameter(dbCommand, "@INHOUSE_PART_CLASS", DbType.String, info.InhousePartClass);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@STORAGE_LOCATION", DbType.String, info.StorageLocation);
			db.AddInParameter(dbCommand, "@SEQUENCE_NO", DbType.String, info.SequenceNo);
			db.AddInParameter(dbCommand, "@IS_ACTIVE", DbType.Int32, info.IsActive);
			db.AddInParameter(dbCommand, "@IS_REPACK", DbType.Int32, info.IsRepack);
			db.AddInParameter(dbCommand, "@REPACK_ROUTE", DbType.String, info.RepackRoute);
			db.AddInParameter(dbCommand, "@IS_TRIGGER_PULL", DbType.Boolean, info.IsTriggerPull);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE_MODEL", DbType.String, info.InboundPackageModel);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE", DbType.Int32, info.InboundPackage);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.String, info.TranType);
			db.AddInParameter(dbCommand, "@TRAN_STYLE", DbType.String, info.TranStyle);
			db.AddInParameter(dbCommand, "@TRAN_SIZES", DbType.String, info.TranSizes);
			db.AddInParameter(dbCommand, "@CARD_NO", DbType.String, info.CardNo);
			db.AddInParameter(dbCommand, "@EMG_TIME", DbType.Int32, info.EmgTime);
			db.AddInParameter(dbCommand, "@ELOC", DbType.String, info.Eloc);
			db.AddInParameter(dbCommand, "@BUSINESS_PK", DbType.String, info.BusinessPk);
			db.AddInParameter(dbCommand, "@COUNT_TYPE", DbType.String, info.CountType);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@MIN", DbType.Int32, info.Min);
			db.AddInParameter(dbCommand, "@MAX", DbType.Int32, info.Max);
			db.AddInParameter(dbCommand, "@T_WM_NO", DbType.String, info.TWmNo);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@T_ZONE_NO", DbType.String, info.TZoneNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@MIN_PULL_BOX", DbType.Int32, info.MinPullBox);
			db.AddInParameter(dbCommand, "@BATCH_PULL_BOX", DbType.Int32, info.BatchPullBox);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@KANBAN_CIRCLE_CNT", DbType.Int32, info.KanbanCircleCnt);
			db.AddInParameter(dbCommand, "@SETTLEMENTFLAG", DbType.Int32, info.Settlementflag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Int32, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(MaintainInhouseLogisticStandardInfo info)
		{
			return  
			@"insert into [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				WORKSHOP_SECTION,
				LOCATION,
				IN_PLANT_LOGISTIC_MODE,
				IN_PLANT_SYSTEM_MODE,
				IN_PLANT_LOGISTIC_PART_CLASS,
				INHOUSE_MODE,
				INHOUSE_SYSTEM_MODE,
				INHOUSE_PART_CLASS,
				LOGICAL_PK,
				STORAGE_LOCATION,
				SEQUENCE_NO,
				IS_ACTIVE,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				WM_NO,
				ZONE_NO,
				DLOC,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				ROUTE,
				TRAN_TYPE,
				TRAN_STYLE,
				TRAN_SIZES,
				CARD_NO,
				EMG_TIME,
				ELOC,
				BUSINESS_PK,
				COUNT_TYPE,
				DOCK,
				COMMENTS,
				MIN,
				MAX,
				T_WM_NO,
				S_WM_NO,
				T_ZONE_NO,
				S_ZONE_NO,
				MIN_PULL_BOX,
				BATCH_PULL_BOX,
				STATUS,
				KANBAN_CIRCLE_CNT,
				SETTLEMENTFLAG,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				VALID_FLAG,
				CREATE_DATE,
				FID				 
			) values ("+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLine) ? "NULL" : "N'" + info.AssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.PlantZone) ? "NULL" : "N'" + info.PlantZone + "'") + ","+
				(string.IsNullOrEmpty(info.Workshop) ? "NULL" : "N'" + info.Workshop + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.TransSupplierNum) ? "NULL" : "N'" + info.TransSupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.PartNo) ? "NULL" : "N'" + info.PartNo + "'") + ","+
				(string.IsNullOrEmpty(info.PartCname) ? "NULL" : "N'" + info.PartCname + "'") + ","+
				(string.IsNullOrEmpty(info.PartEname) ? "NULL" : "N'" + info.PartEname + "'") + ","+
				(string.IsNullOrEmpty(info.PartNickname) ? "NULL" : "N'" + info.PartNickname + "'") + ","+
				(string.IsNullOrEmpty(info.WorkshopSection) ? "NULL" : "N'" + info.WorkshopSection + "'") + ","+
				(string.IsNullOrEmpty(info.Location) ? "NULL" : "N'" + info.Location + "'") + ","+
				(string.IsNullOrEmpty(info.InPlantLogisticMode) ? "NULL" : "N'" + info.InPlantLogisticMode + "'") + ","+
				(string.IsNullOrEmpty(info.InPlantSystemMode) ? "NULL" : "N'" + info.InPlantSystemMode + "'") + ","+
				(string.IsNullOrEmpty(info.InPlantLogisticPartClass) ? "NULL" : "N'" + info.InPlantLogisticPartClass + "'") + ","+
				(string.IsNullOrEmpty(info.InhouseMode) ? "NULL" : "N'" + info.InhouseMode + "'") + ","+
				(string.IsNullOrEmpty(info.InhouseSystemMode) ? "NULL" : "N'" + info.InhouseSystemMode + "'") + ","+
				(string.IsNullOrEmpty(info.InhousePartClass) ? "NULL" : "N'" + info.InhousePartClass + "'") + ","+
				(string.IsNullOrEmpty(info.LogicalPk) ? "NULL" : "N'" + info.LogicalPk + "'") + ","+
				(string.IsNullOrEmpty(info.StorageLocation) ? "NULL" : "N'" + info.StorageLocation + "'") + ","+
				(string.IsNullOrEmpty(info.SequenceNo) ? "NULL" : "N'" + info.SequenceNo + "'") + ","+
				(info.IsActive == null ? "NULL" : "" + info.IsActive.GetValueOrDefault() + "") + ","+
				(info.IsRepack == null ? "NULL" : "" + info.IsRepack.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.RepackRoute) ? "NULL" : "N'" + info.RepackRoute + "'") + ","+
				(info.IsTriggerPull == null ? "NULL" : "" + (info.IsTriggerPull.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(string.IsNullOrEmpty(info.WmNo) ? "NULL" : "N'" + info.WmNo + "'") + ","+
				(string.IsNullOrEmpty(info.ZoneNo) ? "NULL" : "N'" + info.ZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.Dloc) ? "NULL" : "N'" + info.Dloc + "'") + ","+
				(string.IsNullOrEmpty(info.InboundPackageModel) ? "NULL" : "N'" + info.InboundPackageModel + "'") + ","+
				(info.InboundPackage == null ? "NULL" : "" + info.InboundPackage.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Route) ? "NULL" : "N'" + info.Route + "'") + ","+
				(string.IsNullOrEmpty(info.TranType) ? "NULL" : "N'" + info.TranType + "'") + ","+
				(string.IsNullOrEmpty(info.TranStyle) ? "NULL" : "N'" + info.TranStyle + "'") + ","+
				(string.IsNullOrEmpty(info.TranSizes) ? "NULL" : "N'" + info.TranSizes + "'") + ","+
				(string.IsNullOrEmpty(info.CardNo) ? "NULL" : "N'" + info.CardNo + "'") + ","+
				(info.EmgTime == null ? "NULL" : "" + info.EmgTime.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Eloc) ? "NULL" : "N'" + info.Eloc + "'") + ","+
				(string.IsNullOrEmpty(info.BusinessPk) ? "NULL" : "N'" + info.BusinessPk + "'") + ","+
				(string.IsNullOrEmpty(info.CountType) ? "NULL" : "N'" + info.CountType + "'") + ","+
				(string.IsNullOrEmpty(info.Dock) ? "NULL" : "N'" + info.Dock + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				(info.Min == null ? "NULL" : "" + info.Min.GetValueOrDefault() + "") + ","+
				(info.Max == null ? "NULL" : "" + info.Max.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.TWmNo) ? "NULL" : "N'" + info.TWmNo + "'") + ","+
				(string.IsNullOrEmpty(info.SWmNo) ? "NULL" : "N'" + info.SWmNo + "'") + ","+
				(string.IsNullOrEmpty(info.TZoneNo) ? "NULL" : "N'" + info.TZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.SZoneNo) ? "NULL" : "N'" + info.SZoneNo + "'") + ","+
				(info.MinPullBox == null ? "NULL" : "" + info.MinPullBox.GetValueOrDefault() + "") + ","+
				(info.BatchPullBox == null ? "NULL" : "" + info.BatchPullBox.GetValueOrDefault() + "") + ","+
				(info.Status == null ? "NULL" : "" + info.Status.GetValueOrDefault() + "") + ","+
				(info.KanbanCircleCnt == null ? "NULL" : "" + info.KanbanCircleCnt.GetValueOrDefault() + "") + ","+
				(info.Settlementflag == null ? "NULL" : "" + info.Settlementflag.GetValueOrDefault() + "") + ","+
				"NULL" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				"NULL" + ","+			
				"1" + ","+		
				"GETDATE()" + ","+			
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ");";				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(MaintainInhouseLogisticStandardInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_UPDATE);				
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@TRANS_SUPPLIER_NUM", DbType.String, info.TransSupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@WORKSHOP_SECTION", DbType.String, info.WorkshopSection);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@IN_PLANT_LOGISTIC_MODE", DbType.String, info.InPlantLogisticMode);
			db.AddInParameter(dbCommand, "@IN_PLANT_SYSTEM_MODE", DbType.String, info.InPlantSystemMode);
			db.AddInParameter(dbCommand, "@IN_PLANT_LOGISTIC_PART_CLASS", DbType.String, info.InPlantLogisticPartClass);
			db.AddInParameter(dbCommand, "@INHOUSE_MODE", DbType.String, info.InhouseMode);
			db.AddInParameter(dbCommand, "@INHOUSE_SYSTEM_MODE", DbType.String, info.InhouseSystemMode);
			db.AddInParameter(dbCommand, "@INHOUSE_PART_CLASS", DbType.String, info.InhousePartClass);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@STORAGE_LOCATION", DbType.String, info.StorageLocation);
			db.AddInParameter(dbCommand, "@SEQUENCE_NO", DbType.String, info.SequenceNo);
			db.AddInParameter(dbCommand, "@IS_ACTIVE", DbType.Int32, info.IsActive);
			db.AddInParameter(dbCommand, "@IS_REPACK", DbType.Int32, info.IsRepack);
			db.AddInParameter(dbCommand, "@REPACK_ROUTE", DbType.String, info.RepackRoute);
			db.AddInParameter(dbCommand, "@IS_TRIGGER_PULL", DbType.Boolean, info.IsTriggerPull);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE_MODEL", DbType.String, info.InboundPackageModel);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE", DbType.Int32, info.InboundPackage);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.String, info.TranType);
			db.AddInParameter(dbCommand, "@TRAN_STYLE", DbType.String, info.TranStyle);
			db.AddInParameter(dbCommand, "@TRAN_SIZES", DbType.String, info.TranSizes);
			db.AddInParameter(dbCommand, "@CARD_NO", DbType.String, info.CardNo);
			db.AddInParameter(dbCommand, "@EMG_TIME", DbType.Int32, info.EmgTime);
			db.AddInParameter(dbCommand, "@ELOC", DbType.String, info.Eloc);
			db.AddInParameter(dbCommand, "@BUSINESS_PK", DbType.String, info.BusinessPk);
			db.AddInParameter(dbCommand, "@COUNT_TYPE", DbType.String, info.CountType);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@MIN", DbType.Int32, info.Min);
			db.AddInParameter(dbCommand, "@MAX", DbType.Int32, info.Max);
			db.AddInParameter(dbCommand, "@T_WM_NO", DbType.String, info.TWmNo);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@T_ZONE_NO", DbType.String, info.TZoneNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@MIN_PULL_BOX", DbType.Int32, info.MinPullBox);
			db.AddInParameter(dbCommand, "@BATCH_PULL_BOX", DbType.Int32, info.BatchPullBox);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@KANBAN_CIRCLE_CNT", DbType.Int32, info.KanbanCircleCnt);
			db.AddInParameter(dbCommand, "@SETTLEMENTFLAG", DbType.Int32, info.Settlementflag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Int32, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">MaintainInhouseLogisticStandardInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">MaintainInhouseLogisticStandardInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
                                                       			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
    db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">MaintainInhouseLogisticStandardInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TM_BAS_MAINTAIN_INHOUSE_LOGISTIC_STANDARD] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static MaintainInhouseLogisticStandardInfo CreateMaintainInhouseLogisticStandardInfo(IDataReader rdr)
		{
			MaintainInhouseLogisticStandardInfo info = new MaintainInhouseLogisticStandardInfo();
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.TransSupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANS_SUPPLIER_NUM"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.PartEname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_ENAME"));			
			info.PartNickname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NICKNAME"));			
			info.WorkshopSection = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP_SECTION"));			
			info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));			
			info.InPlantLogisticMode = DBConvert.GetString(rdr, rdr.GetOrdinal("IN_PLANT_LOGISTIC_MODE"));			
			info.InPlantSystemMode = DBConvert.GetString(rdr, rdr.GetOrdinal("IN_PLANT_SYSTEM_MODE"));			
			info.InPlantLogisticPartClass = DBConvert.GetString(rdr, rdr.GetOrdinal("IN_PLANT_LOGISTIC_PART_CLASS"));			
			info.InhouseMode = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_MODE"));			
			info.InhouseSystemMode = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_SYSTEM_MODE"));			
			info.InhousePartClass = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PART_CLASS"));			
			info.LogicalPk = DBConvert.GetString(rdr, rdr.GetOrdinal("LOGICAL_PK"));			
			info.StorageLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("STORAGE_LOCATION"));			
			info.SequenceNo = DBConvert.GetString(rdr, rdr.GetOrdinal("SEQUENCE_NO"));			
			info.IsActive = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_ACTIVE"));			
			info.IsRepack = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_REPACK"));			
			info.RepackRoute = DBConvert.GetString(rdr, rdr.GetOrdinal("REPACK_ROUTE"));			
			info.IsTriggerPull = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("IS_TRIGGER_PULL"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.Dloc = DBConvert.GetString(rdr, rdr.GetOrdinal("DLOC"));			
			info.InboundPackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INBOUND_PACKAGE_MODEL"));			
			info.InboundPackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INBOUND_PACKAGE"));			
			info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));			
			info.TranType = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_TYPE"));			
			info.TranStyle = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_STYLE"));			
			info.TranSizes = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_SIZES"));			
			info.CardNo = DBConvert.GetString(rdr, rdr.GetOrdinal("CARD_NO"));			
			info.EmgTime = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("EMG_TIME"));			
			info.Eloc = DBConvert.GetString(rdr, rdr.GetOrdinal("ELOC"));			
			info.BusinessPk = DBConvert.GetString(rdr, rdr.GetOrdinal("BUSINESS_PK"));			
			info.CountType = DBConvert.GetString(rdr, rdr.GetOrdinal("COUNT_TYPE"));			
			info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.Min = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MIN"));			
			info.Max = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MAX"));			
			info.TWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("T_WM_NO"));			
			info.SWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_WM_NO"));			
			info.TZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("T_ZONE_NO"));			
			info.SZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_ZONE_NO"));			
			info.MinPullBox = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MIN_PULL_BOX"));			
			info.BatchPullBox = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BATCH_PULL_BOX"));			
			info.Status = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("STATUS"));			
			info.KanbanCircleCnt = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("KANBAN_CIRCLE_CNT"));			
			info.Settlementflag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SETTLEMENTFLAG"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.ValidFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			return info;
		}
		
		#endregion
	}
}
