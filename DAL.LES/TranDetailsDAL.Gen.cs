#region Declaim
//---------------------------------------------------------------------------
// Name:		TranDetailsDAL
// Function: 	Expose data in table TT_WMM_TRAN_DETAILS from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月9日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// TranDetailsDAL对应表[TT_WMM_TRAN_DETAILS]
    /// </summary>
    public partial class TranDetailsDAL : BusinessObjectProvider<TranDetailsInfo>
	{
		#region Sql Statements
		private const string TT_WMM_TRAN_DETAILS_SELECT_BY_ID =
			@"SELECT ID,
				FID,
				TRAN_NO,
				PLANT,
				BATCH_NO,
				PART_NO,
				BARCODE_DATA,
				WM_NO,
				ZONE_NO,
				DLOC,
				TARGET_WM,
				TARGET_ZONE,
				TARGET_DLOC,
				MEASURING_UNIT_NO,
				PACKAGE,
				MAX,
				MIN,
				NUM,
				BOX_NUM,
				TRAN_STATE,
				TRAN_DATE,
				SUPPLIER_NUM,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				ACTUAL_PACKAGE_QTY,
				ACTUAL_QTY,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				REQUIRED_PACKAGE_QTY,
				REQUIRED_QTY,
				BARCODE_TYPE,
				REQUIRED_DATE,
				PACHAGE_TYPE,
				LINE_POSITION,
				RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				DOCK,
				SUPPLIER_SNAME,
				PACKAGE_MODEL,
				PART_CLS,
				PART_UNITS,
				IS_BATCH,
				TRAN_TYPE,
				ORIGIN_PLACE,
				PART_PRICE,
				COST_CENTER,
				COMMENTS,
				SETTLED_FLAG,
				KEEPER,
				STOCKS_FID,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				TRAN_ORDER_TYPE,
				RUNSHEET_TYPE				  
				FROM [LES].[TT_WMM_TRAN_DETAILS] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TT_WMM_TRAN_DETAILS_SELECT = 
			@"SELECT ID,
				FID,
				TRAN_NO,
				PLANT,
				BATCH_NO,
				PART_NO,
				BARCODE_DATA,
				WM_NO,
				ZONE_NO,
				DLOC,
				TARGET_WM,
				TARGET_ZONE,
				TARGET_DLOC,
				MEASURING_UNIT_NO,
				PACKAGE,
				MAX,
				MIN,
				NUM,
				BOX_NUM,
				TRAN_STATE,
				TRAN_DATE,
				SUPPLIER_NUM,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				ACTUAL_PACKAGE_QTY,
				ACTUAL_QTY,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				REQUIRED_PACKAGE_QTY,
				REQUIRED_QTY,
				BARCODE_TYPE,
				REQUIRED_DATE,
				PACHAGE_TYPE,
				LINE_POSITION,
				RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				DOCK,
				SUPPLIER_SNAME,
				PACKAGE_MODEL,
				PART_CLS,
				PART_UNITS,
				IS_BATCH,
				TRAN_TYPE,
				ORIGIN_PLACE,
				PART_PRICE,
				COST_CENTER,
				COMMENTS,
				SETTLED_FLAG,
				KEEPER,
				STOCKS_FID,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				TRAN_ORDER_TYPE,
				RUNSHEET_TYPE				 
				FROM [LES].[TT_WMM_TRAN_DETAILS] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_WMM_TRAN_DETAILS_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_WMM_TRAN_DETAILS]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_WMM_TRAN_DETAILS_INSERT =
			@"INSERT INTO [LES].[TT_WMM_TRAN_DETAILS] (
				FID,
				TRAN_NO,
				PLANT,
				BATCH_NO,
				PART_NO,
				BARCODE_DATA,
				WM_NO,
				ZONE_NO,
				DLOC,
				TARGET_WM,
				TARGET_ZONE,
				TARGET_DLOC,
				MEASURING_UNIT_NO,
				PACKAGE,
				MAX,
				MIN,
				NUM,
				BOX_NUM,
				TRAN_STATE,
				TRAN_DATE,
				SUPPLIER_NUM,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				ACTUAL_PACKAGE_QTY,
				ACTUAL_QTY,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				REQUIRED_PACKAGE_QTY,
				REQUIRED_QTY,
				BARCODE_TYPE,
				REQUIRED_DATE,
				PACHAGE_TYPE,
				LINE_POSITION,
				RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				DOCK,
				SUPPLIER_SNAME,
				PACKAGE_MODEL,
				PART_CLS,
				PART_UNITS,
				IS_BATCH,
				TRAN_TYPE,
				ORIGIN_PLACE,
				PART_PRICE,
				COST_CENTER,
				COMMENTS,
				SETTLED_FLAG,
				KEEPER,
				STOCKS_FID,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				TRAN_ORDER_TYPE,
				RUNSHEET_TYPE				 
			) VALUES (
				@FID,
				@TRAN_NO,
				@PLANT,
				@BATCH_NO,
				@PART_NO,
				@BARCODE_DATA,
				@WM_NO,
				@ZONE_NO,
				@DLOC,
				@TARGET_WM,
				@TARGET_ZONE,
				@TARGET_DLOC,
				@MEASURING_UNIT_NO,
				@PACKAGE,
				@MAX,
				@MIN,
				@NUM,
				@BOX_NUM,
				@TRAN_STATE,
				@TRAN_DATE,
				@SUPPLIER_NUM,
				@PART_CNAME,
				@BOX_PARTS,
				@PICKUP_SEQ_NO,
				@RDC_DLOC,
				@ACTUAL_PACKAGE_QTY,
				@ACTUAL_QTY,
				@INNER_LOCATION,
				@LOCATION,
				@STORAGE_LOCATION,
				@INHOUSE_PACKAGE_MODEL,
				@INHOUSE_PACKAGE,
				@REQUIRED_PACKAGE_QTY,
				@REQUIRED_QTY,
				@BARCODE_TYPE,
				@REQUIRED_DATE,
				@PACHAGE_TYPE,
				@LINE_POSITION,
				@RUNSHEET_NO,
				@PART_NICKNAME,
				@SUPPLIER_NAME,
				@DOCK,
				@SUPPLIER_SNAME,
				@PACKAGE_MODEL,
				@PART_CLS,
				@PART_UNITS,
				@IS_BATCH,
				@TRAN_TYPE,
				@ORIGIN_PLACE,
				@PART_PRICE,
				@COST_CENTER,
				@COMMENTS,
				@SETTLED_FLAG,
				@KEEPER,
				@STOCKS_FID,
				@VALID_FLAG,
				@CREATE_USER,
				GETDATE(),
				@MODIFY_USER,
				@MODIFY_DATE,
				@TRAN_ORDER_TYPE,
				@RUNSHEET_TYPE				 
			);SELECT @@IDENTITY;";
		private const string TT_WMM_TRAN_DETAILS_UPDATE =
			@"UPDATE [LES].[TT_WMM_TRAN_DETAILS] WITH(ROWLOCK) 
				SET FID=@FID,
				TRAN_NO=@TRAN_NO,
				PLANT=@PLANT,
				BATCH_NO=@BATCH_NO,
				PART_NO=@PART_NO,
				BARCODE_DATA=@BARCODE_DATA,
				WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				DLOC=@DLOC,
				TARGET_WM=@TARGET_WM,
				TARGET_ZONE=@TARGET_ZONE,
				TARGET_DLOC=@TARGET_DLOC,
				MEASURING_UNIT_NO=@MEASURING_UNIT_NO,
				PACKAGE=@PACKAGE,
				MAX=@MAX,
				MIN=@MIN,
				NUM=@NUM,
				BOX_NUM=@BOX_NUM,
				TRAN_STATE=@TRAN_STATE,
				TRAN_DATE=@TRAN_DATE,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				PART_CNAME=@PART_CNAME,
				BOX_PARTS=@BOX_PARTS,
				PICKUP_SEQ_NO=@PICKUP_SEQ_NO,
				RDC_DLOC=@RDC_DLOC,
				ACTUAL_PACKAGE_QTY=@ACTUAL_PACKAGE_QTY,
				ACTUAL_QTY=@ACTUAL_QTY,
				INNER_LOCATION=@INNER_LOCATION,
				LOCATION=@LOCATION,
				STORAGE_LOCATION=@STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL=@INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE=@INHOUSE_PACKAGE,
				REQUIRED_PACKAGE_QTY=@REQUIRED_PACKAGE_QTY,
				REQUIRED_QTY=@REQUIRED_QTY,
				BARCODE_TYPE=@BARCODE_TYPE,
				REQUIRED_DATE=@REQUIRED_DATE,
				PACHAGE_TYPE=@PACHAGE_TYPE,
				LINE_POSITION=@LINE_POSITION,
				RUNSHEET_NO=@RUNSHEET_NO,
				PART_NICKNAME=@PART_NICKNAME,
				SUPPLIER_NAME=@SUPPLIER_NAME,
				DOCK=@DOCK,
				SUPPLIER_SNAME=@SUPPLIER_SNAME,
				PACKAGE_MODEL=@PACKAGE_MODEL,
				PART_CLS=@PART_CLS,
				PART_UNITS=@PART_UNITS,
				IS_BATCH=@IS_BATCH,
				TRAN_TYPE=@TRAN_TYPE,
				ORIGIN_PLACE=@ORIGIN_PLACE,
				PART_PRICE=@PART_PRICE,
				COST_CENTER=@COST_CENTER,
				COMMENTS=@COMMENTS,
				SETTLED_FLAG=@SETTLED_FLAG,
				KEEPER=@KEEPER,
				STOCKS_FID=@STOCKS_FID,
				VALID_FLAG=@VALID_FLAG,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE,
				TRAN_ORDER_TYPE=@TRAN_ORDER_TYPE,
				RUNSHEET_TYPE=@RUNSHEET_TYPE				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TT_WMM_TRAN_DETAILS_DELETE =
			@"DELETE FROM [LES].[TT_WMM_TRAN_DETAILS] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get TranDetailsInfo
		/// </summary>
		/// <param name="ID">TranDetailsInfo Primary key </param>
		/// <returns></returns> 
		public TranDetailsInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_DETAILS_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateTranDetailsInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>TranDetailsInfo Collection </returns>
		public List<TranDetailsInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_WMM_TRAN_DETAILS_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>TranDetailsInfo Collection </returns>
		public List<TranDetailsInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<TranDetailsInfo> list = new List<TranDetailsInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateTranDetailsInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<TranDetailsInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_WMM_TRAN_DETAILS]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<TranDetailsInfo> list = new List<TranDetailsInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateTranDetailsInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_WMM_TRAN_DETAILS_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(TranDetailsInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_DETAILS_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@TRAN_NO", DbType.String, info.TranNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@BATCH_NO", DbType.String, info.BatchNo);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@BARCODE_DATA", DbType.String, info.BarcodeData);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@TARGET_WM", DbType.String, info.TargetWm);
			db.AddInParameter(dbCommand, "@TARGET_ZONE", DbType.String, info.TargetZone);
			db.AddInParameter(dbCommand, "@TARGET_DLOC", DbType.String, info.TargetDloc);
			db.AddInParameter(dbCommand, "@MEASURING_UNIT_NO", DbType.String, info.MeasuringUnitNo);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Decimal, info.Package);
			db.AddInParameter(dbCommand, "@MAX", DbType.Decimal, info.Max);
			db.AddInParameter(dbCommand, "@MIN", DbType.Decimal, info.Min);
			db.AddInParameter(dbCommand, "@NUM", DbType.Decimal, info.Num);
			db.AddInParameter(dbCommand, "@BOX_NUM", DbType.Decimal, info.BoxNum);
			db.AddInParameter(dbCommand, "@TRAN_STATE", DbType.Int32, info.TranState);
			db.AddInParameter(dbCommand, "@TRAN_DATE", DbType.DateTime, info.TranDate);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@PICKUP_SEQ_NO", DbType.Int32, info.PickupSeqNo);
			db.AddInParameter(dbCommand, "@RDC_DLOC", DbType.String, info.RdcDloc);
			db.AddInParameter(dbCommand, "@ACTUAL_PACKAGE_QTY", DbType.Int32, info.ActualPackageQty);
			db.AddInParameter(dbCommand, "@ACTUAL_QTY", DbType.Decimal, info.ActualQty);
			db.AddInParameter(dbCommand, "@INNER_LOCATION", DbType.String, info.InnerLocation);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@STORAGE_LOCATION", DbType.String, info.StorageLocation);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Decimal, info.InhousePackage);
			db.AddInParameter(dbCommand, "@REQUIRED_PACKAGE_QTY", DbType.Int32, info.RequiredPackageQty);
			db.AddInParameter(dbCommand, "@REQUIRED_QTY", DbType.Decimal, info.RequiredQty);
			db.AddInParameter(dbCommand, "@BARCODE_TYPE", DbType.String, info.BarcodeType);
			db.AddInParameter(dbCommand, "@REQUIRED_DATE", DbType.DateTime, info.RequiredDate);
			db.AddInParameter(dbCommand, "@PACHAGE_TYPE", DbType.String, info.PachageType);
			db.AddInParameter(dbCommand, "@LINE_POSITION", DbType.String, info.LinePosition);
			db.AddInParameter(dbCommand, "@RUNSHEET_NO", DbType.String, info.RunsheetNo);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
			db.AddInParameter(dbCommand, "@PART_CLS", DbType.String, info.PartCls);
			db.AddInParameter(dbCommand, "@PART_UNITS", DbType.String, info.PartUnits);
			db.AddInParameter(dbCommand, "@IS_BATCH", DbType.Int32, info.IsBatch);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.Int32, info.TranType);
			db.AddInParameter(dbCommand, "@ORIGIN_PLACE", DbType.String, info.OriginPlace);
			db.AddInParameter(dbCommand, "@PART_PRICE", DbType.Decimal, info.PartPrice);
			db.AddInParameter(dbCommand, "@COST_CENTER", DbType.String, info.CostCenter);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@SETTLED_FLAG", DbType.Boolean, info.SettledFlag);
			db.AddInParameter(dbCommand, "@KEEPER", DbType.String, info.Keeper);
			db.AddInParameter(dbCommand, "@STOCKS_FID", DbType.Guid, info.StocksFid);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@TRAN_ORDER_TYPE", DbType.Int32, info.TranOrderType);
			db.AddInParameter(dbCommand, "@RUNSHEET_TYPE", DbType.Int32, info.RunsheetType);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(TranDetailsInfo info)
		{
			return  
			@"insert into [LES].[TT_WMM_TRAN_DETAILS] (
				FID,
				TRAN_NO,
				PLANT,
				BATCH_NO,
				PART_NO,
				BARCODE_DATA,
				WM_NO,
				ZONE_NO,
				DLOC,
				TARGET_WM,
				TARGET_ZONE,
				TARGET_DLOC,
				MEASURING_UNIT_NO,
				PACKAGE,
				MAX,
				MIN,
				NUM,
				BOX_NUM,
				TRAN_STATE,
				TRAN_DATE,
				SUPPLIER_NUM,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				ACTUAL_PACKAGE_QTY,
				ACTUAL_QTY,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				REQUIRED_PACKAGE_QTY,
				REQUIRED_QTY,
				BARCODE_TYPE,
				REQUIRED_DATE,
				PACHAGE_TYPE,
				LINE_POSITION,
				RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				DOCK,
				SUPPLIER_SNAME,
				PACKAGE_MODEL,
				PART_CLS,
				PART_UNITS,
				IS_BATCH,
				TRAN_TYPE,
				ORIGIN_PLACE,
				PART_PRICE,
				COST_CENTER,
				COMMENTS,
				SETTLED_FLAG,
				KEEPER,
				STOCKS_FID,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				TRAN_ORDER_TYPE,
				RUNSHEET_TYPE				 
			) values ("+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.TranNo) ? "NULL" : "N'" + info.TranNo + "'") + ","+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.BatchNo) ? "NULL" : "N'" + info.BatchNo + "'") + ","+
				(string.IsNullOrEmpty(info.PartNo) ? "NULL" : "N'" + info.PartNo + "'") + ","+
				(string.IsNullOrEmpty(info.BarcodeData) ? "NULL" : "N'" + info.BarcodeData + "'") + ","+
				(string.IsNullOrEmpty(info.WmNo) ? "NULL" : "N'" + info.WmNo + "'") + ","+
				(string.IsNullOrEmpty(info.ZoneNo) ? "NULL" : "N'" + info.ZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.Dloc) ? "NULL" : "N'" + info.Dloc + "'") + ","+
				(string.IsNullOrEmpty(info.TargetWm) ? "NULL" : "N'" + info.TargetWm + "'") + ","+
				(string.IsNullOrEmpty(info.TargetZone) ? "NULL" : "N'" + info.TargetZone + "'") + ","+
				(string.IsNullOrEmpty(info.TargetDloc) ? "NULL" : "N'" + info.TargetDloc + "'") + ","+
				(string.IsNullOrEmpty(info.MeasuringUnitNo) ? "NULL" : "N'" + info.MeasuringUnitNo + "'") + ","+
				(info.Package == null ? "NULL" : "" + info.Package.GetValueOrDefault() + "") + ","+
				(info.Max == null ? "NULL" : "" + info.Max.GetValueOrDefault() + "") + ","+
				(info.Min == null ? "NULL" : "" + info.Min.GetValueOrDefault() + "") + ","+
				(info.Num == null ? "NULL" : "" + info.Num.GetValueOrDefault() + "") + ","+
				(info.BoxNum == null ? "NULL" : "" + info.BoxNum.GetValueOrDefault() + "") + ","+
				(info.TranState == null ? "NULL" : "" + info.TranState.GetValueOrDefault() + "") + ","+
				(info.TranDate == null ? "NULL" : "N'" + info.TranDate.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.PartCname) ? "NULL" : "N'" + info.PartCname + "'") + ","+
				(string.IsNullOrEmpty(info.BoxParts) ? "NULL" : "N'" + info.BoxParts + "'") + ","+
				(info.PickupSeqNo == null ? "NULL" : "" + info.PickupSeqNo.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.RdcDloc) ? "NULL" : "N'" + info.RdcDloc + "'") + ","+
				(info.ActualPackageQty == null ? "NULL" : "" + info.ActualPackageQty.GetValueOrDefault() + "") + ","+
				(info.ActualQty == null ? "NULL" : "" + info.ActualQty.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.InnerLocation) ? "NULL" : "N'" + info.InnerLocation + "'") + ","+
				(string.IsNullOrEmpty(info.Location) ? "NULL" : "N'" + info.Location + "'") + ","+
				(string.IsNullOrEmpty(info.StorageLocation) ? "NULL" : "N'" + info.StorageLocation + "'") + ","+
				(string.IsNullOrEmpty(info.InhousePackageModel) ? "NULL" : "N'" + info.InhousePackageModel + "'") + ","+
				(info.InhousePackage == null ? "NULL" : "" + info.InhousePackage.GetValueOrDefault() + "") + ","+
				(info.RequiredPackageQty == null ? "NULL" : "" + info.RequiredPackageQty.GetValueOrDefault() + "") + ","+
				(info.RequiredQty == null ? "NULL" : "" + info.RequiredQty.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.BarcodeType) ? "NULL" : "N'" + info.BarcodeType + "'") + ","+
				(info.RequiredDate == null ? "NULL" : "N'" + info.RequiredDate.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.PachageType) ? "NULL" : "N'" + info.PachageType + "'") + ","+
				(string.IsNullOrEmpty(info.LinePosition) ? "NULL" : "N'" + info.LinePosition + "'") + ","+
				(string.IsNullOrEmpty(info.RunsheetNo) ? "NULL" : "N'" + info.RunsheetNo + "'") + ","+
				(string.IsNullOrEmpty(info.PartNickname) ? "NULL" : "N'" + info.PartNickname + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierName) ? "NULL" : "N'" + info.SupplierName + "'") + ","+
				(string.IsNullOrEmpty(info.Dock) ? "NULL" : "N'" + info.Dock + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierSname) ? "NULL" : "N'" + info.SupplierSname + "'") + ","+
				(string.IsNullOrEmpty(info.PackageModel) ? "NULL" : "N'" + info.PackageModel + "'") + ","+
				(string.IsNullOrEmpty(info.PartCls) ? "NULL" : "N'" + info.PartCls + "'") + ","+
				(string.IsNullOrEmpty(info.PartUnits) ? "NULL" : "N'" + info.PartUnits + "'") + ","+
				(info.IsBatch == null ? "NULL" : "" + info.IsBatch.GetValueOrDefault() + "") + ","+
				(info.TranType == null ? "NULL" : "" + info.TranType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.OriginPlace) ? "NULL" : "N'" + info.OriginPlace + "'") + ","+
				(info.PartPrice == null ? "NULL" : "" + info.PartPrice.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.CostCenter) ? "NULL" : "N'" + info.CostCenter + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				(info.SettledFlag == null ? "NULL" : "" + (info.SettledFlag.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(string.IsNullOrEmpty(info.Keeper) ? "NULL" : "N'" + info.Keeper + "'") + ","+
				(info.StocksFid == null ? "NULL" : "N'" + info.StocksFid.GetValueOrDefault() + "'") + ","+
				"1" + ","+		
				"N'" + info.CreateUser + "'" + ","+		
				"GETDATE()" + ","+			
				"NULL" + ","+			
				"NULL" + ","+			
				(info.TranOrderType == null ? "NULL" : "" + info.TranOrderType.GetValueOrDefault() + "") + ","+
				(info.RunsheetType == null ? "NULL" : "" + info.RunsheetType.GetValueOrDefault() + "") + ");";				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(TranDetailsInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_DETAILS_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@TRAN_NO", DbType.String, info.TranNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@BATCH_NO", DbType.String, info.BatchNo);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@BARCODE_DATA", DbType.String, info.BarcodeData);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@TARGET_WM", DbType.String, info.TargetWm);
			db.AddInParameter(dbCommand, "@TARGET_ZONE", DbType.String, info.TargetZone);
			db.AddInParameter(dbCommand, "@TARGET_DLOC", DbType.String, info.TargetDloc);
			db.AddInParameter(dbCommand, "@MEASURING_UNIT_NO", DbType.String, info.MeasuringUnitNo);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Decimal, info.Package);
			db.AddInParameter(dbCommand, "@MAX", DbType.Decimal, info.Max);
			db.AddInParameter(dbCommand, "@MIN", DbType.Decimal, info.Min);
			db.AddInParameter(dbCommand, "@NUM", DbType.Decimal, info.Num);
			db.AddInParameter(dbCommand, "@BOX_NUM", DbType.Decimal, info.BoxNum);
			db.AddInParameter(dbCommand, "@TRAN_STATE", DbType.Int32, info.TranState);
			db.AddInParameter(dbCommand, "@TRAN_DATE", DbType.DateTime, info.TranDate);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@PICKUP_SEQ_NO", DbType.Int32, info.PickupSeqNo);
			db.AddInParameter(dbCommand, "@RDC_DLOC", DbType.String, info.RdcDloc);
			db.AddInParameter(dbCommand, "@ACTUAL_PACKAGE_QTY", DbType.Int32, info.ActualPackageQty);
			db.AddInParameter(dbCommand, "@ACTUAL_QTY", DbType.Decimal, info.ActualQty);
			db.AddInParameter(dbCommand, "@INNER_LOCATION", DbType.String, info.InnerLocation);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@STORAGE_LOCATION", DbType.String, info.StorageLocation);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Decimal, info.InhousePackage);
			db.AddInParameter(dbCommand, "@REQUIRED_PACKAGE_QTY", DbType.Int32, info.RequiredPackageQty);
			db.AddInParameter(dbCommand, "@REQUIRED_QTY", DbType.Decimal, info.RequiredQty);
			db.AddInParameter(dbCommand, "@BARCODE_TYPE", DbType.String, info.BarcodeType);
			db.AddInParameter(dbCommand, "@REQUIRED_DATE", DbType.DateTime, info.RequiredDate);
			db.AddInParameter(dbCommand, "@PACHAGE_TYPE", DbType.String, info.PachageType);
			db.AddInParameter(dbCommand, "@LINE_POSITION", DbType.String, info.LinePosition);
			db.AddInParameter(dbCommand, "@RUNSHEET_NO", DbType.String, info.RunsheetNo);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
			db.AddInParameter(dbCommand, "@PART_CLS", DbType.String, info.PartCls);
			db.AddInParameter(dbCommand, "@PART_UNITS", DbType.String, info.PartUnits);
			db.AddInParameter(dbCommand, "@IS_BATCH", DbType.Int32, info.IsBatch);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.Int32, info.TranType);
			db.AddInParameter(dbCommand, "@ORIGIN_PLACE", DbType.String, info.OriginPlace);
			db.AddInParameter(dbCommand, "@PART_PRICE", DbType.Decimal, info.PartPrice);
			db.AddInParameter(dbCommand, "@COST_CENTER", DbType.String, info.CostCenter);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@SETTLED_FLAG", DbType.Boolean, info.SettledFlag);
			db.AddInParameter(dbCommand, "@KEEPER", DbType.String, info.Keeper);
			db.AddInParameter(dbCommand, "@STOCKS_FID", DbType.Guid, info.StocksFid);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@TRAN_ORDER_TYPE", DbType.Int32, info.TranOrderType);
			db.AddInParameter(dbCommand, "@RUNSHEET_TYPE", DbType.Int32, info.RunsheetType);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">TranDetailsInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_DETAILS_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">TranDetailsInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TT_WMM_TRAN_DETAILS] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                                                              db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">TranDetailsInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TT_WMM_TRAN_DETAILS] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static TranDetailsInfo CreateTranDetailsInfo(IDataReader rdr)
		{
			TranDetailsInfo info = new TranDetailsInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.TranNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.BatchNo = DBConvert.GetString(rdr, rdr.GetOrdinal("BATCH_NO"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.BarcodeData = DBConvert.GetString(rdr, rdr.GetOrdinal("BARCODE_DATA"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.Dloc = DBConvert.GetString(rdr, rdr.GetOrdinal("DLOC"));			
			info.TargetWm = DBConvert.GetString(rdr, rdr.GetOrdinal("TARGET_WM"));			
			info.TargetZone = DBConvert.GetString(rdr, rdr.GetOrdinal("TARGET_ZONE"));			
			info.TargetDloc = DBConvert.GetString(rdr, rdr.GetOrdinal("TARGET_DLOC"));			
			info.MeasuringUnitNo = DBConvert.GetString(rdr, rdr.GetOrdinal("MEASURING_UNIT_NO"));			
			info.Package = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("PACKAGE"));			
			info.Max = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("MAX"));			
			info.Min = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("MIN"));			
			info.Num = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("NUM"));			
			info.BoxNum = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("BOX_NUM"));			
			info.TranState = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAN_STATE"));			
			info.TranDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("TRAN_DATE"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));			
			info.PickupSeqNo = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PICKUP_SEQ_NO"));			
			info.RdcDloc = DBConvert.GetString(rdr, rdr.GetOrdinal("RDC_DLOC"));			
			info.ActualPackageQty = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ACTUAL_PACKAGE_QTY"));			
			info.ActualQty = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ACTUAL_QTY"));			
			info.InnerLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("INNER_LOCATION"));			
			info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));			
			info.StorageLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("STORAGE_LOCATION"));			
			info.InhousePackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE_MODEL"));			
			info.InhousePackage = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE"));			
			info.RequiredPackageQty = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("REQUIRED_PACKAGE_QTY"));			
			info.RequiredQty = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("REQUIRED_QTY"));			
			info.BarcodeType = DBConvert.GetString(rdr, rdr.GetOrdinal("BARCODE_TYPE"));			
			info.RequiredDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("REQUIRED_DATE"));			
			info.PachageType = DBConvert.GetString(rdr, rdr.GetOrdinal("PACHAGE_TYPE"));			
			info.LinePosition = DBConvert.GetString(rdr, rdr.GetOrdinal("LINE_POSITION"));			
			info.RunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RUNSHEET_NO"));			
			info.PartNickname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NICKNAME"));			
			info.SupplierName = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NAME"));			
			info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));			
			info.SupplierSname = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_SNAME"));			
			info.PackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("PACKAGE_MODEL"));			
			info.PartCls = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CLS"));			
			info.PartUnits = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_UNITS"));			
			info.IsBatch = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_BATCH"));			
			info.TranType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAN_TYPE"));			
			info.OriginPlace = DBConvert.GetString(rdr, rdr.GetOrdinal("ORIGIN_PLACE"));			
			info.PartPrice = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("PART_PRICE"));			
			info.CostCenter = DBConvert.GetString(rdr, rdr.GetOrdinal("COST_CENTER"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.SettledFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("SETTLED_FLAG"));			
			info.Keeper = DBConvert.GetString(rdr, rdr.GetOrdinal("KEEPER"));			
			info.StocksFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("STOCKS_FID"));			
			info.ValidFlag = DBConvert.GetBool(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.TranOrderType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAN_ORDER_TYPE"));			
			info.RunsheetType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("RUNSHEET_TYPE"));			
			return info;
		}
		
		#endregion
	}
}
