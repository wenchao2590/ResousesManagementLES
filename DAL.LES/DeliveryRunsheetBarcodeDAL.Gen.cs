#region Declaim
//---------------------------------------------------------------------------
// Name:		DeliveryRunsheetBarcodeDAL
// Function: 	Expose data in table TT_SPM_DELIVERY_RUNSHEET_BARCODE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月28日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// DeliveryRunsheetBarcodeDAL对应表[TT_SPM_DELIVERY_RUNSHEET_BARCODE]
    /// </summary>
    public partial class DeliveryRunsheetBarcodeDAL : BusinessObjectProvider<DeliveryRunsheetBarcodeInfo>
	{
		#region Sql Statements
		private const string TT_SPM_DELIVERY_RUNSHEET_BARCODE_SELECT_BY_ID =
			@"SELECT BARCODE_DETAIL_ID,
				PLAN_ASN_RUNSHEET_NO,
				SUPPLIER_NUM,
				PART_NO,
				BARCODE_DATA,
				IDENTIFY_PART_NO,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				MEASURING_UNIT_NO,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				REQUIRED_INBOUND_PACKAGE_QTY,
				PRINT_TIMES,
				PRINT_DATE,
				WMS_SEND_TIME,
				WMS_SEND_STATUS,
				BARCODE_TYPE,
				REQUIRED_DATE,
				BATTH_NO,
				PACHAGE_TYPE,
				LINE_POSITION,
				TWD_RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				PLANT,
				DOCK,
				SUPPLIER_SNAME,
				COMMENTS,
				CREATE_DATE,
				UPDATE_DATE,
				UPDATE_USER,
				CREATE_USER,
				PRODUCT_LINE,
				BAG_NUM,
				IS_PRINTED,
				TIME_AND,
				RFID_NO,
				DLOC,
				PRODUCTION_BATCH_NO,
				WM_NO,
				PRINT_SUPPLEMENT,
				BARCODE_STATUS,
				NET_WEIGHT,
				IN_BATCH_NO,
				ZONE_NO				  
				FROM [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH(NOLOCK) WHERE 1=1  AND BARCODE_DETAIL_ID =@BARCODE_DETAIL_ID;";
			
		private const string TT_SPM_DELIVERY_RUNSHEET_BARCODE_SELECT = 
			@"SELECT BARCODE_DETAIL_ID,
				PLAN_ASN_RUNSHEET_NO,
				SUPPLIER_NUM,
				PART_NO,
				BARCODE_DATA,
				IDENTIFY_PART_NO,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				MEASURING_UNIT_NO,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				REQUIRED_INBOUND_PACKAGE_QTY,
				PRINT_TIMES,
				PRINT_DATE,
				WMS_SEND_TIME,
				WMS_SEND_STATUS,
				BARCODE_TYPE,
				REQUIRED_DATE,
				BATTH_NO,
				PACHAGE_TYPE,
				LINE_POSITION,
				TWD_RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				PLANT,
				DOCK,
				SUPPLIER_SNAME,
				COMMENTS,
				CREATE_DATE,
				UPDATE_DATE,
				UPDATE_USER,
				CREATE_USER,
				PRODUCT_LINE,
				BAG_NUM,
				IS_PRINTED,
				TIME_AND,
				RFID_NO,
				DLOC,
				PRODUCTION_BATCH_NO,
				WM_NO,
				PRINT_SUPPLEMENT,
				BARCODE_STATUS,
				NET_WEIGHT,
				IN_BATCH_NO,
				ZONE_NO				 
				FROM [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TT_SPM_DELIVERY_RUNSHEET_BARCODE_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TT_SPM_DELIVERY_RUNSHEET_BARCODE_INSERT =
			@"INSERT INTO [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] (
				PLAN_ASN_RUNSHEET_NO,
				SUPPLIER_NUM,
				PART_NO,
				BARCODE_DATA,
				IDENTIFY_PART_NO,
				PART_CNAME,
				BOX_PARTS,
				PICKUP_SEQ_NO,
				RDC_DLOC,
				MEASURING_UNIT_NO,
				INNER_LOCATION,
				LOCATION,
				STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL,
				REQUIRED_INBOUND_PACKAGE_QTY,
				PRINT_TIMES,
				PRINT_DATE,
				WMS_SEND_TIME,
				WMS_SEND_STATUS,
				BARCODE_TYPE,
				REQUIRED_DATE,
				BATTH_NO,
				PACHAGE_TYPE,
				LINE_POSITION,
				TWD_RUNSHEET_NO,
				PART_NICKNAME,
				SUPPLIER_NAME,
				PLANT,
				DOCK,
				SUPPLIER_SNAME,
				COMMENTS,
				CREATE_DATE,
				UPDATE_DATE,
				UPDATE_USER,
				CREATE_USER,
				PRODUCT_LINE,
				BAG_NUM,
				IS_PRINTED,
				TIME_AND,
				RFID_NO,
				DLOC,
				PRODUCTION_BATCH_NO,
				WM_NO,
				PRINT_SUPPLEMENT,
				BARCODE_STATUS,
				NET_WEIGHT,
				IN_BATCH_NO,
				ZONE_NO				 
			) VALUES (
				@PLAN_ASN_RUNSHEET_NO,
				@SUPPLIER_NUM,
				@PART_NO,
				@BARCODE_DATA,
				@IDENTIFY_PART_NO,
				@PART_CNAME,
				@BOX_PARTS,
				@PICKUP_SEQ_NO,
				@RDC_DLOC,
				@MEASURING_UNIT_NO,
				@INNER_LOCATION,
				@LOCATION,
				@STORAGE_LOCATION,
				@INHOUSE_PACKAGE_MODEL,
				@REQUIRED_INBOUND_PACKAGE_QTY,
				@PRINT_TIMES,
				@PRINT_DATE,
				@WMS_SEND_TIME,
				@WMS_SEND_STATUS,
				@BARCODE_TYPE,
				@REQUIRED_DATE,
				@BATTH_NO,
				@PACHAGE_TYPE,
				@LINE_POSITION,
				@TWD_RUNSHEET_NO,
				@PART_NICKNAME,
				@SUPPLIER_NAME,
				@PLANT,
				@DOCK,
				@SUPPLIER_SNAME,
				@COMMENTS,
				@CREATE_DATE,
				@UPDATE_DATE,
				@UPDATE_USER,
				@CREATE_USER,
				@PRODUCT_LINE,
				@BAG_NUM,
				@IS_PRINTED,
				@TIME_AND,
				@RFID_NO,
				@DLOC,
				@PRODUCTION_BATCH_NO,
				@WM_NO,
				@PRINT_SUPPLEMENT,
				@BARCODE_STATUS,
				@NET_WEIGHT,
				@IN_BATCH_NO,
				@ZONE_NO				 
			);SELECT @@IDENTITY;";
		private const string TT_SPM_DELIVERY_RUNSHEET_BARCODE_UPDATE =
			@"UPDATE [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH(ROWLOCK) 
				SET PLAN_ASN_RUNSHEET_NO=@PLAN_ASN_RUNSHEET_NO,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				PART_NO=@PART_NO,
				BARCODE_DATA=@BARCODE_DATA,
				IDENTIFY_PART_NO=@IDENTIFY_PART_NO,
				PART_CNAME=@PART_CNAME,
				BOX_PARTS=@BOX_PARTS,
				PICKUP_SEQ_NO=@PICKUP_SEQ_NO,
				RDC_DLOC=@RDC_DLOC,
				MEASURING_UNIT_NO=@MEASURING_UNIT_NO,
				INNER_LOCATION=@INNER_LOCATION,
				LOCATION=@LOCATION,
				STORAGE_LOCATION=@STORAGE_LOCATION,
				INHOUSE_PACKAGE_MODEL=@INHOUSE_PACKAGE_MODEL,
				REQUIRED_INBOUND_PACKAGE_QTY=@REQUIRED_INBOUND_PACKAGE_QTY,
				PRINT_TIMES=@PRINT_TIMES,
				PRINT_DATE=@PRINT_DATE,
				WMS_SEND_TIME=@WMS_SEND_TIME,
				WMS_SEND_STATUS=@WMS_SEND_STATUS,
				BARCODE_TYPE=@BARCODE_TYPE,
				REQUIRED_DATE=@REQUIRED_DATE,
				BATTH_NO=@BATTH_NO,
				PACHAGE_TYPE=@PACHAGE_TYPE,
				LINE_POSITION=@LINE_POSITION,
				TWD_RUNSHEET_NO=@TWD_RUNSHEET_NO,
				PART_NICKNAME=@PART_NICKNAME,
				SUPPLIER_NAME=@SUPPLIER_NAME,
				PLANT=@PLANT,
				DOCK=@DOCK,
				SUPPLIER_SNAME=@SUPPLIER_SNAME,
				COMMENTS=@COMMENTS,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_DATE=@UPDATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				CREATE_USER=@CREATE_USER,
				PRODUCT_LINE=@PRODUCT_LINE,
				BAG_NUM=@BAG_NUM,
				IS_PRINTED=@IS_PRINTED,
				TIME_AND=@TIME_AND,
				RFID_NO=@RFID_NO,
				DLOC=@DLOC,
				PRODUCTION_BATCH_NO=@PRODUCTION_BATCH_NO,
				WM_NO=@WM_NO,
				PRINT_SUPPLEMENT=@PRINT_SUPPLEMENT,
				BARCODE_STATUS=@BARCODE_STATUS,
				NET_WEIGHT=@NET_WEIGHT,
				IN_BATCH_NO=@IN_BATCH_NO,
				ZONE_NO=@ZONE_NO				 
				WHERE 1=1  AND BARCODE_DETAIL_ID =@BARCODE_DETAIL_ID;";

		private const string TT_SPM_DELIVERY_RUNSHEET_BARCODE_DELETE =
			@"DELETE FROM [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH(ROWLOCK)  
				WHERE 1=1  AND BARCODE_DETAIL_ID =@BARCODE_DETAIL_ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get DeliveryRunsheetBarcodeInfo
		/// </summary>
		/// <param name="BARCODE_DETAIL_ID">DeliveryRunsheetBarcodeInfo Primary key </param>
		/// <returns></returns> 
		public DeliveryRunsheetBarcodeInfo GetInfo(int aBarcodeDetailId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_DELIVERY_RUNSHEET_BARCODE_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@BARCODE_DETAIL_ID", DbType.Int32, aBarcodeDetailId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateDeliveryRunsheetBarcodeInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>DeliveryRunsheetBarcodeInfo Collection </returns>
		public List<DeliveryRunsheetBarcodeInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_SPM_DELIVERY_RUNSHEET_BARCODE_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>DeliveryRunsheetBarcodeInfo Collection </returns>
		public List<DeliveryRunsheetBarcodeInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<DeliveryRunsheetBarcodeInfo> list = new List<DeliveryRunsheetBarcodeInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateDeliveryRunsheetBarcodeInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<DeliveryRunsheetBarcodeInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[BARCODE_DETAIL_ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<DeliveryRunsheetBarcodeInfo> list = new List<DeliveryRunsheetBarcodeInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateDeliveryRunsheetBarcodeInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_SPM_DELIVERY_RUNSHEET_BARCODE_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(DeliveryRunsheetBarcodeInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_DELIVERY_RUNSHEET_BARCODE_INSERT);			
			db.AddInParameter(dbCommand, "@PLAN_ASN_RUNSHEET_NO", DbType.String, info.PlanAsnRunsheetNo);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@BARCODE_DATA", DbType.String, info.BarcodeData);
			db.AddInParameter(dbCommand, "@IDENTIFY_PART_NO", DbType.String, info.IdentifyPartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@PICKUP_SEQ_NO", DbType.Int32, info.PickupSeqNo);
			db.AddInParameter(dbCommand, "@RDC_DLOC", DbType.AnsiString, info.RdcDloc);
			db.AddInParameter(dbCommand, "@MEASURING_UNIT_NO", DbType.AnsiString, info.MeasuringUnitNo);
			db.AddInParameter(dbCommand, "@INNER_LOCATION", DbType.String, info.InnerLocation);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@STORAGE_LOCATION", DbType.String, info.StorageLocation);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@REQUIRED_INBOUND_PACKAGE_QTY", DbType.Int32, info.RequiredInboundPackageQty);
			db.AddInParameter(dbCommand, "@PRINT_TIMES", DbType.Int32, info.PrintTimes);
			db.AddInParameter(dbCommand, "@PRINT_DATE", DbType.DateTime, info.PrintDate);
			db.AddInParameter(dbCommand, "@WMS_SEND_TIME", DbType.DateTime, info.WmsSendTime);
			db.AddInParameter(dbCommand, "@WMS_SEND_STATUS", DbType.Int32, info.WmsSendStatus);
			db.AddInParameter(dbCommand, "@BARCODE_TYPE", DbType.String, info.BarcodeType);
			db.AddInParameter(dbCommand, "@REQUIRED_DATE", DbType.DateTime, info.RequiredDate);
			db.AddInParameter(dbCommand, "@BATTH_NO", DbType.String, info.BatthNo);
			db.AddInParameter(dbCommand, "@PACHAGE_TYPE", DbType.String, info.PachageType);
			db.AddInParameter(dbCommand, "@LINE_POSITION", DbType.String, info.LinePosition);
			db.AddInParameter(dbCommand, "@TWD_RUNSHEET_NO", DbType.AnsiString, info.TwdRunsheetNo);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@PRODUCT_LINE", DbType.String, info.ProductLine);
			db.AddInParameter(dbCommand, "@BAG_NUM", DbType.String, info.BagNum);
			db.AddInParameter(dbCommand, "@IS_PRINTED", DbType.Int32, info.IsPrinted);
			db.AddInParameter(dbCommand, "@TIME_AND", DbType.String, info.TimeAnd);
			db.AddInParameter(dbCommand, "@RFID_NO", DbType.String, info.RfidNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@PRODUCTION_BATCH_NO", DbType.String, info.ProductionBatchNo);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@PRINT_SUPPLEMENT", DbType.Int32, info.PrintSupplement);
			db.AddInParameter(dbCommand, "@BARCODE_STATUS", DbType.Int32, info.BarcodeStatus);
			db.AddInParameter(dbCommand, "@NET_WEIGHT", DbType.Decimal, info.NetWeight);
			db.AddInParameter(dbCommand, "@IN_BATCH_NO", DbType.String, info.InBatchNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(DeliveryRunsheetBarcodeInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_DELIVERY_RUNSHEET_BARCODE_UPDATE);				
			db.AddInParameter(dbCommand, "@BARCODE_DETAIL_ID", DbType.Int32, info.BarcodeDetailId);
			db.AddInParameter(dbCommand, "@PLAN_ASN_RUNSHEET_NO", DbType.String, info.PlanAsnRunsheetNo);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@BARCODE_DATA", DbType.String, info.BarcodeData);
			db.AddInParameter(dbCommand, "@IDENTIFY_PART_NO", DbType.String, info.IdentifyPartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@PICKUP_SEQ_NO", DbType.Int32, info.PickupSeqNo);
			db.AddInParameter(dbCommand, "@RDC_DLOC", DbType.AnsiString, info.RdcDloc);
			db.AddInParameter(dbCommand, "@MEASURING_UNIT_NO", DbType.AnsiString, info.MeasuringUnitNo);
			db.AddInParameter(dbCommand, "@INNER_LOCATION", DbType.String, info.InnerLocation);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@STORAGE_LOCATION", DbType.String, info.StorageLocation);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@REQUIRED_INBOUND_PACKAGE_QTY", DbType.Int32, info.RequiredInboundPackageQty);
			db.AddInParameter(dbCommand, "@PRINT_TIMES", DbType.Int32, info.PrintTimes);
			db.AddInParameter(dbCommand, "@PRINT_DATE", DbType.DateTime, info.PrintDate);
			db.AddInParameter(dbCommand, "@WMS_SEND_TIME", DbType.DateTime, info.WmsSendTime);
			db.AddInParameter(dbCommand, "@WMS_SEND_STATUS", DbType.Int32, info.WmsSendStatus);
			db.AddInParameter(dbCommand, "@BARCODE_TYPE", DbType.String, info.BarcodeType);
			db.AddInParameter(dbCommand, "@REQUIRED_DATE", DbType.DateTime, info.RequiredDate);
			db.AddInParameter(dbCommand, "@BATTH_NO", DbType.String, info.BatthNo);
			db.AddInParameter(dbCommand, "@PACHAGE_TYPE", DbType.String, info.PachageType);
			db.AddInParameter(dbCommand, "@LINE_POSITION", DbType.String, info.LinePosition);
			db.AddInParameter(dbCommand, "@TWD_RUNSHEET_NO", DbType.AnsiString, info.TwdRunsheetNo);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@PRODUCT_LINE", DbType.String, info.ProductLine);
			db.AddInParameter(dbCommand, "@BAG_NUM", DbType.String, info.BagNum);
			db.AddInParameter(dbCommand, "@IS_PRINTED", DbType.Int32, info.IsPrinted);
			db.AddInParameter(dbCommand, "@TIME_AND", DbType.String, info.TimeAnd);
			db.AddInParameter(dbCommand, "@RFID_NO", DbType.String, info.RfidNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@PRODUCTION_BATCH_NO", DbType.String, info.ProductionBatchNo);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@PRINT_SUPPLEMENT", DbType.Int32, info.PrintSupplement);
			db.AddInParameter(dbCommand, "@BARCODE_STATUS", DbType.Int32, info.BarcodeStatus);
			db.AddInParameter(dbCommand, "@NET_WEIGHT", DbType.Decimal, info.NetWeight);
			db.AddInParameter(dbCommand, "@IN_BATCH_NO", DbType.String, info.InBatchNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="BARCODE_DETAIL_ID">DeliveryRunsheetBarcodeInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aBarcodeDetailId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_DELIVERY_RUNSHEET_BARCODE_DELETE);
		    db.AddInParameter(dbCommand, "@BARCODE_DETAIL_ID", DbType.Int32, aBarcodeDetailId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="BARCODE_DETAIL_ID">DeliveryRunsheetBarcodeInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aBarcodeDetailId)
		{
		    string sql = "update [LES].[TT_SPM_DELIVERY_RUNSHEET_BARCODE] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND BARCODE_DETAIL_ID =@BARCODE_DETAIL_ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@BARCODE_DETAIL_ID", DbType.Int32, aBarcodeDetailId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static DeliveryRunsheetBarcodeInfo CreateDeliveryRunsheetBarcodeInfo(IDataReader rdr)
		{
			DeliveryRunsheetBarcodeInfo info = new DeliveryRunsheetBarcodeInfo();
			info.BarcodeDetailId = DBConvert.GetInt32(rdr, rdr.GetOrdinal("BARCODE_DETAIL_ID"));			
			info.PlanAsnRunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PLAN_ASN_RUNSHEET_NO"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.BarcodeData = DBConvert.GetString(rdr, rdr.GetOrdinal("BARCODE_DATA"));			
			info.IdentifyPartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("IDENTIFY_PART_NO"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));			
			info.PickupSeqNo = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PICKUP_SEQ_NO"));			
			info.RdcDloc = DBConvert.GetString(rdr, rdr.GetOrdinal("RDC_DLOC"));			
			info.MeasuringUnitNo = DBConvert.GetString(rdr, rdr.GetOrdinal("MEASURING_UNIT_NO"));			
			info.InnerLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("INNER_LOCATION"));			
			info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));			
			info.StorageLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("STORAGE_LOCATION"));			
			info.InhousePackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE_MODEL"));			
			info.RequiredInboundPackageQty = DBConvert.GetInt32(rdr, rdr.GetOrdinal("REQUIRED_INBOUND_PACKAGE_QTY"));			
			info.PrintTimes = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PRINT_TIMES"));			
			info.PrintDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PRINT_DATE"));			
			info.WmsSendTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("WMS_SEND_TIME"));			
			info.WmsSendStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("WMS_SEND_STATUS"));			
			info.BarcodeType = DBConvert.GetString(rdr, rdr.GetOrdinal("BARCODE_TYPE"));			
			info.RequiredDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("REQUIRED_DATE"));			
			info.BatthNo = DBConvert.GetString(rdr, rdr.GetOrdinal("BATTH_NO"));			
			info.PachageType = DBConvert.GetString(rdr, rdr.GetOrdinal("PACHAGE_TYPE"));			
			info.LinePosition = DBConvert.GetString(rdr, rdr.GetOrdinal("LINE_POSITION"));			
			info.TwdRunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TWD_RUNSHEET_NO"));			
			info.PartNickname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NICKNAME"));			
			info.SupplierName = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NAME"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));			
			info.SupplierSname = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_SNAME"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.ProductLine = DBConvert.GetString(rdr, rdr.GetOrdinal("PRODUCT_LINE"));			
			info.BagNum = DBConvert.GetString(rdr, rdr.GetOrdinal("BAG_NUM"));			
			info.IsPrinted = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_PRINTED"));			
			info.TimeAnd = DBConvert.GetString(rdr, rdr.GetOrdinal("TIME_AND"));			
			info.RfidNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RFID_NO"));			
			info.Dloc = DBConvert.GetString(rdr, rdr.GetOrdinal("DLOC"));			
			info.ProductionBatchNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PRODUCTION_BATCH_NO"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.PrintSupplement = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PRINT_SUPPLEMENT"));			
			info.BarcodeStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BARCODE_STATUS"));			
			info.NetWeight = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("NET_WEIGHT"));			
			info.InBatchNo = DBConvert.GetString(rdr, rdr.GetOrdinal("IN_BATCH_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			return info;
		}
		
		#endregion
	}
}
