#region Declaim
//---------------------------------------------------------------------------
// Name:		AssemblyLineDAL
// Function: 	Expose data in table TM_BAS_ASSEMBLY_LINE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年8月21日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// AssemblyLineDAL对应表[TM_BAS_ASSEMBLY_LINE]
    /// </summary>
    public partial class AssemblyLineDAL : BusinessObjectProvider<AssemblyLineInfo>
	{
		#region Sql Statements
		private const string TM_BAS_ASSEMBLY_LINE_SELECT_BY_ID =
			@"SELECT PLANT,
				WORKSHOP,
				ASSEMBLY_LINE,
				ASSEMBLY_LINE_NAME,
				ASSEMBLY_LINE_NICKNAME,
				ADDRESS,
				ASSEMBLY_LINE_TYPE,
				ASSEMBLY_LINE_PULSE,
				JPH,
				TIME_REFERENCE_TYPE,
				CMANAGER,
				EMANAGER,
				WORK_SCHEDULE_TYPE,
				FIS_LINE_CODE,
				PLANT_ZONE,
				SAP_ASSEMBLY_LINE,
				COMMENTS,
				MODIFY_USER,
				CREATE_USER,
				ID,
				MODIFY_DATE,
				CREATE_DATE,
				FID,
				VALID_FLAG				  
				FROM [LES].[TM_BAS_ASSEMBLY_LINE] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TM_BAS_ASSEMBLY_LINE_SELECT = 
			@"SELECT PLANT,
				WORKSHOP,
				ASSEMBLY_LINE,
				ASSEMBLY_LINE_NAME,
				ASSEMBLY_LINE_NICKNAME,
				ADDRESS,
				ASSEMBLY_LINE_TYPE,
				ASSEMBLY_LINE_PULSE,
				JPH,
				TIME_REFERENCE_TYPE,
				CMANAGER,
				EMANAGER,
				WORK_SCHEDULE_TYPE,
				FIS_LINE_CODE,
				PLANT_ZONE,
				SAP_ASSEMBLY_LINE,
				COMMENTS,
				MODIFY_USER,
				CREATE_USER,
				ID,
				MODIFY_DATE,
				CREATE_DATE,
				FID,
				VALID_FLAG				 
				FROM [LES].[TM_BAS_ASSEMBLY_LINE] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TM_BAS_ASSEMBLY_LINE_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_BAS_ASSEMBLY_LINE]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TM_BAS_ASSEMBLY_LINE_INSERT =
			@"INSERT INTO [LES].[TM_BAS_ASSEMBLY_LINE] (
				PLANT,
				WORKSHOP,
				ASSEMBLY_LINE,
				ASSEMBLY_LINE_NAME,
				ASSEMBLY_LINE_NICKNAME,
				ADDRESS,
				ASSEMBLY_LINE_TYPE,
				ASSEMBLY_LINE_PULSE,
				JPH,
				TIME_REFERENCE_TYPE,
				CMANAGER,
				EMANAGER,
				WORK_SCHEDULE_TYPE,
				FIS_LINE_CODE,
				PLANT_ZONE,
				SAP_ASSEMBLY_LINE,
				COMMENTS,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				CREATE_DATE,
				FID,
				VALID_FLAG				 
			) VALUES (
				@PLANT,
				@WORKSHOP,
				@ASSEMBLY_LINE,
				@ASSEMBLY_LINE_NAME,
				@ASSEMBLY_LINE_NICKNAME,
				@ADDRESS,
				@ASSEMBLY_LINE_TYPE,
				@ASSEMBLY_LINE_PULSE,
				@JPH,
				@TIME_REFERENCE_TYPE,
				@CMANAGER,
				@EMANAGER,
				@WORK_SCHEDULE_TYPE,
				@FIS_LINE_CODE,
				@PLANT_ZONE,
				@SAP_ASSEMBLY_LINE,
				@COMMENTS,
				@MODIFY_USER,
				@CREATE_USER,
				@MODIFY_DATE,
				GETDATE(),
				@FID,
				@VALID_FLAG				 
			);SELECT @@IDENTITY;";
		private const string TM_BAS_ASSEMBLY_LINE_UPDATE =
			@"UPDATE [LES].[TM_BAS_ASSEMBLY_LINE] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				WORKSHOP=@WORKSHOP,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				ASSEMBLY_LINE_NAME=@ASSEMBLY_LINE_NAME,
				ASSEMBLY_LINE_NICKNAME=@ASSEMBLY_LINE_NICKNAME,
				ADDRESS=@ADDRESS,
				ASSEMBLY_LINE_TYPE=@ASSEMBLY_LINE_TYPE,
				ASSEMBLY_LINE_PULSE=@ASSEMBLY_LINE_PULSE,
				JPH=@JPH,
				TIME_REFERENCE_TYPE=@TIME_REFERENCE_TYPE,
				CMANAGER=@CMANAGER,
				EMANAGER=@EMANAGER,
				WORK_SCHEDULE_TYPE=@WORK_SCHEDULE_TYPE,
				FIS_LINE_CODE=@FIS_LINE_CODE,
				PLANT_ZONE=@PLANT_ZONE,
				SAP_ASSEMBLY_LINE=@SAP_ASSEMBLY_LINE,
				COMMENTS=@COMMENTS,
				MODIFY_USER=@MODIFY_USER,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				CREATE_DATE=@CREATE_DATE,
				FID=@FID,
				VALID_FLAG=@VALID_FLAG				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TM_BAS_ASSEMBLY_LINE_DELETE =
			@"DELETE FROM [LES].[TM_BAS_ASSEMBLY_LINE] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get AssemblyLineInfo
		/// </summary>
		/// <param name="ID">AssemblyLineInfo Primary key </param>
		/// <returns></returns> 
		public AssemblyLineInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_ASSEMBLY_LINE_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateAssemblyLineInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>AssemblyLineInfo Collection </returns>
		public List<AssemblyLineInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_BAS_ASSEMBLY_LINE_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>AssemblyLineInfo Collection </returns>
		public List<AssemblyLineInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<AssemblyLineInfo> list = new List<AssemblyLineInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateAssemblyLineInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<AssemblyLineInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_BAS_ASSEMBLY_LINE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<AssemblyLineInfo> list = new List<AssemblyLineInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateAssemblyLineInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_BAS_ASSEMBLY_LINE_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(AssemblyLineInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_ASSEMBLY_LINE_INSERT);			
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_NAME", DbType.String, info.AssemblyLineName);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_NICKNAME", DbType.String, info.AssemblyLineNickname);
			db.AddInParameter(dbCommand, "@ADDRESS", DbType.String, info.Address);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_TYPE", DbType.Int32, info.AssemblyLineType);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_PULSE", DbType.String, info.AssemblyLinePulse);
			db.AddInParameter(dbCommand, "@JPH", DbType.Int32, info.Jph);
			db.AddInParameter(dbCommand, "@TIME_REFERENCE_TYPE", DbType.Int32, info.TimeReferenceType);
			db.AddInParameter(dbCommand, "@CMANAGER", DbType.String, info.Cmanager);
			db.AddInParameter(dbCommand, "@EMANAGER", DbType.String, info.Emanager);
			db.AddInParameter(dbCommand, "@WORK_SCHEDULE_TYPE", DbType.Int32, info.WorkScheduleType);
			db.AddInParameter(dbCommand, "@FIS_LINE_CODE", DbType.String, info.FisLineCode);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@SAP_ASSEMBLY_LINE", DbType.String, info.SapAssemblyLine);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(AssemblyLineInfo info)
		{
			return  
			@"insert into [LES].[TM_BAS_ASSEMBLY_LINE] (
				PLANT,
				WORKSHOP,
				ASSEMBLY_LINE,
				ASSEMBLY_LINE_NAME,
				ASSEMBLY_LINE_NICKNAME,
				ADDRESS,
				ASSEMBLY_LINE_TYPE,
				ASSEMBLY_LINE_PULSE,
				JPH,
				TIME_REFERENCE_TYPE,
				CMANAGER,
				EMANAGER,
				WORK_SCHEDULE_TYPE,
				FIS_LINE_CODE,
				PLANT_ZONE,
				SAP_ASSEMBLY_LINE,
				COMMENTS,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				CREATE_DATE,
				FID,
				VALID_FLAG				 
			) values ("+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.Workshop) ? "NULL" : "N'" + info.Workshop + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLine) ? "NULL" : "N'" + info.AssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLineName) ? "NULL" : "N'" + info.AssemblyLineName + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLineNickname) ? "NULL" : "N'" + info.AssemblyLineNickname + "'") + ","+
				(string.IsNullOrEmpty(info.Address) ? "NULL" : "N'" + info.Address + "'") + ","+
				(info.AssemblyLineType == null ? "NULL" : "" + info.AssemblyLineType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.AssemblyLinePulse) ? "NULL" : "N'" + info.AssemblyLinePulse + "'") + ","+
				(info.Jph == null ? "NULL" : "" + info.Jph.GetValueOrDefault() + "") + ","+
				(info.TimeReferenceType == null ? "NULL" : "" + info.TimeReferenceType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Cmanager) ? "NULL" : "N'" + info.Cmanager + "'") + ","+
				(string.IsNullOrEmpty(info.Emanager) ? "NULL" : "N'" + info.Emanager + "'") + ","+
				(info.WorkScheduleType == null ? "NULL" : "" + info.WorkScheduleType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.FisLineCode) ? "NULL" : "N'" + info.FisLineCode + "'") + ","+
				(string.IsNullOrEmpty(info.PlantZone) ? "NULL" : "N'" + info.PlantZone + "'") + ","+
				(string.IsNullOrEmpty(info.SapAssemblyLine) ? "NULL" : "N'" + info.SapAssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				"NULL" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				"NULL" + ","+			
				"GETDATE()" + ","+			
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				"1" + ");";		
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(AssemblyLineInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_ASSEMBLY_LINE_UPDATE);				
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_NAME", DbType.String, info.AssemblyLineName);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_NICKNAME", DbType.String, info.AssemblyLineNickname);
			db.AddInParameter(dbCommand, "@ADDRESS", DbType.String, info.Address);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_TYPE", DbType.Int32, info.AssemblyLineType);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE_PULSE", DbType.String, info.AssemblyLinePulse);
			db.AddInParameter(dbCommand, "@JPH", DbType.Int32, info.Jph);
			db.AddInParameter(dbCommand, "@TIME_REFERENCE_TYPE", DbType.Int32, info.TimeReferenceType);
			db.AddInParameter(dbCommand, "@CMANAGER", DbType.String, info.Cmanager);
			db.AddInParameter(dbCommand, "@EMANAGER", DbType.String, info.Emanager);
			db.AddInParameter(dbCommand, "@WORK_SCHEDULE_TYPE", DbType.Int32, info.WorkScheduleType);
			db.AddInParameter(dbCommand, "@FIS_LINE_CODE", DbType.String, info.FisLineCode);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@SAP_ASSEMBLY_LINE", DbType.String, info.SapAssemblyLine);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">AssemblyLineInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_ASSEMBLY_LINE_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">AssemblyLineInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TM_BAS_ASSEMBLY_LINE] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
                    			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
    db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">AssemblyLineInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TM_BAS_ASSEMBLY_LINE] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static AssemblyLineInfo CreateAssemblyLineInfo(IDataReader rdr)
		{
			AssemblyLineInfo info = new AssemblyLineInfo();
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.AssemblyLineName = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE_NAME"));			
			info.AssemblyLineNickname = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE_NICKNAME"));			
			info.Address = DBConvert.GetString(rdr, rdr.GetOrdinal("ADDRESS"));			
			info.AssemblyLineType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ASSEMBLY_LINE_TYPE"));			
			info.AssemblyLinePulse = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE_PULSE"));			
			info.Jph = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("JPH"));			
			info.TimeReferenceType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TIME_REFERENCE_TYPE"));			
			info.Cmanager = DBConvert.GetString(rdr, rdr.GetOrdinal("CMANAGER"));			
			info.Emanager = DBConvert.GetString(rdr, rdr.GetOrdinal("EMANAGER"));			
			info.WorkScheduleType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("WORK_SCHEDULE_TYPE"));			
			info.FisLineCode = DBConvert.GetString(rdr, rdr.GetOrdinal("FIS_LINE_CODE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.SapAssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_ASSEMBLY_LINE"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			return info;
		}
		
		#endregion
	}
}
