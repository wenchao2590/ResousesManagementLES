#region Declaim
//---------------------------------------------------------------------------
// Name:		SapPartsDAL
// Function: 	Expose data in table TI_IFM_SAP_PARTS from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月24日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// SapPartsDAL对应表[TI_IFM_SAP_PARTS]
    /// </summary>
    public partial class SapPartsDAL : BusinessObjectProvider<SapPartsInfo>
	{
		#region Sql Statements
		private const string TI_IFM_SAP_PARTS_SELECT_BY_ID =
			@"SELECT ID,
				FID,
				LOG_FID,
				WERKS,
				MATNR,
				MAKTX_EN,
				MAKTX_ZH,
				MEINS,
				MTART,
				BRGEW,
				EKGRP,
				ZYSQJC,
				BSTRF,
				ZYSBZ,
				ZXBQJC,
				ZXBQJQ,
				ZXBBZ,
				DISMM,
				DISPO,
				DISGR,
				BESKZ,
				BSTMI,
				PLIFZ,
				ZDOCK,
				ZYSFY,
				LGRAD,
				EISBE,
				MINBE,
				MSTAE,
				LOGICAL_PK,
				SPRAS,
				FLAG,
				ABC,
				PROCESS_FLAG,
				PROCESS_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				  
				FROM [LES].[TI_IFM_SAP_PARTS] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TI_IFM_SAP_PARTS_SELECT = 
			@"SELECT ID,
				FID,
				LOG_FID,
				WERKS,
				MATNR,
				MAKTX_EN,
				MAKTX_ZH,
				MEINS,
				MTART,
				BRGEW,
				EKGRP,
				ZYSQJC,
				BSTRF,
				ZYSBZ,
				ZXBQJC,
				ZXBQJQ,
				ZXBBZ,
				DISMM,
				DISPO,
				DISGR,
				BESKZ,
				BSTMI,
				PLIFZ,
				ZDOCK,
				ZYSFY,
				LGRAD,
				EISBE,
				MINBE,
				MSTAE,
				LOGICAL_PK,
				SPRAS,
				FLAG,
				ABC,
				PROCESS_FLAG,
				PROCESS_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
				FROM [LES].[TI_IFM_SAP_PARTS] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TI_IFM_SAP_PARTS_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TI_IFM_SAP_PARTS]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TI_IFM_SAP_PARTS_INSERT =
			@"INSERT INTO [LES].[TI_IFM_SAP_PARTS] (
				FID,
				LOG_FID,
				WERKS,
				MATNR,
				MAKTX_EN,
				MAKTX_ZH,
				MEINS,
				MTART,
				BRGEW,
				EKGRP,
				ZYSQJC,
				BSTRF,
				ZYSBZ,
				ZXBQJC,
				ZXBQJQ,
				ZXBBZ,
				DISMM,
				DISPO,
				DISGR,
				BESKZ,
				BSTMI,
				PLIFZ,
				ZDOCK,
				ZYSFY,
				LGRAD,
				EISBE,
				MINBE,
				MSTAE,
				LOGICAL_PK,
				SPRAS,
				FLAG,
				ABC,
				PROCESS_FLAG,
				PROCESS_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
			) VALUES (
				@FID,
				@LOG_FID,
				@WERKS,
				@MATNR,
				@MAKTX_EN,
				@MAKTX_ZH,
				@MEINS,
				@MTART,
				@BRGEW,
				@EKGRP,
				@ZYSQJC,
				@BSTRF,
				@ZYSBZ,
				@ZXBQJC,
				@ZXBQJQ,
				@ZXBBZ,
				@DISMM,
				@DISPO,
				@DISGR,
				@BESKZ,
				@BSTMI,
				@PLIFZ,
				@ZDOCK,
				@ZYSFY,
				@LGRAD,
				@EISBE,
				@MINBE,
				@MSTAE,
				@LOGICAL_PK,
				@SPRAS,
				@FLAG,
				@ABC,
				@PROCESS_FLAG,
				@PROCESS_TIME,
				@COMMENTS,
				@VALID_FLAG,
				@CREATE_USER,
				GETDATE(),
				@MODIFY_USER,
				@MODIFY_DATE				 
			);SELECT @@IDENTITY;";
		private const string TI_IFM_SAP_PARTS_UPDATE =
			@"UPDATE [LES].[TI_IFM_SAP_PARTS] WITH(ROWLOCK) 
				SET FID=@FID,
				LOG_FID=@LOG_FID,
				WERKS=@WERKS,
				MATNR=@MATNR,
				MAKTX_EN=@MAKTX_EN,
				MAKTX_ZH=@MAKTX_ZH,
				MEINS=@MEINS,
				MTART=@MTART,
				BRGEW=@BRGEW,
				EKGRP=@EKGRP,
				ZYSQJC=@ZYSQJC,
				BSTRF=@BSTRF,
				ZYSBZ=@ZYSBZ,
				ZXBQJC=@ZXBQJC,
				ZXBQJQ=@ZXBQJQ,
				ZXBBZ=@ZXBBZ,
				DISMM=@DISMM,
				DISPO=@DISPO,
				DISGR=@DISGR,
				BESKZ=@BESKZ,
				BSTMI=@BSTMI,
				PLIFZ=@PLIFZ,
				ZDOCK=@ZDOCK,
				ZYSFY=@ZYSFY,
				LGRAD=@LGRAD,
				EISBE=@EISBE,
				MINBE=@MINBE,
				MSTAE=@MSTAE,
				LOGICAL_PK=@LOGICAL_PK,
				SPRAS=@SPRAS,
				FLAG=@FLAG,
				ABC=@ABC,
				PROCESS_FLAG=@PROCESS_FLAG,
				PROCESS_TIME=@PROCESS_TIME,
				COMMENTS=@COMMENTS,
				VALID_FLAG=@VALID_FLAG,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TI_IFM_SAP_PARTS_DELETE =
			@"DELETE FROM [LES].[TI_IFM_SAP_PARTS] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get SapPartsInfo
		/// </summary>
		/// <param name="ID">SapPartsInfo Primary key </param>
		/// <returns></returns> 
		public SapPartsInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PARTS_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateSapPartsInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>SapPartsInfo Collection </returns>
		public List<SapPartsInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TI_IFM_SAP_PARTS_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>SapPartsInfo Collection </returns>
		public List<SapPartsInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<SapPartsInfo> list = new List<SapPartsInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateSapPartsInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<SapPartsInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TI_IFM_SAP_PARTS]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<SapPartsInfo> list = new List<SapPartsInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateSapPartsInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TI_IFM_SAP_PARTS_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(SapPartsInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PARTS_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@LOG_FID", DbType.Guid, info.LogFid);
			db.AddInParameter(dbCommand, "@WERKS", DbType.String, info.Werks);
			db.AddInParameter(dbCommand, "@MATNR", DbType.String, info.Matnr);
			db.AddInParameter(dbCommand, "@MAKTX_EN", DbType.String, info.MaktxEn);
			db.AddInParameter(dbCommand, "@MAKTX_ZH", DbType.String, info.MaktxZh);
			db.AddInParameter(dbCommand, "@MEINS", DbType.String, info.Meins);
			db.AddInParameter(dbCommand, "@MTART", DbType.String, info.Mtart);
			db.AddInParameter(dbCommand, "@BRGEW", DbType.Decimal, info.Brgew);
			db.AddInParameter(dbCommand, "@EKGRP", DbType.String, info.Ekgrp);
			db.AddInParameter(dbCommand, "@ZYSQJC", DbType.String, info.Zysqjc);
			db.AddInParameter(dbCommand, "@BSTRF", DbType.Decimal, info.Bstrf);
			db.AddInParameter(dbCommand, "@ZYSBZ", DbType.Decimal, info.Zysbz);
			db.AddInParameter(dbCommand, "@ZXBQJC", DbType.String, info.Zxbqjc);
			db.AddInParameter(dbCommand, "@ZXBQJQ", DbType.Int32, info.Zxbqjq);
			db.AddInParameter(dbCommand, "@ZXBBZ", DbType.Decimal, info.Zxbbz);
			db.AddInParameter(dbCommand, "@DISMM", DbType.String, info.Dismm);
			db.AddInParameter(dbCommand, "@DISPO", DbType.String, info.Dispo);
			db.AddInParameter(dbCommand, "@DISGR", DbType.String, info.Disgr);
			db.AddInParameter(dbCommand, "@BESKZ", DbType.String, info.Beskz);
			db.AddInParameter(dbCommand, "@BSTMI", DbType.Decimal, info.Bstmi);
			db.AddInParameter(dbCommand, "@PLIFZ", DbType.Int32, info.Plifz);
			db.AddInParameter(dbCommand, "@ZDOCK", DbType.String, info.Zdock);
			db.AddInParameter(dbCommand, "@ZYSFY", DbType.Decimal, info.Zysfy);
			db.AddInParameter(dbCommand, "@LGRAD", DbType.Decimal, info.Lgrad);
			db.AddInParameter(dbCommand, "@EISBE", DbType.Decimal, info.Eisbe);
			db.AddInParameter(dbCommand, "@MINBE", DbType.Decimal, info.Minbe);
			db.AddInParameter(dbCommand, "@MSTAE", DbType.String, info.Mstae);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@SPRAS", DbType.String, info.Spras);
			db.AddInParameter(dbCommand, "@FLAG", DbType.Boolean, info.Flag);
			db.AddInParameter(dbCommand, "@ABC", DbType.String, info.Abc);
			db.AddInParameter(dbCommand, "@PROCESS_FLAG", DbType.Int32, info.ProcessFlag);
			db.AddInParameter(dbCommand, "@PROCESS_TIME", DbType.DateTime, info.ProcessTime);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(SapPartsInfo info)
		{
			return  
			@"insert into [LES].[TI_IFM_SAP_PARTS] (
				FID,
				LOG_FID,
				WERKS,
				MATNR,
				MAKTX_EN,
				MAKTX_ZH,
				MEINS,
				MTART,
				BRGEW,
				EKGRP,
				ZYSQJC,
				BSTRF,
				ZYSBZ,
				ZXBQJC,
				ZXBQJQ,
				ZXBBZ,
				DISMM,
				DISPO,
				DISGR,
				BESKZ,
				BSTMI,
				PLIFZ,
				ZDOCK,
				ZYSFY,
				LGRAD,
				EISBE,
				MINBE,
				MSTAE,
				LOGICAL_PK,
				SPRAS,
				FLAG,
				ABC,
				PROCESS_FLAG,
				PROCESS_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
			) values ("+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(info.LogFid == null ? "NULL" : "N'" + info.LogFid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.Werks) ? "NULL" : "N'" + info.Werks + "'") + ","+
				(string.IsNullOrEmpty(info.Matnr) ? "NULL" : "N'" + info.Matnr + "'") + ","+
				(string.IsNullOrEmpty(info.MaktxEn) ? "NULL" : "N'" + info.MaktxEn + "'") + ","+
				(string.IsNullOrEmpty(info.MaktxZh) ? "NULL" : "N'" + info.MaktxZh + "'") + ","+
				(string.IsNullOrEmpty(info.Meins) ? "NULL" : "N'" + info.Meins + "'") + ","+
				(string.IsNullOrEmpty(info.Mtart) ? "NULL" : "N'" + info.Mtart + "'") + ","+
				(info.Brgew == null ? "NULL" : "" + info.Brgew.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Ekgrp) ? "NULL" : "N'" + info.Ekgrp + "'") + ","+
				(string.IsNullOrEmpty(info.Zysqjc) ? "NULL" : "N'" + info.Zysqjc + "'") + ","+
				(info.Bstrf == null ? "NULL" : "" + info.Bstrf.GetValueOrDefault() + "") + ","+
				(info.Zysbz == null ? "NULL" : "" + info.Zysbz.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Zxbqjc) ? "NULL" : "N'" + info.Zxbqjc + "'") + ","+
				(info.Zxbqjq == null ? "NULL" : "" + info.Zxbqjq.GetValueOrDefault() + "") + ","+
				(info.Zxbbz == null ? "NULL" : "" + info.Zxbbz.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Dismm) ? "NULL" : "N'" + info.Dismm + "'") + ","+
				(string.IsNullOrEmpty(info.Dispo) ? "NULL" : "N'" + info.Dispo + "'") + ","+
				(string.IsNullOrEmpty(info.Disgr) ? "NULL" : "N'" + info.Disgr + "'") + ","+
				(string.IsNullOrEmpty(info.Beskz) ? "NULL" : "N'" + info.Beskz + "'") + ","+
				(info.Bstmi == null ? "NULL" : "" + info.Bstmi.GetValueOrDefault() + "") + ","+
				(info.Plifz == null ? "NULL" : "" + info.Plifz.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Zdock) ? "NULL" : "N'" + info.Zdock + "'") + ","+
				(info.Zysfy == null ? "NULL" : "" + info.Zysfy.GetValueOrDefault() + "") + ","+
				(info.Lgrad == null ? "NULL" : "" + info.Lgrad.GetValueOrDefault() + "") + ","+
				(info.Eisbe == null ? "NULL" : "" + info.Eisbe.GetValueOrDefault() + "") + ","+
				(info.Minbe == null ? "NULL" : "" + info.Minbe.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Mstae) ? "NULL" : "N'" + info.Mstae + "'") + ","+
				(string.IsNullOrEmpty(info.LogicalPk) ? "NULL" : "N'" + info.LogicalPk + "'") + ","+
				(string.IsNullOrEmpty(info.Spras) ? "NULL" : "N'" + info.Spras + "'") + ","+
				(info.Flag == null ? "NULL" : "" + (info.Flag.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(string.IsNullOrEmpty(info.Abc) ? "NULL" : "N'" + info.Abc + "'") + ","+
				(info.ProcessFlag == null ? "NULL" : "" + info.ProcessFlag.GetValueOrDefault() + "") + ","+
				(info.ProcessTime == null ? "NULL" : "N'" + info.ProcessTime.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				"1" + ","+		
				"N'" + info.CreateUser + "'" + ","+		
				"GETDATE()" + ","+			
				"NULL" + ","+			
				"NULL" + ");";			
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(SapPartsInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PARTS_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@LOG_FID", DbType.Guid, info.LogFid);
			db.AddInParameter(dbCommand, "@WERKS", DbType.String, info.Werks);
			db.AddInParameter(dbCommand, "@MATNR", DbType.String, info.Matnr);
			db.AddInParameter(dbCommand, "@MAKTX_EN", DbType.String, info.MaktxEn);
			db.AddInParameter(dbCommand, "@MAKTX_ZH", DbType.String, info.MaktxZh);
			db.AddInParameter(dbCommand, "@MEINS", DbType.String, info.Meins);
			db.AddInParameter(dbCommand, "@MTART", DbType.String, info.Mtart);
			db.AddInParameter(dbCommand, "@BRGEW", DbType.Decimal, info.Brgew);
			db.AddInParameter(dbCommand, "@EKGRP", DbType.String, info.Ekgrp);
			db.AddInParameter(dbCommand, "@ZYSQJC", DbType.String, info.Zysqjc);
			db.AddInParameter(dbCommand, "@BSTRF", DbType.Decimal, info.Bstrf);
			db.AddInParameter(dbCommand, "@ZYSBZ", DbType.Decimal, info.Zysbz);
			db.AddInParameter(dbCommand, "@ZXBQJC", DbType.String, info.Zxbqjc);
			db.AddInParameter(dbCommand, "@ZXBQJQ", DbType.Int32, info.Zxbqjq);
			db.AddInParameter(dbCommand, "@ZXBBZ", DbType.Decimal, info.Zxbbz);
			db.AddInParameter(dbCommand, "@DISMM", DbType.String, info.Dismm);
			db.AddInParameter(dbCommand, "@DISPO", DbType.String, info.Dispo);
			db.AddInParameter(dbCommand, "@DISGR", DbType.String, info.Disgr);
			db.AddInParameter(dbCommand, "@BESKZ", DbType.String, info.Beskz);
			db.AddInParameter(dbCommand, "@BSTMI", DbType.Decimal, info.Bstmi);
			db.AddInParameter(dbCommand, "@PLIFZ", DbType.Int32, info.Plifz);
			db.AddInParameter(dbCommand, "@ZDOCK", DbType.String, info.Zdock);
			db.AddInParameter(dbCommand, "@ZYSFY", DbType.Decimal, info.Zysfy);
			db.AddInParameter(dbCommand, "@LGRAD", DbType.Decimal, info.Lgrad);
			db.AddInParameter(dbCommand, "@EISBE", DbType.Decimal, info.Eisbe);
			db.AddInParameter(dbCommand, "@MINBE", DbType.Decimal, info.Minbe);
			db.AddInParameter(dbCommand, "@MSTAE", DbType.String, info.Mstae);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@SPRAS", DbType.String, info.Spras);
			db.AddInParameter(dbCommand, "@FLAG", DbType.Boolean, info.Flag);
			db.AddInParameter(dbCommand, "@ABC", DbType.String, info.Abc);
			db.AddInParameter(dbCommand, "@PROCESS_FLAG", DbType.Int32, info.ProcessFlag);
			db.AddInParameter(dbCommand, "@PROCESS_TIME", DbType.DateTime, info.ProcessTime);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">SapPartsInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PARTS_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">SapPartsInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TI_IFM_SAP_PARTS] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                                        db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">SapPartsInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TI_IFM_SAP_PARTS] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static SapPartsInfo CreateSapPartsInfo(IDataReader rdr)
		{
			SapPartsInfo info = new SapPartsInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.LogFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("LOG_FID"));			
			info.Werks = DBConvert.GetString(rdr, rdr.GetOrdinal("WERKS"));			
			info.Matnr = DBConvert.GetString(rdr, rdr.GetOrdinal("MATNR"));			
			info.MaktxEn = DBConvert.GetString(rdr, rdr.GetOrdinal("MAKTX_EN"));			
			info.MaktxZh = DBConvert.GetString(rdr, rdr.GetOrdinal("MAKTX_ZH"));			
			info.Meins = DBConvert.GetString(rdr, rdr.GetOrdinal("MEINS"));			
			info.Mtart = DBConvert.GetString(rdr, rdr.GetOrdinal("MTART"));			
			info.Brgew = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("BRGEW"));			
			info.Ekgrp = DBConvert.GetString(rdr, rdr.GetOrdinal("EKGRP"));			
			info.Zysqjc = DBConvert.GetString(rdr, rdr.GetOrdinal("ZYSQJC"));			
			info.Bstrf = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("BSTRF"));			
			info.Zysbz = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZYSBZ"));			
			info.Zxbqjc = DBConvert.GetString(rdr, rdr.GetOrdinal("ZXBQJC"));			
			info.Zxbqjq = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ZXBQJQ"));			
			info.Zxbbz = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZXBBZ"));			
			info.Dismm = DBConvert.GetString(rdr, rdr.GetOrdinal("DISMM"));			
			info.Dispo = DBConvert.GetString(rdr, rdr.GetOrdinal("DISPO"));			
			info.Disgr = DBConvert.GetString(rdr, rdr.GetOrdinal("DISGR"));			
			info.Beskz = DBConvert.GetString(rdr, rdr.GetOrdinal("BESKZ"));			
			info.Bstmi = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("BSTMI"));			
			info.Plifz = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PLIFZ"));			
			info.Zdock = DBConvert.GetString(rdr, rdr.GetOrdinal("ZDOCK"));			
			info.Zysfy = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ZYSFY"));			
			info.Lgrad = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("LGRAD"));			
			info.Eisbe = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("EISBE"));			
			info.Minbe = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("MINBE"));			
			info.Mstae = DBConvert.GetString(rdr, rdr.GetOrdinal("MSTAE"));			
			info.LogicalPk = DBConvert.GetString(rdr, rdr.GetOrdinal("LOGICAL_PK"));			
			info.Spras = DBConvert.GetString(rdr, rdr.GetOrdinal("SPRAS"));			
			info.Flag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("FLAG"));			
			info.Abc = DBConvert.GetString(rdr, rdr.GetOrdinal("ABC"));			
			info.ProcessFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PROCESS_FLAG"));			
			info.ProcessTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PROCESS_TIME"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.ValidFlag = DBConvert.GetBool(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			return info;
		}
		
		#endregion
	}
}
