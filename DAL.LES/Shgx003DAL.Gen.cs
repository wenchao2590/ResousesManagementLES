#region Declaim
//---------------------------------------------------------------------------
// Name:		Shgx003DAL
// Function: 	Expose data in table V_WMM_SHGX_003 from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年6月29日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// Shgx003DAL对应表[V_WMM_SHGX_003]
    /// </summary>
    public partial class Shgx003DAL : BusinessObjectProvider<Shgx003Info>
	{
		#region Sql Statements
		private const string V_WMM_SHGX_003_SELECT_BY_ID =
			"";
			
		private const string V_WMM_SHGX_003_SELECT = 
			@"SELECT CustTrustNo,
				CustName,
				Ysf,
				Qtfy,
				Bxf,
				ID,
				SourceZone,
				Bgf,
				TrustTime,
				Kdf,
				SumAmount,
				OrderType,
				OrderNo,
				Xkz,
				TargetZone,
				Jcf				 
				FROM [LES].[V_WMM_SHGX_003] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string V_WMM_SHGX_003_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[V_WMM_SHGX_003]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string V_WMM_SHGX_003_INSERT =
			@"INSERT INTO [LES].[V_WMM_SHGX_003] (
				CustTrustNo,
				CustName,
				Ysf,
				Qtfy,
				Bxf,
				ID,
				SourceZone,
				Bgf,
				TrustTime,
				Kdf,
				SumAmount,
				OrderType,
				OrderNo,
				Xkz,
				TargetZone,
				Jcf				 
			) VALUES (
				@CustTrustNo,
				@CustName,
				@Ysf,
				@Qtfy,
				@Bxf,
				@ID,
				@SourceZone,
				@Bgf,
				@TrustTime,
				@Kdf,
				@SumAmount,
				@OrderType,
				@OrderNo,
				@Xkz,
				@TargetZone,
				@Jcf				 
			);";
		private const string V_WMM_SHGX_003_UPDATE =
			"";

		private const string V_WMM_SHGX_003_DELETE =
			"";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>Shgx003Info Collection </returns>
		public List<Shgx003Info> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(V_WMM_SHGX_003_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>Shgx003Info Collection </returns>
		public List<Shgx003Info> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<Shgx003Info> list = new List<Shgx003Info>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateShgx003Info(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<Shgx003Info> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[nid] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[V_WMM_SHGX_003]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<Shgx003Info> list = new List<Shgx003Info>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateShgx003Info(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(V_WMM_SHGX_003_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public bool Add(Shgx003Info info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(V_WMM_SHGX_003_INSERT);			
			db.AddInParameter(dbCommand, "@CustTrustNo", DbType.String, info.Custtrustno);
			db.AddInParameter(dbCommand, "@CustName", DbType.String, info.Custname);
			db.AddInParameter(dbCommand, "@Ysf", DbType.Decimal, info.Ysf);
			db.AddInParameter(dbCommand, "@Qtfy", DbType.Decimal, info.Qtfy);
			db.AddInParameter(dbCommand, "@Bxf", DbType.Decimal, info.Bxf);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@SourceZone", DbType.String, info.Sourcezone);
			db.AddInParameter(dbCommand, "@Bgf", DbType.Decimal, info.Bgf);
			db.AddInParameter(dbCommand, "@TrustTime", DbType.DateTime, info.Trusttime);
			db.AddInParameter(dbCommand, "@Kdf", DbType.Decimal, info.Kdf);
			db.AddInParameter(dbCommand, "@SumAmount", DbType.Decimal, info.Sumamount);
			db.AddInParameter(dbCommand, "@OrderType", DbType.String, info.Ordertype);
			db.AddInParameter(dbCommand, "@OrderNo", DbType.String, info.Orderno);
			db.AddInParameter(dbCommand, "@Xkz", DbType.Decimal, info.Xkz);
			db.AddInParameter(dbCommand, "@TargetZone", DbType.String, info.Targetzone);
			db.AddInParameter(dbCommand, "@Jcf", DbType.Decimal, info.Jcf);
			return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(Shgx003Info info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(V_WMM_SHGX_003_UPDATE);				
			db.AddInParameter(dbCommand, "@CustTrustNo", DbType.String, info.Custtrustno);
			db.AddInParameter(dbCommand, "@CustName", DbType.String, info.Custname);
			db.AddInParameter(dbCommand, "@Ysf", DbType.Decimal, info.Ysf);
			db.AddInParameter(dbCommand, "@Qtfy", DbType.Decimal, info.Qtfy);
			db.AddInParameter(dbCommand, "@Bxf", DbType.Decimal, info.Bxf);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@SourceZone", DbType.String, info.Sourcezone);
			db.AddInParameter(dbCommand, "@Bgf", DbType.Decimal, info.Bgf);
			db.AddInParameter(dbCommand, "@TrustTime", DbType.DateTime, info.Trusttime);
			db.AddInParameter(dbCommand, "@Kdf", DbType.Decimal, info.Kdf);
			db.AddInParameter(dbCommand, "@SumAmount", DbType.Decimal, info.Sumamount);
			db.AddInParameter(dbCommand, "@OrderType", DbType.String, info.Ordertype);
			db.AddInParameter(dbCommand, "@OrderNo", DbType.String, info.Orderno);
			db.AddInParameter(dbCommand, "@Xkz", DbType.Decimal, info.Xkz);
			db.AddInParameter(dbCommand, "@TargetZone", DbType.String, info.Targetzone);
			db.AddInParameter(dbCommand, "@Jcf", DbType.Decimal, info.Jcf);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		
		
		#endregion
		  
		#region Helpers   
	  
		private static Shgx003Info CreateShgx003Info(IDataReader rdr)
		{
			Shgx003Info info = new Shgx003Info();
			info.Custtrustno = DBConvert.GetString(rdr, rdr.GetOrdinal("CustTrustNo"));			
			info.Custname = DBConvert.GetString(rdr, rdr.GetOrdinal("CustName"));			
			info.Ysf = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Ysf"));			
			info.Qtfy = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Qtfy"));			
			info.Bxf = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Bxf"));			
			info.Id = DBConvert.GetInt64Nullable(rdr, rdr.GetOrdinal("ID"));			
			info.Sourcezone = DBConvert.GetString(rdr, rdr.GetOrdinal("SourceZone"));			
			info.Bgf = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Bgf"));			
			info.Trusttime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("TrustTime"));			
			info.Kdf = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Kdf"));			
			info.Sumamount = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("SumAmount"));			
			info.Ordertype = DBConvert.GetString(rdr, rdr.GetOrdinal("OrderType"));			
			info.Orderno = DBConvert.GetString(rdr, rdr.GetOrdinal("OrderNo"));			
			info.Xkz = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Xkz"));			
			info.Targetzone = DBConvert.GetString(rdr, rdr.GetOrdinal("TargetZone"));			
			info.Jcf = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Jcf"));			
			return info;
		}
		
		#endregion
	}
}
