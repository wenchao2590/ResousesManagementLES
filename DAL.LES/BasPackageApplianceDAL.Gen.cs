#region Declaim
//---------------------------------------------------------------------------
// Name:		BasPackageApplianceDAL
// Function: 	Expose data in table V_TM_BAS_PACKAGE_APPLIANCE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月9日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#endregion

namespace DAL.LES
{
    //// <summary>
    /// BasPackageApplianceDAL对应表[V_TM_BAS_PACKAGE_APPLIANCE]
    /// </summary>
    public partial class BasPackageApplianceDAL : BusinessObjectProvider<BasPackageApplianceInfo>
    {
        #region Sql Statements
        private const string V_TM_BAS_PACKAGE_APPLIANCE_SELECT_BY_ID =
            "";

        private const string V_TM_BAS_PACKAGE_APPLIANCE_SELECT =
            @"SELECT PACKAGE_NO,
				PACKAGE_TYPE,
				PACKAGE_CNAME				 
				FROM [LES].[V_TM_BAS_PACKAGE_APPLIANCE] WITH (NOLOCK) WHERE 1=1 {0};";

        private const string V_TM_BAS_PACKAGE_APPLIANCE_SELECT_COUNTS =
            @"SELECT count(*) FROM [LES].[V_TM_BAS_PACKAGE_APPLIANCE]  WITH(NOLOCK) WHERE 1=1 {0};";

        private const string V_TM_BAS_PACKAGE_APPLIANCE_INSERT =
            @"INSERT INTO [LES].[V_TM_BAS_PACKAGE_APPLIANCE] (
				PACKAGE_NO,
				PACKAGE_TYPE,
				PACKAGE_CNAME				 
			) VALUES (
				@PACKAGE_NO,
				@PACKAGE_TYPE,
				@PACKAGE_CNAME				 
			);";
        private const string V_TM_BAS_PACKAGE_APPLIANCE_UPDATE =
            "";

        private const string V_TM_BAS_PACKAGE_APPLIANCE_DELETE =
            "";
        #endregion

        #region Access Methods

        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="textWhere">Conditon</param>
        /// <param name="orderText">Sort</param>
        /// <returns>BasPackageApplianceInfo Collection </returns>
        public List<BasPackageApplianceInfo> GetList(string textWhere, string orderText)
        {
            string query = string.Empty;
            if (string.IsNullOrEmpty(textWhere))
                query = string.Empty;
            else
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    query = textWhere;
                else
                    query = " and " + textWhere;
            }
            if (!string.IsNullOrEmpty(orderText))
                query += " order by " + orderText;

            return GetList(string.Format(V_TM_BAS_PACKAGE_APPLIANCE_SELECT, query));
        }
        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>BasPackageApplianceInfo Collection </returns>
        public List<BasPackageApplianceInfo> GetList(string sql)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<BasPackageApplianceInfo> list = new List<BasPackageApplianceInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateBasPackageApplianceInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
        public List<BasPackageApplianceInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
        {
            if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
            string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
            else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[PACKAGE_NO] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[V_TM_BAS_PACKAGE_APPLIANCE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<BasPackageApplianceInfo> list = new List<BasPackageApplianceInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateBasPackageApplianceInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            if (string.IsNullOrEmpty(textWhere))
                textWhere = string.Empty;
            else
            {
                if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    textWhere = " and " + textWhere;
            }
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(V_TM_BAS_PACKAGE_APPLIANCE_SELECT_COUNTS, textWhere));
            return Convert.ToInt32(db.ExecuteScalar(cmd));
        }
        /// <summary>
        /// Add
        /// </summary>
        /// <param name="info"> info</param>
        public bool Add(BasPackageApplianceInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_TM_BAS_PACKAGE_APPLIANCE_INSERT);
            db.AddInParameter(dbCommand, "@PACKAGE_NO", DbType.String, info.PackageNo);
            db.AddInParameter(dbCommand, "@PACKAGE_TYPE", DbType.Int32, info.PackageType);
            db.AddInParameter(dbCommand, "@PACKAGE_CNAME", DbType.String, info.PackageCname);
            return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;
        }
        /// <summary>
        /// GetInsertSql
        /// </summary>
        /// <param name="info"> info</param>
        public static string GetInsertSql(BasPackageApplianceInfo info)
        {
            return
            @"insert into [LES].[V_TM_BAS_PACKAGE_APPLIANCE] (
				PACKAGE_NO,
				PACKAGE_TYPE,
				PACKAGE_CNAME				 
			) values (" +
                (string.IsNullOrEmpty(info.PackageNo) ? "NULL" : "N'" + info.PackageNo + "'") + "," +
                (info.PackageType == null ? "NULL" : "" + info.PackageType.GetValueOrDefault() + "") + "," +
                (string.IsNullOrEmpty(info.PackageCname) ? "NULL" : "N'" + info.PackageCname + "'") + ");";
        }
        /// <summary>
        /// Update
        /// </summary>
        /// <param name="info">info</param>
        public int Update(BasPackageApplianceInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_TM_BAS_PACKAGE_APPLIANCE_UPDATE);
            db.AddInParameter(dbCommand, "@PACKAGE_NO", DbType.String, info.PackageNo);
            db.AddInParameter(dbCommand, "@PACKAGE_TYPE", DbType.Int32, info.PackageType);
            db.AddInParameter(dbCommand, "@PACKAGE_CNAME", DbType.String, info.PackageCname);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }


        #endregion

        #region Helpers   

        private static BasPackageApplianceInfo CreateBasPackageApplianceInfo(IDataReader rdr)
        {
            BasPackageApplianceInfo info = new BasPackageApplianceInfo();
            info.PackageNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PACKAGE_NO"));
            info.PackageType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PACKAGE_TYPE"));
            info.PackageCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PACKAGE_CNAME"));
            return info;
        }

        #endregion
    }
}
