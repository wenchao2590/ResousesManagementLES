#region Declaim
//---------------------------------------------------------------------------
// Name:		VmiReceiveDAL
// Function: 	Expose data in table TT_WMM_VMI_RECEIVE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月16日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// VmiReceiveDAL对应表[TT_WMM_VMI_RECEIVE]
    /// </summary>
    public partial class VmiReceiveDAL : BusinessObjectProvider<VmiReceiveInfo>
	{
		#region Sql Statements
		private const string TT_WMM_VMI_RECEIVE_SELECT_BY_ID =
			@"SELECT ID,
				FID,
				RECEIVE_NO,
				PLANT,
				SUPPLIER_NUM,
				SUPPLIER_TYPE,
				SOURCE_WM_NO,
				SOURCE_ZONE_NO,
				WM_NO,
				ZONE_NO,
				DOCK,
				RECEIVE_TYPE,
				SEND_TIME,
				TRAN_TIME,
				RECEIVE_REASON,
				BOOK_KEEPER,
				STATUS,
				ASN_NO,
				RUNSHEET_NO,
				PRINT_COUNT,
				PRINT_TIME,
				LAST_PRINT_USER,
				IS_OUTPUT,
				ORGANIZATION_FID,
				COST_CENTER,
				CONFIRM_USER,
				CONFIRM_DATE,
				LIABLE_USER,
				LIABLE_DATE,
				FINANCE_USER,
				FINANCE_DATE,
				SUM_PART_QTY,
				SUM_OF_PRICE,
				COMMENTS,
				PART_BOX_CODE,
				PART_BOX_NAME,
				INSPECTION_FLAG,
				TRUST_TIME,
				SUM_WEIGHT,
				SUM_VOLUME,
				CUST_CODE,
				CUST_NAME,
				ROUTE,
				ROUTE_NAME,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				PLAN_SHIPPING_TIME,
				PLAN_DELIVERY_TIME,
				INSPECTION_MODE,
				SUM_PACKAGE_QTY				  
				FROM [LES].[TT_WMM_VMI_RECEIVE] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TT_WMM_VMI_RECEIVE_SELECT = 
			@"SELECT ID,
				FID,
				RECEIVE_NO,
				PLANT,
				SUPPLIER_NUM,
				SUPPLIER_TYPE,
				SOURCE_WM_NO,
				SOURCE_ZONE_NO,
				WM_NO,
				ZONE_NO,
				DOCK,
				RECEIVE_TYPE,
				SEND_TIME,
				TRAN_TIME,
				RECEIVE_REASON,
				BOOK_KEEPER,
				STATUS,
				ASN_NO,
				RUNSHEET_NO,
				PRINT_COUNT,
				PRINT_TIME,
				LAST_PRINT_USER,
				IS_OUTPUT,
				ORGANIZATION_FID,
				COST_CENTER,
				CONFIRM_USER,
				CONFIRM_DATE,
				LIABLE_USER,
				LIABLE_DATE,
				FINANCE_USER,
				FINANCE_DATE,
				SUM_PART_QTY,
				SUM_OF_PRICE,
				COMMENTS,
				PART_BOX_CODE,
				PART_BOX_NAME,
				INSPECTION_FLAG,
				TRUST_TIME,
				SUM_WEIGHT,
				SUM_VOLUME,
				CUST_CODE,
				CUST_NAME,
				ROUTE,
				ROUTE_NAME,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				PLAN_SHIPPING_TIME,
				PLAN_DELIVERY_TIME,
				INSPECTION_MODE,
				SUM_PACKAGE_QTY				 
				FROM [LES].[TT_WMM_VMI_RECEIVE] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_WMM_VMI_RECEIVE_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_WMM_VMI_RECEIVE]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_WMM_VMI_RECEIVE_INSERT =
			@"INSERT INTO [LES].[TT_WMM_VMI_RECEIVE] (
				FID,
				RECEIVE_NO,
				PLANT,
				SUPPLIER_NUM,
				SUPPLIER_TYPE,
				SOURCE_WM_NO,
				SOURCE_ZONE_NO,
				WM_NO,
				ZONE_NO,
				DOCK,
				RECEIVE_TYPE,
				SEND_TIME,
				TRAN_TIME,
				RECEIVE_REASON,
				BOOK_KEEPER,
				STATUS,
				ASN_NO,
				RUNSHEET_NO,
				PRINT_COUNT,
				PRINT_TIME,
				LAST_PRINT_USER,
				IS_OUTPUT,
				ORGANIZATION_FID,
				COST_CENTER,
				CONFIRM_USER,
				CONFIRM_DATE,
				LIABLE_USER,
				LIABLE_DATE,
				FINANCE_USER,
				FINANCE_DATE,
				SUM_PART_QTY,
				SUM_OF_PRICE,
				COMMENTS,
				PART_BOX_CODE,
				PART_BOX_NAME,
				INSPECTION_FLAG,
				TRUST_TIME,
				SUM_WEIGHT,
				SUM_VOLUME,
				CUST_CODE,
				CUST_NAME,
				ROUTE,
				ROUTE_NAME,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				PLAN_SHIPPING_TIME,
				PLAN_DELIVERY_TIME,
				INSPECTION_MODE,
				SUM_PACKAGE_QTY				 
			) VALUES (
				@FID,
				@RECEIVE_NO,
				@PLANT,
				@SUPPLIER_NUM,
				@SUPPLIER_TYPE,
				@SOURCE_WM_NO,
				@SOURCE_ZONE_NO,
				@WM_NO,
				@ZONE_NO,
				@DOCK,
				@RECEIVE_TYPE,
				@SEND_TIME,
				@TRAN_TIME,
				@RECEIVE_REASON,
				@BOOK_KEEPER,
				@STATUS,
				@ASN_NO,
				@RUNSHEET_NO,
				@PRINT_COUNT,
				@PRINT_TIME,
				@LAST_PRINT_USER,
				@IS_OUTPUT,
				@ORGANIZATION_FID,
				@COST_CENTER,
				@CONFIRM_USER,
				@CONFIRM_DATE,
				@LIABLE_USER,
				@LIABLE_DATE,
				@FINANCE_USER,
				@FINANCE_DATE,
				@SUM_PART_QTY,
				@SUM_OF_PRICE,
				@COMMENTS,
				@PART_BOX_CODE,
				@PART_BOX_NAME,
				@INSPECTION_FLAG,
				@TRUST_TIME,
				@SUM_WEIGHT,
				@SUM_VOLUME,
				@CUST_CODE,
				@CUST_NAME,
				@ROUTE,
				@ROUTE_NAME,
				@VALID_FLAG,
				@CREATE_USER,
				GETDATE(),
				@MODIFY_USER,
				@MODIFY_DATE,
				@PLAN_SHIPPING_TIME,
				@PLAN_DELIVERY_TIME,
				@INSPECTION_MODE,
				@SUM_PACKAGE_QTY				 
			);SELECT @@IDENTITY;";
		private const string TT_WMM_VMI_RECEIVE_UPDATE =
			@"UPDATE [LES].[TT_WMM_VMI_RECEIVE] WITH(ROWLOCK) 
				SET FID=@FID,
				RECEIVE_NO=@RECEIVE_NO,
				PLANT=@PLANT,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				SUPPLIER_TYPE=@SUPPLIER_TYPE,
				SOURCE_WM_NO=@SOURCE_WM_NO,
				SOURCE_ZONE_NO=@SOURCE_ZONE_NO,
				WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				DOCK=@DOCK,
				RECEIVE_TYPE=@RECEIVE_TYPE,
				SEND_TIME=@SEND_TIME,
				TRAN_TIME=@TRAN_TIME,
				RECEIVE_REASON=@RECEIVE_REASON,
				BOOK_KEEPER=@BOOK_KEEPER,
				STATUS=@STATUS,
				ASN_NO=@ASN_NO,
				RUNSHEET_NO=@RUNSHEET_NO,
				PRINT_COUNT=@PRINT_COUNT,
				PRINT_TIME=@PRINT_TIME,
				LAST_PRINT_USER=@LAST_PRINT_USER,
				IS_OUTPUT=@IS_OUTPUT,
				ORGANIZATION_FID=@ORGANIZATION_FID,
				COST_CENTER=@COST_CENTER,
				CONFIRM_USER=@CONFIRM_USER,
				CONFIRM_DATE=@CONFIRM_DATE,
				LIABLE_USER=@LIABLE_USER,
				LIABLE_DATE=@LIABLE_DATE,
				FINANCE_USER=@FINANCE_USER,
				FINANCE_DATE=@FINANCE_DATE,
				SUM_PART_QTY=@SUM_PART_QTY,
				SUM_OF_PRICE=@SUM_OF_PRICE,
				COMMENTS=@COMMENTS,
				PART_BOX_CODE=@PART_BOX_CODE,
				PART_BOX_NAME=@PART_BOX_NAME,
				INSPECTION_FLAG=@INSPECTION_FLAG,
				TRUST_TIME=@TRUST_TIME,
				SUM_WEIGHT=@SUM_WEIGHT,
				SUM_VOLUME=@SUM_VOLUME,
				CUST_CODE=@CUST_CODE,
				CUST_NAME=@CUST_NAME,
				ROUTE=@ROUTE,
				ROUTE_NAME=@ROUTE_NAME,
				VALID_FLAG=@VALID_FLAG,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE,
				PLAN_SHIPPING_TIME=@PLAN_SHIPPING_TIME,
				PLAN_DELIVERY_TIME=@PLAN_DELIVERY_TIME,
				INSPECTION_MODE=@INSPECTION_MODE,
				SUM_PACKAGE_QTY=@SUM_PACKAGE_QTY				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TT_WMM_VMI_RECEIVE_DELETE =
			@"DELETE FROM [LES].[TT_WMM_VMI_RECEIVE] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get VmiReceiveInfo
		/// </summary>
		/// <param name="ID">VmiReceiveInfo Primary key </param>
		/// <returns></returns> 
		public VmiReceiveInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_VMI_RECEIVE_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateVmiReceiveInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>VmiReceiveInfo Collection </returns>
		public List<VmiReceiveInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_WMM_VMI_RECEIVE_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>VmiReceiveInfo Collection </returns>
		public List<VmiReceiveInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<VmiReceiveInfo> list = new List<VmiReceiveInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateVmiReceiveInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<VmiReceiveInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_WMM_VMI_RECEIVE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<VmiReceiveInfo> list = new List<VmiReceiveInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateVmiReceiveInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_WMM_VMI_RECEIVE_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(VmiReceiveInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_VMI_RECEIVE_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@RECEIVE_NO", DbType.String, info.ReceiveNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@SUPPLIER_TYPE", DbType.Int32, info.SupplierType);
			db.AddInParameter(dbCommand, "@SOURCE_WM_NO", DbType.String, info.SourceWmNo);
			db.AddInParameter(dbCommand, "@SOURCE_ZONE_NO", DbType.String, info.SourceZoneNo);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@RECEIVE_TYPE", DbType.Int32, info.ReceiveType);
			db.AddInParameter(dbCommand, "@SEND_TIME", DbType.DateTime, info.SendTime);
			db.AddInParameter(dbCommand, "@TRAN_TIME", DbType.DateTime, info.TranTime);
			db.AddInParameter(dbCommand, "@RECEIVE_REASON", DbType.String, info.ReceiveReason);
			db.AddInParameter(dbCommand, "@BOOK_KEEPER", DbType.String, info.BookKeeper);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@ASN_NO", DbType.String, info.AsnNo);
			db.AddInParameter(dbCommand, "@RUNSHEET_NO", DbType.String, info.RunsheetNo);
			db.AddInParameter(dbCommand, "@PRINT_COUNT", DbType.Int32, info.PrintCount);
			db.AddInParameter(dbCommand, "@PRINT_TIME", DbType.DateTime, info.PrintTime);
			db.AddInParameter(dbCommand, "@LAST_PRINT_USER", DbType.String, info.LastPrintUser);
			db.AddInParameter(dbCommand, "@IS_OUTPUT", DbType.Boolean, info.IsOutput);
			db.AddInParameter(dbCommand, "@ORGANIZATION_FID", DbType.Guid, info.OrganizationFid);
			db.AddInParameter(dbCommand, "@COST_CENTER", DbType.String, info.CostCenter);
			db.AddInParameter(dbCommand, "@CONFIRM_USER", DbType.String, info.ConfirmUser);
			db.AddInParameter(dbCommand, "@CONFIRM_DATE", DbType.DateTime, info.ConfirmDate);
			db.AddInParameter(dbCommand, "@LIABLE_USER", DbType.String, info.LiableUser);
			db.AddInParameter(dbCommand, "@LIABLE_DATE", DbType.DateTime, info.LiableDate);
			db.AddInParameter(dbCommand, "@FINANCE_USER", DbType.String, info.FinanceUser);
			db.AddInParameter(dbCommand, "@FINANCE_DATE", DbType.DateTime, info.FinanceDate);
			db.AddInParameter(dbCommand, "@SUM_PART_QTY", DbType.Decimal, info.SumPartQty);
			db.AddInParameter(dbCommand, "@SUM_OF_PRICE", DbType.Decimal, info.SumOfPrice);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@PART_BOX_CODE", DbType.String, info.PartBoxCode);
			db.AddInParameter(dbCommand, "@PART_BOX_NAME", DbType.String, info.PartBoxName);
			db.AddInParameter(dbCommand, "@INSPECTION_FLAG", DbType.Boolean, info.InspectionFlag);
			db.AddInParameter(dbCommand, "@TRUST_TIME", DbType.DateTime, info.TrustTime);
			db.AddInParameter(dbCommand, "@SUM_WEIGHT", DbType.Decimal, info.SumWeight);
			db.AddInParameter(dbCommand, "@SUM_VOLUME", DbType.Decimal, info.SumVolume);
			db.AddInParameter(dbCommand, "@CUST_CODE", DbType.String, info.CustCode);
			db.AddInParameter(dbCommand, "@CUST_NAME", DbType.String, info.CustName);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@ROUTE_NAME", DbType.String, info.RouteName);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@PLAN_SHIPPING_TIME", DbType.DateTime, info.PlanShippingTime);
			db.AddInParameter(dbCommand, "@PLAN_DELIVERY_TIME", DbType.DateTime, info.PlanDeliveryTime);
			db.AddInParameter(dbCommand, "@INSPECTION_MODE", DbType.Int32, info.InspectionMode);
			db.AddInParameter(dbCommand, "@SUM_PACKAGE_QTY", DbType.Int32, info.SumPackageQty);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(VmiReceiveInfo info)
		{
			return  
			@"insert into [LES].[TT_WMM_VMI_RECEIVE] (
				FID,
				RECEIVE_NO,
				PLANT,
				SUPPLIER_NUM,
				SUPPLIER_TYPE,
				SOURCE_WM_NO,
				SOURCE_ZONE_NO,
				WM_NO,
				ZONE_NO,
				DOCK,
				RECEIVE_TYPE,
				SEND_TIME,
				TRAN_TIME,
				RECEIVE_REASON,
				BOOK_KEEPER,
				STATUS,
				ASN_NO,
				RUNSHEET_NO,
				PRINT_COUNT,
				PRINT_TIME,
				LAST_PRINT_USER,
				IS_OUTPUT,
				ORGANIZATION_FID,
				COST_CENTER,
				CONFIRM_USER,
				CONFIRM_DATE,
				LIABLE_USER,
				LIABLE_DATE,
				FINANCE_USER,
				FINANCE_DATE,
				SUM_PART_QTY,
				SUM_OF_PRICE,
				COMMENTS,
				PART_BOX_CODE,
				PART_BOX_NAME,
				INSPECTION_FLAG,
				TRUST_TIME,
				SUM_WEIGHT,
				SUM_VOLUME,
				CUST_CODE,
				CUST_NAME,
				ROUTE,
				ROUTE_NAME,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				PLAN_SHIPPING_TIME,
				PLAN_DELIVERY_TIME,
				INSPECTION_MODE,
				SUM_PACKAGE_QTY				 
			) values ("+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.ReceiveNo) ? "NULL" : "N'" + info.ReceiveNo + "'") + ","+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(info.SupplierType == null ? "NULL" : "" + info.SupplierType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.SourceWmNo) ? "NULL" : "N'" + info.SourceWmNo + "'") + ","+
				(string.IsNullOrEmpty(info.SourceZoneNo) ? "NULL" : "N'" + info.SourceZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.WmNo) ? "NULL" : "N'" + info.WmNo + "'") + ","+
				(string.IsNullOrEmpty(info.ZoneNo) ? "NULL" : "N'" + info.ZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.Dock) ? "NULL" : "N'" + info.Dock + "'") + ","+
				(info.ReceiveType == null ? "NULL" : "" + info.ReceiveType.GetValueOrDefault() + "") + ","+
				(info.SendTime == null ? "NULL" : "N'" + info.SendTime.GetValueOrDefault() + "'") + ","+
				(info.TranTime == null ? "NULL" : "N'" + info.TranTime.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.ReceiveReason) ? "NULL" : "N'" + info.ReceiveReason + "'") + ","+
				(string.IsNullOrEmpty(info.BookKeeper) ? "NULL" : "N'" + info.BookKeeper + "'") + ","+
				(info.Status == null ? "NULL" : "" + info.Status.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.AsnNo) ? "NULL" : "N'" + info.AsnNo + "'") + ","+
				(string.IsNullOrEmpty(info.RunsheetNo) ? "NULL" : "N'" + info.RunsheetNo + "'") + ","+
				(info.PrintCount == null ? "NULL" : "" + info.PrintCount.GetValueOrDefault() + "") + ","+
				(info.PrintTime == null ? "NULL" : "N'" + info.PrintTime.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.LastPrintUser) ? "NULL" : "N'" + info.LastPrintUser + "'") + ","+
				(info.IsOutput == null ? "NULL" : "" + (info.IsOutput.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(info.OrganizationFid == null ? "NULL" : "N'" + info.OrganizationFid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.CostCenter) ? "NULL" : "N'" + info.CostCenter + "'") + ","+
				(string.IsNullOrEmpty(info.ConfirmUser) ? "NULL" : "N'" + info.ConfirmUser + "'") + ","+
				(info.ConfirmDate == null ? "NULL" : "N'" + info.ConfirmDate.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.LiableUser) ? "NULL" : "N'" + info.LiableUser + "'") + ","+
				(info.LiableDate == null ? "NULL" : "N'" + info.LiableDate.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.FinanceUser) ? "NULL" : "N'" + info.FinanceUser + "'") + ","+
				(info.FinanceDate == null ? "NULL" : "N'" + info.FinanceDate.GetValueOrDefault() + "'") + ","+
				(info.SumPartQty == null ? "NULL" : "" + info.SumPartQty.GetValueOrDefault() + "") + ","+
				(info.SumOfPrice == null ? "NULL" : "" + info.SumOfPrice.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				(string.IsNullOrEmpty(info.PartBoxCode) ? "NULL" : "N'" + info.PartBoxCode + "'") + ","+
				(string.IsNullOrEmpty(info.PartBoxName) ? "NULL" : "N'" + info.PartBoxName + "'") + ","+
				(info.InspectionFlag == null ? "NULL" : "" + (info.InspectionFlag.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(info.TrustTime == null ? "NULL" : "N'" + info.TrustTime.GetValueOrDefault() + "'") + ","+
				(info.SumWeight == null ? "NULL" : "" + info.SumWeight.GetValueOrDefault() + "") + ","+
				(info.SumVolume == null ? "NULL" : "" + info.SumVolume.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.CustCode) ? "NULL" : "N'" + info.CustCode + "'") + ","+
				(string.IsNullOrEmpty(info.CustName) ? "NULL" : "N'" + info.CustName + "'") + ","+
				(string.IsNullOrEmpty(info.Route) ? "NULL" : "N'" + info.Route + "'") + ","+
				(string.IsNullOrEmpty(info.RouteName) ? "NULL" : "N'" + info.RouteName + "'") + ","+
				"1" + ","+		
				"N'" + info.CreateUser + "'" + ","+		
				"GETDATE()" + ","+			
				"NULL" + ","+			
				"NULL" + ","+			
				(info.PlanShippingTime == null ? "NULL" : "N'" + info.PlanShippingTime.GetValueOrDefault() + "'") + ","+
				(info.PlanDeliveryTime == null ? "NULL" : "N'" + info.PlanDeliveryTime.GetValueOrDefault() + "'") + ","+
				(info.InspectionMode == null ? "NULL" : "" + info.InspectionMode.GetValueOrDefault() + "") + ","+
				(info.SumPackageQty == null ? "NULL" : "" + info.SumPackageQty.GetValueOrDefault() + "") + ");";				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(VmiReceiveInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_VMI_RECEIVE_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@RECEIVE_NO", DbType.String, info.ReceiveNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@SUPPLIER_TYPE", DbType.Int32, info.SupplierType);
			db.AddInParameter(dbCommand, "@SOURCE_WM_NO", DbType.String, info.SourceWmNo);
			db.AddInParameter(dbCommand, "@SOURCE_ZONE_NO", DbType.String, info.SourceZoneNo);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@RECEIVE_TYPE", DbType.Int32, info.ReceiveType);
			db.AddInParameter(dbCommand, "@SEND_TIME", DbType.DateTime, info.SendTime);
			db.AddInParameter(dbCommand, "@TRAN_TIME", DbType.DateTime, info.TranTime);
			db.AddInParameter(dbCommand, "@RECEIVE_REASON", DbType.String, info.ReceiveReason);
			db.AddInParameter(dbCommand, "@BOOK_KEEPER", DbType.String, info.BookKeeper);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@ASN_NO", DbType.String, info.AsnNo);
			db.AddInParameter(dbCommand, "@RUNSHEET_NO", DbType.String, info.RunsheetNo);
			db.AddInParameter(dbCommand, "@PRINT_COUNT", DbType.Int32, info.PrintCount);
			db.AddInParameter(dbCommand, "@PRINT_TIME", DbType.DateTime, info.PrintTime);
			db.AddInParameter(dbCommand, "@LAST_PRINT_USER", DbType.String, info.LastPrintUser);
			db.AddInParameter(dbCommand, "@IS_OUTPUT", DbType.Boolean, info.IsOutput);
			db.AddInParameter(dbCommand, "@ORGANIZATION_FID", DbType.Guid, info.OrganizationFid);
			db.AddInParameter(dbCommand, "@COST_CENTER", DbType.String, info.CostCenter);
			db.AddInParameter(dbCommand, "@CONFIRM_USER", DbType.String, info.ConfirmUser);
			db.AddInParameter(dbCommand, "@CONFIRM_DATE", DbType.DateTime, info.ConfirmDate);
			db.AddInParameter(dbCommand, "@LIABLE_USER", DbType.String, info.LiableUser);
			db.AddInParameter(dbCommand, "@LIABLE_DATE", DbType.DateTime, info.LiableDate);
			db.AddInParameter(dbCommand, "@FINANCE_USER", DbType.String, info.FinanceUser);
			db.AddInParameter(dbCommand, "@FINANCE_DATE", DbType.DateTime, info.FinanceDate);
			db.AddInParameter(dbCommand, "@SUM_PART_QTY", DbType.Decimal, info.SumPartQty);
			db.AddInParameter(dbCommand, "@SUM_OF_PRICE", DbType.Decimal, info.SumOfPrice);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@PART_BOX_CODE", DbType.String, info.PartBoxCode);
			db.AddInParameter(dbCommand, "@PART_BOX_NAME", DbType.String, info.PartBoxName);
			db.AddInParameter(dbCommand, "@INSPECTION_FLAG", DbType.Boolean, info.InspectionFlag);
			db.AddInParameter(dbCommand, "@TRUST_TIME", DbType.DateTime, info.TrustTime);
			db.AddInParameter(dbCommand, "@SUM_WEIGHT", DbType.Decimal, info.SumWeight);
			db.AddInParameter(dbCommand, "@SUM_VOLUME", DbType.Decimal, info.SumVolume);
			db.AddInParameter(dbCommand, "@CUST_CODE", DbType.String, info.CustCode);
			db.AddInParameter(dbCommand, "@CUST_NAME", DbType.String, info.CustName);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@ROUTE_NAME", DbType.String, info.RouteName);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@PLAN_SHIPPING_TIME", DbType.DateTime, info.PlanShippingTime);
			db.AddInParameter(dbCommand, "@PLAN_DELIVERY_TIME", DbType.DateTime, info.PlanDeliveryTime);
			db.AddInParameter(dbCommand, "@INSPECTION_MODE", DbType.Int32, info.InspectionMode);
			db.AddInParameter(dbCommand, "@SUM_PACKAGE_QTY", DbType.Int32, info.SumPackageQty);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">VmiReceiveInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_VMI_RECEIVE_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">VmiReceiveInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TT_WMM_VMI_RECEIVE] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                                                    db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">VmiReceiveInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TT_WMM_VMI_RECEIVE] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static VmiReceiveInfo CreateVmiReceiveInfo(IDataReader rdr)
		{
			VmiReceiveInfo info = new VmiReceiveInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.ReceiveNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RECEIVE_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.SupplierType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SUPPLIER_TYPE"));			
			info.SourceWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("SOURCE_WM_NO"));			
			info.SourceZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("SOURCE_ZONE_NO"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));			
			info.ReceiveType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("RECEIVE_TYPE"));			
			info.SendTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("SEND_TIME"));			
			info.TranTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("TRAN_TIME"));			
			info.ReceiveReason = DBConvert.GetString(rdr, rdr.GetOrdinal("RECEIVE_REASON"));			
			info.BookKeeper = DBConvert.GetString(rdr, rdr.GetOrdinal("BOOK_KEEPER"));			
			info.Status = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("STATUS"));			
			info.AsnNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ASN_NO"));			
			info.RunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RUNSHEET_NO"));			
			info.PrintCount = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PRINT_COUNT"));			
			info.PrintTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PRINT_TIME"));			
			info.LastPrintUser = DBConvert.GetString(rdr, rdr.GetOrdinal("LAST_PRINT_USER"));			
			info.IsOutput = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("IS_OUTPUT"));			
			info.OrganizationFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("ORGANIZATION_FID"));			
			info.CostCenter = DBConvert.GetString(rdr, rdr.GetOrdinal("COST_CENTER"));			
			info.ConfirmUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CONFIRM_USER"));			
			info.ConfirmDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CONFIRM_DATE"));			
			info.LiableUser = DBConvert.GetString(rdr, rdr.GetOrdinal("LIABLE_USER"));			
			info.LiableDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("LIABLE_DATE"));			
			info.FinanceUser = DBConvert.GetString(rdr, rdr.GetOrdinal("FINANCE_USER"));			
			info.FinanceDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("FINANCE_DATE"));			
			info.SumPartQty = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("SUM_PART_QTY"));			
			info.SumOfPrice = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("SUM_OF_PRICE"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.PartBoxCode = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_BOX_CODE"));			
			info.PartBoxName = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_BOX_NAME"));			
			info.InspectionFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("INSPECTION_FLAG"));			
			info.TrustTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("TRUST_TIME"));			
			info.SumWeight = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("SUM_WEIGHT"));			
			info.SumVolume = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("SUM_VOLUME"));			
			info.CustCode = DBConvert.GetString(rdr, rdr.GetOrdinal("CUST_CODE"));			
			info.CustName = DBConvert.GetString(rdr, rdr.GetOrdinal("CUST_NAME"));			
			info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));			
			info.RouteName = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE_NAME"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.PlanShippingTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PLAN_SHIPPING_TIME"));			
			info.PlanDeliveryTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PLAN_DELIVERY_TIME"));			
			info.InspectionMode = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INSPECTION_MODE"));			
			info.SumPackageQty = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SUM_PACKAGE_QTY"));			
			return info;
		}
		
		#endregion
	}
}
