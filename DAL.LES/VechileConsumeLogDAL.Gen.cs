#region Declaim
//---------------------------------------------------------------------------
// Name:		VechileConsumeLogDAL
// Function: 	Expose data in table TL_PCS_VECHILE_CONSUME_LOG from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月21日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// VechileConsumeLogDAL对应表[TL_PCS_VECHILE_CONSUME_LOG]
    /// </summary>
    public partial class VechileConsumeLogDAL : BusinessObjectProvider<VechileConsumeLogInfo>
	{
		#region Sql Statements
		private const string TL_PCS_VECHILE_CONSUME_LOG_SELECT_BY_ID =
			@"SELECT CONSUME_LOG_IDENTITY,
				KNR,
				REGION_NO,
				FOOTPRINT,
				LOCATION,
				PART_NO,
				CURRENT_PART_COUNT,
				DOSAGE,
				MISSING_TIME_STAMP,
				CONSUMED_TIME_STAMP,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				REPLACE_PART				  
				FROM [LES].[TL_PCS_VECHILE_CONSUME_LOG] WITH(NOLOCK) WHERE 1=1  AND CONSUME_LOG_IDENTITY =@CONSUME_LOG_IDENTITY;";
			
		private const string TL_PCS_VECHILE_CONSUME_LOG_SELECT = 
			@"SELECT CONSUME_LOG_IDENTITY,
				KNR,
				REGION_NO,
				FOOTPRINT,
				LOCATION,
				PART_NO,
				CURRENT_PART_COUNT,
				DOSAGE,
				MISSING_TIME_STAMP,
				CONSUMED_TIME_STAMP,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				REPLACE_PART				 
				FROM [LES].[TL_PCS_VECHILE_CONSUME_LOG] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TL_PCS_VECHILE_CONSUME_LOG_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TL_PCS_VECHILE_CONSUME_LOG]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TL_PCS_VECHILE_CONSUME_LOG_INSERT =
			@"INSERT INTO [LES].[TL_PCS_VECHILE_CONSUME_LOG] (
				KNR,
				REGION_NO,
				FOOTPRINT,
				LOCATION,
				PART_NO,
				CURRENT_PART_COUNT,
				DOSAGE,
				MISSING_TIME_STAMP,
				CONSUMED_TIME_STAMP,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				REPLACE_PART				 
			) VALUES (
				@KNR,
				@REGION_NO,
				@FOOTPRINT,
				@LOCATION,
				@PART_NO,
				@CURRENT_PART_COUNT,
				@DOSAGE,
				@MISSING_TIME_STAMP,
				@CONSUMED_TIME_STAMP,
				@PLANT,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@REPLACE_PART				 
			);SELECT @@IDENTITY;";
		private const string TL_PCS_VECHILE_CONSUME_LOG_UPDATE =
			@"UPDATE [LES].[TL_PCS_VECHILE_CONSUME_LOG] WITH(ROWLOCK) 
				SET KNR=@KNR,
				REGION_NO=@REGION_NO,
				FOOTPRINT=@FOOTPRINT,
				LOCATION=@LOCATION,
				PART_NO=@PART_NO,
				CURRENT_PART_COUNT=@CURRENT_PART_COUNT,
				DOSAGE=@DOSAGE,
				MISSING_TIME_STAMP=@MISSING_TIME_STAMP,
				CONSUMED_TIME_STAMP=@CONSUMED_TIME_STAMP,
				PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				REPLACE_PART=@REPLACE_PART				 
				WHERE 1=1  AND CONSUME_LOG_IDENTITY =@CONSUME_LOG_IDENTITY;";

		private const string TL_PCS_VECHILE_CONSUME_LOG_DELETE =
			@"DELETE FROM [LES].[TL_PCS_VECHILE_CONSUME_LOG] WITH(ROWLOCK)  
				WHERE 1=1  AND CONSUME_LOG_IDENTITY =@CONSUME_LOG_IDENTITY;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get VechileConsumeLogInfo
		/// </summary>
		/// <param name="CONSUME_LOG_IDENTITY">VechileConsumeLogInfo Primary key </param>
		/// <returns></returns> 
		public VechileConsumeLogInfo GetInfo(int aConsumeLogIdentity)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TL_PCS_VECHILE_CONSUME_LOG_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@CONSUME_LOG_IDENTITY", DbType.Int32, aConsumeLogIdentity);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateVechileConsumeLogInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>VechileConsumeLogInfo Collection </returns>
		public List<VechileConsumeLogInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TL_PCS_VECHILE_CONSUME_LOG_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>VechileConsumeLogInfo Collection </returns>
		public List<VechileConsumeLogInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<VechileConsumeLogInfo> list = new List<VechileConsumeLogInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateVechileConsumeLogInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<VechileConsumeLogInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[CONSUME_LOG_IDENTITY] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TL_PCS_VECHILE_CONSUME_LOG]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<VechileConsumeLogInfo> list = new List<VechileConsumeLogInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateVechileConsumeLogInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TL_PCS_VECHILE_CONSUME_LOG_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(VechileConsumeLogInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TL_PCS_VECHILE_CONSUME_LOG_INSERT);			
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@REGION_NO", DbType.String, info.RegionNo);
			db.AddInParameter(dbCommand, "@FOOTPRINT", DbType.Int32, info.Footprint);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@CURRENT_PART_COUNT", DbType.Decimal, info.CurrentPartCount);
			db.AddInParameter(dbCommand, "@DOSAGE", DbType.Decimal, info.Dosage);
			db.AddInParameter(dbCommand, "@MISSING_TIME_STAMP", DbType.DateTime, info.MissingTimeStamp);
			db.AddInParameter(dbCommand, "@CONSUMED_TIME_STAMP", DbType.DateTime, info.ConsumedTimeStamp);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@REPLACE_PART", DbType.String, info.ReplacePart);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(VechileConsumeLogInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TL_PCS_VECHILE_CONSUME_LOG_UPDATE);				
			db.AddInParameter(dbCommand, "@CONSUME_LOG_IDENTITY", DbType.Int32, info.ConsumeLogIdentity);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@REGION_NO", DbType.String, info.RegionNo);
			db.AddInParameter(dbCommand, "@FOOTPRINT", DbType.Int32, info.Footprint);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@CURRENT_PART_COUNT", DbType.Decimal, info.CurrentPartCount);
			db.AddInParameter(dbCommand, "@DOSAGE", DbType.Decimal, info.Dosage);
			db.AddInParameter(dbCommand, "@MISSING_TIME_STAMP", DbType.DateTime, info.MissingTimeStamp);
			db.AddInParameter(dbCommand, "@CONSUMED_TIME_STAMP", DbType.DateTime, info.ConsumedTimeStamp);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@REPLACE_PART", DbType.String, info.ReplacePart);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="CONSUME_LOG_IDENTITY">VechileConsumeLogInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aConsumeLogIdentity)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TL_PCS_VECHILE_CONSUME_LOG_DELETE);
		    db.AddInParameter(dbCommand, "@CONSUME_LOG_IDENTITY", DbType.Int32, aConsumeLogIdentity);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="CONSUME_LOG_IDENTITY">VechileConsumeLogInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aConsumeLogIdentity)
		{
		    string sql = "update [LES].[TL_PCS_VECHILE_CONSUME_LOG] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND CONSUME_LOG_IDENTITY =@CONSUME_LOG_IDENTITY;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@CONSUME_LOG_IDENTITY", DbType.Int32, aConsumeLogIdentity);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static VechileConsumeLogInfo CreateVechileConsumeLogInfo(IDataReader rdr)
		{
			VechileConsumeLogInfo info = new VechileConsumeLogInfo();
			info.ConsumeLogIdentity = DBConvert.GetInt32(rdr, rdr.GetOrdinal("CONSUME_LOG_IDENTITY"));			
			info.Knr = DBConvert.GetString(rdr, rdr.GetOrdinal("KNR"));			
			info.RegionNo = DBConvert.GetString(rdr, rdr.GetOrdinal("REGION_NO"));			
			info.Footprint = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("FOOTPRINT"));			
			info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.CurrentPartCount = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("CURRENT_PART_COUNT"));			
			info.Dosage = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("DOSAGE"));			
			info.MissingTimeStamp = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MISSING_TIME_STAMP"));			
			info.ConsumedTimeStamp = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CONSUMED_TIME_STAMP"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.ReplacePart = DBConvert.GetString(rdr, rdr.GetOrdinal("REPLACE_PART"));			
			return info;
		}
		
		#endregion
	}
}
