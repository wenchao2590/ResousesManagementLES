#region Declaim
//---------------------------------------------------------------------------
// Name:		RackDAL
// Function: 	Expose data in table TM_JIS_RACK from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月22日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// RackDAL对应表[TM_JIS_RACK]
    /// </summary>
    public partial class RackDAL : BusinessObjectProvider<RackInfo>
	{
		#region Sql Statements
		private const string TM_JIS_RACK_SELECT_BY_ID =
			@"SELECT PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				RACK,
				RACK_STATE,
				RACK_CNAME,
				RACK_ENAME,
				WORK_STATION_NO,
				CACULATE_POINT,
				BACKLOG_QUANTITY,
				BACKLOG_TIME,
				DELIVERY_TIME,
				UNLOADING_TIME,
				DOCK,
				RACK_ROW,
				RACK_COLUMN,
				UNLOADBLDG,
				LOCATION,
				PREVIEW_POINT,
				ARRANGEMENT_POINT,
				PRINT_TYPE,
				WORKAREA_DISTANCE,
				IS_DISPLAY_VIN,
				IS_ARRANGEMENT_EMPTY,
				CACULATE_TERM,
				RECEIVE_SUPPLIER,
				TRANSPORT_SUPPLIER,
				IS_SEPERATE_SHEET,
				SEPERATE_LOC,
				BUFFER_QNT,
				BRIDGE_QNT,
				WAREHOUSE,
				IS_TRANSFER_TRANSPORT,
				RUNNING_NO,
				KNR,
				BOX_PARTS,
				CACULATE_CHECK_POINT,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ROUTE,
				IS_CREATE_TASK				  
				FROM [LES].[TM_JIS_RACK] WITH(NOLOCK) WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND RACK =@RACK;";
			
		private const string TM_JIS_RACK_SELECT = 
			@"SELECT PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				RACK,
				RACK_STATE,
				RACK_CNAME,
				RACK_ENAME,
				WORK_STATION_NO,
				CACULATE_POINT,
				BACKLOG_QUANTITY,
				BACKLOG_TIME,
				DELIVERY_TIME,
				UNLOADING_TIME,
				DOCK,
				RACK_ROW,
				RACK_COLUMN,
				UNLOADBLDG,
				LOCATION,
				PREVIEW_POINT,
				ARRANGEMENT_POINT,
				PRINT_TYPE,
				WORKAREA_DISTANCE,
				IS_DISPLAY_VIN,
				IS_ARRANGEMENT_EMPTY,
				CACULATE_TERM,
				RECEIVE_SUPPLIER,
				TRANSPORT_SUPPLIER,
				IS_SEPERATE_SHEET,
				SEPERATE_LOC,
				BUFFER_QNT,
				BRIDGE_QNT,
				WAREHOUSE,
				IS_TRANSFER_TRANSPORT,
				RUNNING_NO,
				KNR,
				BOX_PARTS,
				CACULATE_CHECK_POINT,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ROUTE,
				IS_CREATE_TASK				 
				FROM [LES].[TM_JIS_RACK] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TM_JIS_RACK_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_JIS_RACK]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TM_JIS_RACK_INSERT =
			@"INSERT INTO [LES].[TM_JIS_RACK] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				RACK,
				RACK_STATE,
				RACK_CNAME,
				RACK_ENAME,
				WORK_STATION_NO,
				CACULATE_POINT,
				BACKLOG_QUANTITY,
				BACKLOG_TIME,
				DELIVERY_TIME,
				UNLOADING_TIME,
				DOCK,
				RACK_ROW,
				RACK_COLUMN,
				UNLOADBLDG,
				LOCATION,
				PREVIEW_POINT,
				ARRANGEMENT_POINT,
				PRINT_TYPE,
				WORKAREA_DISTANCE,
				IS_DISPLAY_VIN,
				IS_ARRANGEMENT_EMPTY,
				CACULATE_TERM,
				RECEIVE_SUPPLIER,
				TRANSPORT_SUPPLIER,
				IS_SEPERATE_SHEET,
				SEPERATE_LOC,
				BUFFER_QNT,
				BRIDGE_QNT,
				WAREHOUSE,
				IS_TRANSFER_TRANSPORT,
				RUNNING_NO,
				KNR,
				BOX_PARTS,
				CACULATE_CHECK_POINT,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ROUTE,
				IS_CREATE_TASK				 
			) VALUES (
				@PLANT,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@SUPPLIER_NUM,
				@RACK,
				@RACK_STATE,
				@RACK_CNAME,
				@RACK_ENAME,
				@WORK_STATION_NO,
				@CACULATE_POINT,
				@BACKLOG_QUANTITY,
				@BACKLOG_TIME,
				@DELIVERY_TIME,
				@UNLOADING_TIME,
				@DOCK,
				@RACK_ROW,
				@RACK_COLUMN,
				@UNLOADBLDG,
				@LOCATION,
				@PREVIEW_POINT,
				@ARRANGEMENT_POINT,
				@PRINT_TYPE,
				@WORKAREA_DISTANCE,
				@IS_DISPLAY_VIN,
				@IS_ARRANGEMENT_EMPTY,
				@CACULATE_TERM,
				@RECEIVE_SUPPLIER,
				@TRANSPORT_SUPPLIER,
				@IS_SEPERATE_SHEET,
				@SEPERATE_LOC,
				@BUFFER_QNT,
				@BRIDGE_QNT,
				@WAREHOUSE,
				@IS_TRANSFER_TRANSPORT,
				@RUNNING_NO,
				@KNR,
				@BOX_PARTS,
				@CACULATE_CHECK_POINT,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE,
				@ROUTE,
				@IS_CREATE_TASK				 
			);";
		private const string TM_JIS_RACK_UPDATE =
			@"UPDATE [LES].[TM_JIS_RACK] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				RACK=@RACK,
				RACK_STATE=@RACK_STATE,
				RACK_CNAME=@RACK_CNAME,
				RACK_ENAME=@RACK_ENAME,
				WORK_STATION_NO=@WORK_STATION_NO,
				CACULATE_POINT=@CACULATE_POINT,
				BACKLOG_QUANTITY=@BACKLOG_QUANTITY,
				BACKLOG_TIME=@BACKLOG_TIME,
				DELIVERY_TIME=@DELIVERY_TIME,
				UNLOADING_TIME=@UNLOADING_TIME,
				DOCK=@DOCK,
				RACK_ROW=@RACK_ROW,
				RACK_COLUMN=@RACK_COLUMN,
				UNLOADBLDG=@UNLOADBLDG,
				LOCATION=@LOCATION,
				PREVIEW_POINT=@PREVIEW_POINT,
				ARRANGEMENT_POINT=@ARRANGEMENT_POINT,
				PRINT_TYPE=@PRINT_TYPE,
				WORKAREA_DISTANCE=@WORKAREA_DISTANCE,
				IS_DISPLAY_VIN=@IS_DISPLAY_VIN,
				IS_ARRANGEMENT_EMPTY=@IS_ARRANGEMENT_EMPTY,
				CACULATE_TERM=@CACULATE_TERM,
				RECEIVE_SUPPLIER=@RECEIVE_SUPPLIER,
				TRANSPORT_SUPPLIER=@TRANSPORT_SUPPLIER,
				IS_SEPERATE_SHEET=@IS_SEPERATE_SHEET,
				SEPERATE_LOC=@SEPERATE_LOC,
				BUFFER_QNT=@BUFFER_QNT,
				BRIDGE_QNT=@BRIDGE_QNT,
				WAREHOUSE=@WAREHOUSE,
				IS_TRANSFER_TRANSPORT=@IS_TRANSFER_TRANSPORT,
				RUNNING_NO=@RUNNING_NO,
				KNR=@KNR,
				BOX_PARTS=@BOX_PARTS,
				CACULATE_CHECK_POINT=@CACULATE_CHECK_POINT,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE,
				ROUTE=@ROUTE,
				IS_CREATE_TASK=@IS_CREATE_TASK				 
				WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND RACK =@RACK;";

		private const string TM_JIS_RACK_DELETE =
			@"DELETE FROM [LES].[TM_JIS_RACK] WITH(ROWLOCK)  
				WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND RACK =@RACK;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get RackInfo
		/// </summary>
		/// <param name="RACK">RackInfo Primary key </param>
		/// <returns></returns> 
		public RackInfo GetInfo(string aPlant,
				string aAssemblyLine,
				string aRack)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_JIS_RACK_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, aPlant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, aAssemblyLine);
			db.AddInParameter(dbCommand, "@RACK", DbType.String, aRack);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateRackInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>RackInfo Collection </returns>
		public List<RackInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_JIS_RACK_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>RackInfo Collection </returns>
		public List<RackInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<RackInfo> list = new List<RackInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateRackInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<RackInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[RACK] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_JIS_RACK]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<RackInfo> list = new List<RackInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateRackInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_JIS_RACK_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public bool Add(RackInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_JIS_RACK_INSERT);			
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@RACK", DbType.String, info.Rack);
			db.AddInParameter(dbCommand, "@RACK_STATE", DbType.Int32, info.RackState);
			db.AddInParameter(dbCommand, "@RACK_CNAME", DbType.AnsiString, info.RackCname);
			db.AddInParameter(dbCommand, "@RACK_ENAME", DbType.AnsiString, info.RackEname);
			db.AddInParameter(dbCommand, "@WORK_STATION_NO", DbType.String, info.WorkStationNo);
			db.AddInParameter(dbCommand, "@CACULATE_POINT", DbType.String, info.CaculatePoint);
			db.AddInParameter(dbCommand, "@BACKLOG_QUANTITY", DbType.Int32, info.BacklogQuantity);
			db.AddInParameter(dbCommand, "@BACKLOG_TIME", DbType.Int32, info.BacklogTime);
			db.AddInParameter(dbCommand, "@DELIVERY_TIME", DbType.Int32, info.DeliveryTime);
			db.AddInParameter(dbCommand, "@UNLOADING_TIME", DbType.Int32, info.UnloadingTime);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@RACK_ROW", DbType.Int32, info.RackRow);
			db.AddInParameter(dbCommand, "@RACK_COLUMN", DbType.Int32, info.RackColumn);
			db.AddInParameter(dbCommand, "@UNLOADBLDG", DbType.AnsiString, info.Unloadbldg);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@PREVIEW_POINT", DbType.String, info.PreviewPoint);
			db.AddInParameter(dbCommand, "@ARRANGEMENT_POINT", DbType.String, info.ArrangementPoint);
			db.AddInParameter(dbCommand, "@PRINT_TYPE", DbType.AnsiString, info.PrintType);
			db.AddInParameter(dbCommand, "@WORKAREA_DISTANCE", DbType.Int32, info.WorkareaDistance);
			db.AddInParameter(dbCommand, "@IS_DISPLAY_VIN", DbType.Boolean, info.IsDisplayVin);
			db.AddInParameter(dbCommand, "@IS_ARRANGEMENT_EMPTY", DbType.Boolean, info.IsArrangementEmpty);
			db.AddInParameter(dbCommand, "@CACULATE_TERM", DbType.Int32, info.CaculateTerm);
			db.AddInParameter(dbCommand, "@RECEIVE_SUPPLIER", DbType.AnsiString, info.ReceiveSupplier);
			db.AddInParameter(dbCommand, "@TRANSPORT_SUPPLIER", DbType.String, info.TransportSupplier);
			db.AddInParameter(dbCommand, "@IS_SEPERATE_SHEET", DbType.Int32, info.IsSeperateSheet);
			db.AddInParameter(dbCommand, "@SEPERATE_LOC", DbType.String, info.SeperateLoc);
			db.AddInParameter(dbCommand, "@BUFFER_QNT", DbType.Int32, info.BufferQnt);
			db.AddInParameter(dbCommand, "@BRIDGE_QNT", DbType.Int32, info.BridgeQnt);
			db.AddInParameter(dbCommand, "@WAREHOUSE", DbType.String, info.Warehouse);
			db.AddInParameter(dbCommand, "@IS_TRANSFER_TRANSPORT", DbType.Int32, info.IsTransferTransport);
			db.AddInParameter(dbCommand, "@RUNNING_NO", DbType.String, info.RunningNo);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@CACULATE_CHECK_POINT", DbType.String, info.CaculateCheckPoint);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@IS_CREATE_TASK", DbType.Int32, info.IsCreateTask);
			return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(RackInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_JIS_RACK_UPDATE);				
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@RACK", DbType.String, info.Rack);
			db.AddInParameter(dbCommand, "@RACK_STATE", DbType.Int32, info.RackState);
			db.AddInParameter(dbCommand, "@RACK_CNAME", DbType.AnsiString, info.RackCname);
			db.AddInParameter(dbCommand, "@RACK_ENAME", DbType.AnsiString, info.RackEname);
			db.AddInParameter(dbCommand, "@WORK_STATION_NO", DbType.String, info.WorkStationNo);
			db.AddInParameter(dbCommand, "@CACULATE_POINT", DbType.String, info.CaculatePoint);
			db.AddInParameter(dbCommand, "@BACKLOG_QUANTITY", DbType.Int32, info.BacklogQuantity);
			db.AddInParameter(dbCommand, "@BACKLOG_TIME", DbType.Int32, info.BacklogTime);
			db.AddInParameter(dbCommand, "@DELIVERY_TIME", DbType.Int32, info.DeliveryTime);
			db.AddInParameter(dbCommand, "@UNLOADING_TIME", DbType.Int32, info.UnloadingTime);
			db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
			db.AddInParameter(dbCommand, "@RACK_ROW", DbType.Int32, info.RackRow);
			db.AddInParameter(dbCommand, "@RACK_COLUMN", DbType.Int32, info.RackColumn);
			db.AddInParameter(dbCommand, "@UNLOADBLDG", DbType.AnsiString, info.Unloadbldg);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@PREVIEW_POINT", DbType.String, info.PreviewPoint);
			db.AddInParameter(dbCommand, "@ARRANGEMENT_POINT", DbType.String, info.ArrangementPoint);
			db.AddInParameter(dbCommand, "@PRINT_TYPE", DbType.AnsiString, info.PrintType);
			db.AddInParameter(dbCommand, "@WORKAREA_DISTANCE", DbType.Int32, info.WorkareaDistance);
			db.AddInParameter(dbCommand, "@IS_DISPLAY_VIN", DbType.Boolean, info.IsDisplayVin);
			db.AddInParameter(dbCommand, "@IS_ARRANGEMENT_EMPTY", DbType.Boolean, info.IsArrangementEmpty);
			db.AddInParameter(dbCommand, "@CACULATE_TERM", DbType.Int32, info.CaculateTerm);
			db.AddInParameter(dbCommand, "@RECEIVE_SUPPLIER", DbType.AnsiString, info.ReceiveSupplier);
			db.AddInParameter(dbCommand, "@TRANSPORT_SUPPLIER", DbType.String, info.TransportSupplier);
			db.AddInParameter(dbCommand, "@IS_SEPERATE_SHEET", DbType.Int32, info.IsSeperateSheet);
			db.AddInParameter(dbCommand, "@SEPERATE_LOC", DbType.String, info.SeperateLoc);
			db.AddInParameter(dbCommand, "@BUFFER_QNT", DbType.Int32, info.BufferQnt);
			db.AddInParameter(dbCommand, "@BRIDGE_QNT", DbType.Int32, info.BridgeQnt);
			db.AddInParameter(dbCommand, "@WAREHOUSE", DbType.String, info.Warehouse);
			db.AddInParameter(dbCommand, "@IS_TRANSFER_TRANSPORT", DbType.Int32, info.IsTransferTransport);
			db.AddInParameter(dbCommand, "@RUNNING_NO", DbType.String, info.RunningNo);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@CACULATE_CHECK_POINT", DbType.String, info.CaculateCheckPoint);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@IS_CREATE_TASK", DbType.Int32, info.IsCreateTask);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="RACK">RackInfo Primary key </param>
		/// <returns></returns>
		public int Delete(string aPlant,
				string aAssemblyLine,
				string aRack)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_JIS_RACK_DELETE);
		    db.AddInParameter(dbCommand, "@PLANT", DbType.String, aPlant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, aAssemblyLine);
			db.AddInParameter(dbCommand, "@RACK", DbType.String, aRack);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="RACK">RackInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,string aPlant,
				string aAssemblyLine,
				string aRack)
		{
		    string sql = "update [LES].[TM_JIS_RACK] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND RACK =@RACK;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, aPlant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, aAssemblyLine);
			db.AddInParameter(dbCommand, "@RACK", DbType.String, aRack);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static RackInfo CreateRackInfo(IDataReader rdr)
		{
			RackInfo info = new RackInfo();
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.Rack = DBConvert.GetString(rdr, rdr.GetOrdinal("RACK"));			
			info.RackState = DBConvert.GetInt32(rdr, rdr.GetOrdinal("RACK_STATE"));			
			info.RackCname = DBConvert.GetString(rdr, rdr.GetOrdinal("RACK_CNAME"));			
			info.RackEname = DBConvert.GetString(rdr, rdr.GetOrdinal("RACK_ENAME"));			
			info.WorkStationNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WORK_STATION_NO"));			
			info.CaculatePoint = DBConvert.GetString(rdr, rdr.GetOrdinal("CACULATE_POINT"));			
			info.BacklogQuantity = DBConvert.GetInt32(rdr, rdr.GetOrdinal("BACKLOG_QUANTITY"));			
			info.BacklogTime = DBConvert.GetInt32(rdr, rdr.GetOrdinal("BACKLOG_TIME"));			
			info.DeliveryTime = DBConvert.GetInt32(rdr, rdr.GetOrdinal("DELIVERY_TIME"));			
			info.UnloadingTime = DBConvert.GetInt32(rdr, rdr.GetOrdinal("UNLOADING_TIME"));			
			info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));			
			info.RackRow = DBConvert.GetInt32(rdr, rdr.GetOrdinal("RACK_ROW"));			
			info.RackColumn = DBConvert.GetInt32(rdr, rdr.GetOrdinal("RACK_COLUMN"));			
			info.Unloadbldg = DBConvert.GetString(rdr, rdr.GetOrdinal("UNLOADBLDG"));			
			info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));			
			info.PreviewPoint = DBConvert.GetString(rdr, rdr.GetOrdinal("PREVIEW_POINT"));			
			info.ArrangementPoint = DBConvert.GetString(rdr, rdr.GetOrdinal("ARRANGEMENT_POINT"));			
			info.PrintType = DBConvert.GetString(rdr, rdr.GetOrdinal("PRINT_TYPE"));			
			info.WorkareaDistance = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("WORKAREA_DISTANCE"));			
			info.IsDisplayVin = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("IS_DISPLAY_VIN"));			
			info.IsArrangementEmpty = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("IS_ARRANGEMENT_EMPTY"));			
			info.CaculateTerm = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("CACULATE_TERM"));			
			info.ReceiveSupplier = DBConvert.GetString(rdr, rdr.GetOrdinal("RECEIVE_SUPPLIER"));			
			info.TransportSupplier = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANSPORT_SUPPLIER"));			
			info.IsSeperateSheet = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_SEPERATE_SHEET"));			
			info.SeperateLoc = DBConvert.GetString(rdr, rdr.GetOrdinal("SEPERATE_LOC"));			
			info.BufferQnt = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BUFFER_QNT"));			
			info.BridgeQnt = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BRIDGE_QNT"));			
			info.Warehouse = DBConvert.GetString(rdr, rdr.GetOrdinal("WAREHOUSE"));			
			info.IsTransferTransport = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_TRANSFER_TRANSPORT"));			
			info.RunningNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RUNNING_NO"));			
			info.Knr = DBConvert.GetString(rdr, rdr.GetOrdinal("KNR"));			
			info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));			
			info.CaculateCheckPoint = DBConvert.GetString(rdr, rdr.GetOrdinal("CACULATE_CHECK_POINT"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));			
			info.IsCreateTask = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_CREATE_TASK"));			
			return info;
		}
		
		#endregion
	}
}
