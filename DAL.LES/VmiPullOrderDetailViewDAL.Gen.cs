#region Declaim
//---------------------------------------------------------------------------
// Name:		VmiPullOrderDetailViewDAL
// Function: 	Expose data in table V_MPM_VMI_PULL_ORDER_DETAIL_VIEW from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月6日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#endregion

namespace DAL.LES
{
    //// <summary>
    /// VmiPullOrderDetailViewDAL对应表[V_MPM_VMI_PULL_ORDER_DETAIL_VIEW]
    /// </summary>
    public partial class VmiPullOrderDetailViewDAL : BusinessObjectProvider<VmiPullOrderDetailViewInfo>
    {
        #region Sql Statements
        private const string V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_SELECT_BY_ID =
            "";

        private const string V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_SELECT =
            @"SELECT ID,
				FID,
				ORDER_FID,
				ORDER_CODE,
				ROW_NO,
				SUPPLIER_NUM,
				WORKSHOP_SECTION,
				LOCATION,
				PART_NO,
				PART_VERSION,
				PART_CNAME,
				PART_ENAME,
				MEASURING_UNIT_NO,
				PACKAGE,
				PACKAGE_MODEL,
				REQUIRED_PACKAGE_QTY,
				REQUIRED_PART_QTY,
				ASN_DRAFT_QTY,
				ASN_CONFIRM_QTY,
				ACTUAL_PACKAGE_QTY,
				ACTUAL_PART_QTY,
				COMMENTS,
				VALID_FLAG,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
				FROM [LES].[V_MPM_VMI_PULL_ORDER_DETAIL_VIEW] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

        private const string V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_SELECT_COUNTS =
            @"SELECT count(*) FROM [LES].[V_MPM_VMI_PULL_ORDER_DETAIL_VIEW]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

        private const string V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_INSERT =
            @"INSERT INTO [LES].[V_MPM_VMI_PULL_ORDER_DETAIL_VIEW] (
				ID,
				FID,
				ORDER_FID,
				ORDER_CODE,
				ROW_NO,
				SUPPLIER_NUM,
				WORKSHOP_SECTION,
				LOCATION,
				PART_NO,
				PART_VERSION,
				PART_CNAME,
				PART_ENAME,
				MEASURING_UNIT_NO,
				PACKAGE,
				PACKAGE_MODEL,
				REQUIRED_PACKAGE_QTY,
				REQUIRED_PART_QTY,
				ASN_DRAFT_QTY,
				ASN_CONFIRM_QTY,
				ACTUAL_PACKAGE_QTY,
				ACTUAL_PART_QTY,
				COMMENTS,
				VALID_FLAG,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
			) VALUES (
				@ID,
				@FID,
				@ORDER_FID,
				@ORDER_CODE,
				@ROW_NO,
				@SUPPLIER_NUM,
				@WORKSHOP_SECTION,
				@LOCATION,
				@PART_NO,
				@PART_VERSION,
				@PART_CNAME,
				@PART_ENAME,
				@MEASURING_UNIT_NO,
				@PACKAGE,
				@PACKAGE_MODEL,
				@REQUIRED_PACKAGE_QTY,
				@REQUIRED_PART_QTY,
				@ASN_DRAFT_QTY,
				@ASN_CONFIRM_QTY,
				@ACTUAL_PACKAGE_QTY,
				@ACTUAL_PART_QTY,
				@COMMENTS,
				@VALID_FLAG,
				GETDATE(),
				@CREATE_USER,
				@MODIFY_DATE,
				@MODIFY_USER				 
			);";
        private const string V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_UPDATE =
            "";

        private const string V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_DELETE =
            "";
        #endregion

        #region Access Methods

        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="textWhere">Conditon</param>
        /// <param name="orderText">Sort</param>
        /// <returns>VmiPullOrderDetailViewInfo Collection </returns>
        public List<VmiPullOrderDetailViewInfo> GetList(string textWhere, string orderText)
        {
            string query = string.Empty;
            if (string.IsNullOrEmpty(textWhere))
                query = string.Empty;
            else
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    query = textWhere;
                else
                    query = " and " + textWhere;
            }
            if (!string.IsNullOrEmpty(orderText))
                query += " order by " + orderText;

            return GetList(string.Format(V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_SELECT, query));
        }
        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>VmiPullOrderDetailViewInfo Collection </returns>
        public List<VmiPullOrderDetailViewInfo> GetList(string sql)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<VmiPullOrderDetailViewInfo> list = new List<VmiPullOrderDetailViewInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateVmiPullOrderDetailViewInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
        public List<VmiPullOrderDetailViewInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
        {
            if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
            string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
            else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[nid] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[V_MPM_VMI_PULL_ORDER_DETAIL_VIEW]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<VmiPullOrderDetailViewInfo> list = new List<VmiPullOrderDetailViewInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateVmiPullOrderDetailViewInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            if (string.IsNullOrEmpty(textWhere))
                textWhere = string.Empty;
            else
            {
                if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    textWhere = " and " + textWhere;
            }
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_SELECT_COUNTS, textWhere));
            return Convert.ToInt32(db.ExecuteScalar(cmd));
        }
        /// <summary>
        /// Add
        /// </summary>
        /// <param name="info"> info</param>
        public bool Add(VmiPullOrderDetailViewInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_INSERT);
            db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
            db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
            db.AddInParameter(dbCommand, "@ORDER_FID", DbType.Guid, info.OrderFid);
            db.AddInParameter(dbCommand, "@ORDER_CODE", DbType.String, info.OrderCode);
            db.AddInParameter(dbCommand, "@ROW_NO", DbType.Int32, info.RowNo);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@WORKSHOP_SECTION", DbType.String, info.WorkshopSection);
            db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
            db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
            db.AddInParameter(dbCommand, "@PART_VERSION", DbType.String, info.PartVersion);
            db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
            db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
            db.AddInParameter(dbCommand, "@MEASURING_UNIT_NO", DbType.String, info.MeasuringUnitNo);
            db.AddInParameter(dbCommand, "@PACKAGE", DbType.Decimal, info.Package);
            db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
            db.AddInParameter(dbCommand, "@REQUIRED_PACKAGE_QTY", DbType.Int32, info.RequiredPackageQty);
            db.AddInParameter(dbCommand, "@REQUIRED_PART_QTY", DbType.Decimal, info.RequiredPartQty);
            db.AddInParameter(dbCommand, "@ASN_DRAFT_QTY", DbType.Decimal, info.AsnDraftQty);
            db.AddInParameter(dbCommand, "@ASN_CONFIRM_QTY", DbType.Decimal, info.AsnConfirmQty);
            db.AddInParameter(dbCommand, "@ACTUAL_PACKAGE_QTY", DbType.Int32, info.ActualPackageQty);
            db.AddInParameter(dbCommand, "@ACTUAL_PART_QTY", DbType.Decimal, info.ActualPartQty);
            db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
            db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
            db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
            db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
            db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
            db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
            return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;
        }
        /// <summary>
        /// GetInsertSql
        /// </summary>
        /// <param name="info"> info</param>

        /// <summary>
        /// Update
        /// </summary>
        /// <param name="info">info</param>
        public int Update(VmiPullOrderDetailViewInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_MPM_VMI_PULL_ORDER_DETAIL_VIEW_UPDATE);
            db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
            db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
            db.AddInParameter(dbCommand, "@ORDER_FID", DbType.Guid, info.OrderFid);
            db.AddInParameter(dbCommand, "@ORDER_CODE", DbType.String, info.OrderCode);
            db.AddInParameter(dbCommand, "@ROW_NO", DbType.Int32, info.RowNo);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@WORKSHOP_SECTION", DbType.String, info.WorkshopSection);
            db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
            db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
            db.AddInParameter(dbCommand, "@PART_VERSION", DbType.String, info.PartVersion);
            db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
            db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
            db.AddInParameter(dbCommand, "@MEASURING_UNIT_NO", DbType.String, info.MeasuringUnitNo);
            db.AddInParameter(dbCommand, "@PACKAGE", DbType.Decimal, info.Package);
            db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
            db.AddInParameter(dbCommand, "@REQUIRED_PACKAGE_QTY", DbType.Int32, info.RequiredPackageQty);
            db.AddInParameter(dbCommand, "@REQUIRED_PART_QTY", DbType.Decimal, info.RequiredPartQty);
            db.AddInParameter(dbCommand, "@ASN_DRAFT_QTY", DbType.Decimal, info.AsnDraftQty);
            db.AddInParameter(dbCommand, "@ASN_CONFIRM_QTY", DbType.Decimal, info.AsnConfirmQty);
            db.AddInParameter(dbCommand, "@ACTUAL_PACKAGE_QTY", DbType.Int32, info.ActualPackageQty);
            db.AddInParameter(dbCommand, "@ACTUAL_PART_QTY", DbType.Decimal, info.ActualPartQty);
            db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
            db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
            db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
            db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
            db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
            db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }
        #endregion

        #region Helpers   

        private static VmiPullOrderDetailViewInfo CreateVmiPullOrderDetailViewInfo(IDataReader rdr)
        {
            VmiPullOrderDetailViewInfo info = new VmiPullOrderDetailViewInfo();
            info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));
            info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));
            info.OrderFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("ORDER_FID"));
            info.OrderCode = DBConvert.GetString(rdr, rdr.GetOrdinal("ORDER_CODE"));
            info.RowNo = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ROW_NO"));
            info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));
            info.WorkshopSection = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP_SECTION"));
            info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));
            info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));
            info.PartVersion = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_VERSION"));
            info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));
            info.PartEname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_ENAME"));
            info.MeasuringUnitNo = DBConvert.GetString(rdr, rdr.GetOrdinal("MEASURING_UNIT_NO"));
            info.Package = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("PACKAGE"));
            info.PackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("PACKAGE_MODEL"));
            info.RequiredPackageQty = DBConvert.GetInt32(rdr, rdr.GetOrdinal("REQUIRED_PACKAGE_QTY"));
            info.RequiredPartQty = DBConvert.GetDecimal(rdr, rdr.GetOrdinal("REQUIRED_PART_QTY"));
            info.AsnDraftQty = DBConvert.GetDecimal(rdr, rdr.GetOrdinal("ASN_DRAFT_QTY"));
            info.AsnConfirmQty = DBConvert.GetDecimal(rdr, rdr.GetOrdinal("ASN_CONFIRM_QTY"));
            info.ActualPackageQty = DBConvert.GetInt32(rdr, rdr.GetOrdinal("ACTUAL_PACKAGE_QTY"));
            info.ActualPartQty = DBConvert.GetDecimal(rdr, rdr.GetOrdinal("ACTUAL_PART_QTY"));
            info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));
            info.ValidFlag = DBConvert.GetBool(rdr, rdr.GetOrdinal("VALID_FLAG"));
            info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));
            info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));
            info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));
            info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));
            return info;
        }

        #endregion
    }
}
