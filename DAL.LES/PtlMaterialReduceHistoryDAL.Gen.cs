#region Declaim
//---------------------------------------------------------------------------
// Name:		PtlMaterialReduceHistoryDAL
// Function: 	Expose data in table TI_MID_PTL_MATERIAL_REDUCE_HISTORY from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年1月18日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// PtlMaterialReduceHistoryDAL对应表[TI_MID_PTL_MATERIAL_REDUCE_HISTORY]
    /// </summary>
    public partial class PtlMaterialReduceHistoryDAL : BusinessObjectProvider<PtlMaterialReduceHistoryInfo>
	{
		#region Sql Statements
		private const string TI_MID_PTL_MATERIAL_REDUCE_HISTORY_SELECT_BY_ID =
			@"SELECT OrderNo,
				OrderStatus,
				VIN,
				SeqNo,
				PartNo,
				PartName,
				Qty,
				BoxPart,
				OrderSyncTime,
				CreateTime,
				ID,
				WM_NO,
				FID,
				PLANT				  
				FROM [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY] WITH(NOLOCK) WHERE 1=1  AND ID =@ID;";
			
		private const string TI_MID_PTL_MATERIAL_REDUCE_HISTORY_SELECT = 
			@"SELECT OrderNo,
				OrderStatus,
				VIN,
				SeqNo,
				PartNo,
				PartName,
				Qty,
				BoxPart,
				OrderSyncTime,
				CreateTime,
				ID,
				WM_NO,
				FID,
				PLANT				 
				FROM [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TI_MID_PTL_MATERIAL_REDUCE_HISTORY_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TI_MID_PTL_MATERIAL_REDUCE_HISTORY_INSERT =
			@"INSERT INTO [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY] (
				OrderNo,
				OrderStatus,
				VIN,
				SeqNo,
				PartNo,
				PartName,
				Qty,
				BoxPart,
				OrderSyncTime,
				CreateTime,
				WM_NO,
				FID,
				PLANT				 
			) VALUES (
				@OrderNo,
				@OrderStatus,
				@VIN,
				@SeqNo,
				@PartNo,
				@PartName,
				@Qty,
				@BoxPart,
				@OrderSyncTime,
				@CreateTime,
				@WM_NO,
				@FID,
				@PLANT				 
			);SELECT @@IDENTITY;";
		private const string TI_MID_PTL_MATERIAL_REDUCE_HISTORY_UPDATE =
			@"UPDATE [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY] WITH(ROWLOCK) 
				SET OrderNo=@OrderNo,
				OrderStatus=@OrderStatus,
				VIN=@VIN,
				SeqNo=@SeqNo,
				PartNo=@PartNo,
				PartName=@PartName,
				Qty=@Qty,
				BoxPart=@BoxPart,
				OrderSyncTime=@OrderSyncTime,
				CreateTime=@CreateTime,
				WM_NO=@WM_NO,
				FID=@FID,
				PLANT=@PLANT				 
				WHERE 1=1  AND ID =@ID;";

		private const string TI_MID_PTL_MATERIAL_REDUCE_HISTORY_DELETE =
			@"DELETE FROM [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY] WITH(ROWLOCK)  
				WHERE 1=1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get PtlMaterialReduceHistoryInfo
		/// </summary>
		/// <param name="ID">PtlMaterialReduceHistoryInfo Primary key </param>
		/// <returns></returns> 
		public PtlMaterialReduceHistoryInfo GetInfo(int aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_MID_PTL_MATERIAL_REDUCE_HISTORY_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int32, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreatePtlMaterialReduceHistoryInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>PtlMaterialReduceHistoryInfo Collection </returns>
		public List<PtlMaterialReduceHistoryInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TI_MID_PTL_MATERIAL_REDUCE_HISTORY_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>PtlMaterialReduceHistoryInfo Collection </returns>
		public List<PtlMaterialReduceHistoryInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<PtlMaterialReduceHistoryInfo> list = new List<PtlMaterialReduceHistoryInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreatePtlMaterialReduceHistoryInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<PtlMaterialReduceHistoryInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<PtlMaterialReduceHistoryInfo> list = new List<PtlMaterialReduceHistoryInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreatePtlMaterialReduceHistoryInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TI_MID_PTL_MATERIAL_REDUCE_HISTORY_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(PtlMaterialReduceHistoryInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TI_MID_PTL_MATERIAL_REDUCE_HISTORY_INSERT);			
			db.AddInParameter(dbCommand, "@OrderNo", DbType.String, info.Orderno);
			db.AddInParameter(dbCommand, "@OrderStatus", DbType.Int32, info.Orderstatus);
			db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
			db.AddInParameter(dbCommand, "@SeqNo", DbType.String, info.Seqno);
			db.AddInParameter(dbCommand, "@PartNo", DbType.String, info.Partno);
			db.AddInParameter(dbCommand, "@PartName", DbType.String, info.Partname);
			db.AddInParameter(dbCommand, "@Qty", DbType.Decimal, info.Qty);
			db.AddInParameter(dbCommand, "@BoxPart", DbType.String, info.Boxpart);
			db.AddInParameter(dbCommand, "@OrderSyncTime", DbType.DateTime, info.Ordersynctime);
			db.AddInParameter(dbCommand, "@CreateTime", DbType.DateTime, info.Createtime);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(PtlMaterialReduceHistoryInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_MID_PTL_MATERIAL_REDUCE_HISTORY_UPDATE);				
			db.AddInParameter(dbCommand, "@OrderNo", DbType.String, info.Orderno);
			db.AddInParameter(dbCommand, "@OrderStatus", DbType.Int32, info.Orderstatus);
			db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
			db.AddInParameter(dbCommand, "@SeqNo", DbType.String, info.Seqno);
			db.AddInParameter(dbCommand, "@PartNo", DbType.String, info.Partno);
			db.AddInParameter(dbCommand, "@PartName", DbType.String, info.Partname);
			db.AddInParameter(dbCommand, "@Qty", DbType.Decimal, info.Qty);
			db.AddInParameter(dbCommand, "@BoxPart", DbType.String, info.Boxpart);
			db.AddInParameter(dbCommand, "@OrderSyncTime", DbType.DateTime, info.Ordersynctime);
			db.AddInParameter(dbCommand, "@CreateTime", DbType.DateTime, info.Createtime);
			db.AddInParameter(dbCommand, "@ID", DbType.Int32, info.Id);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">PtlMaterialReduceHistoryInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_MID_PTL_MATERIAL_REDUCE_HISTORY_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int32, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">PtlMaterialReduceHistoryInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aId)
		{
		    string sql = "update [LES].[TI_MID_PTL_MATERIAL_REDUCE_HISTORY] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int32, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static PtlMaterialReduceHistoryInfo CreatePtlMaterialReduceHistoryInfo(IDataReader rdr)
		{
			PtlMaterialReduceHistoryInfo info = new PtlMaterialReduceHistoryInfo();
			info.Orderno = DBConvert.GetString(rdr, rdr.GetOrdinal("OrderNo"));			
			info.Orderstatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("OrderStatus"));			
			info.Vin = DBConvert.GetString(rdr, rdr.GetOrdinal("VIN"));			
			info.Seqno = DBConvert.GetString(rdr, rdr.GetOrdinal("SeqNo"));			
			info.Partno = DBConvert.GetString(rdr, rdr.GetOrdinal("PartNo"));			
			info.Partname = DBConvert.GetString(rdr, rdr.GetOrdinal("PartName"));			
			info.Qty = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("Qty"));			
			info.Boxpart = DBConvert.GetString(rdr, rdr.GetOrdinal("BoxPart"));			
			info.Ordersynctime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("OrderSyncTime"));			
			info.Createtime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CreateTime"));			
			info.Id = DBConvert.GetInt32(rdr, rdr.GetOrdinal("ID"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			return info;
		}
		
		#endregion
	}
}
