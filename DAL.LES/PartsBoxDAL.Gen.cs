#region Declaim
//---------------------------------------------------------------------------
// Name:		PartsBoxDAL
// Function: 	Expose data in table V_ALL_PARTS_BOX from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年4月2日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// PartsBoxDAL对应表[V_ALL_PARTS_BOX]
    /// </summary>
    public partial class PartsBoxDAL : BusinessObjectProvider<PartsBoxInfo>
	{
		#region Sql Statements
		private const string V_ALL_PARTS_BOX_SELECT_BY_ID =
			"";
			
		private const string V_ALL_PARTS_BOX_SELECT = 
			@"SELECT PULL_MODE,
				BOX_PARTS,
				BOX_PARTS_NAME,
				SUPPLIER_NUM,
				ASSEMBLY_LINE,
				T_WM_NO,
				T_ZONE_NO,
				S_WM_NO,
				S_ZONE_NO,
				PLANT,
				WORKSHOP				 
				FROM [LES].[V_ALL_PARTS_BOX] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string V_ALL_PARTS_BOX_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[V_ALL_PARTS_BOX]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string V_ALL_PARTS_BOX_INSERT =
			@"INSERT INTO [LES].[V_ALL_PARTS_BOX] (
				PULL_MODE,
				BOX_PARTS,
				BOX_PARTS_NAME,
				SUPPLIER_NUM,
				ASSEMBLY_LINE,
				T_WM_NO,
				T_ZONE_NO,
				S_WM_NO,
				S_ZONE_NO,
				PLANT,
				WORKSHOP				 
			) VALUES (
				@PULL_MODE,
				@BOX_PARTS,
				@BOX_PARTS_NAME,
				@SUPPLIER_NUM,
				@ASSEMBLY_LINE,
				@T_WM_NO,
				@T_ZONE_NO,
				@S_WM_NO,
				@S_ZONE_NO,
				@PLANT,
				@WORKSHOP				 
			);";
		private const string V_ALL_PARTS_BOX_UPDATE =
			"";

		private const string V_ALL_PARTS_BOX_DELETE =
			"";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>PartsBoxInfo Collection </returns>
		public List<PartsBoxInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(V_ALL_PARTS_BOX_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>PartsBoxInfo Collection </returns>
		public List<PartsBoxInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<PartsBoxInfo> list = new List<PartsBoxInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreatePartsBoxInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<PartsBoxInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "PULL_MODE desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[V_ALL_PARTS_BOX]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<PartsBoxInfo> list = new List<PartsBoxInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreatePartsBoxInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(V_ALL_PARTS_BOX_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public bool Add(PartsBoxInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(V_ALL_PARTS_BOX_INSERT);			
			db.AddInParameter(dbCommand, "@PULL_MODE", DbType.Int32, info.PullMode);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@BOX_PARTS_NAME", DbType.String, info.BoxPartsName);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@T_WM_NO", DbType.String, info.TWmNo);
			db.AddInParameter(dbCommand, "@T_ZONE_NO", DbType.String, info.TZoneNo);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(PartsBoxInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(V_ALL_PARTS_BOX_UPDATE);				
			db.AddInParameter(dbCommand, "@PULL_MODE", DbType.Int32, info.PullMode);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@BOX_PARTS_NAME", DbType.String, info.BoxPartsName);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@T_WM_NO", DbType.String, info.TWmNo);
			db.AddInParameter(dbCommand, "@T_ZONE_NO", DbType.String, info.TZoneNo);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		
		
		#endregion
		  
		#region Helpers   
	  
		private static PartsBoxInfo CreatePartsBoxInfo(IDataReader rdr)
		{
			PartsBoxInfo info = new PartsBoxInfo();
			info.PullMode = DBConvert.GetInt32(rdr, rdr.GetOrdinal("PULL_MODE"));			
			info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));			
			info.BoxPartsName = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS_NAME"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.TWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("T_WM_NO"));			
			info.TZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("T_ZONE_NO"));			
			info.SWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_WM_NO"));			
			info.SZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_ZONE_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			return info;
		}
		
		#endregion
	}
}
