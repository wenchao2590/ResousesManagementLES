#region Declaim
//---------------------------------------------------------------------------
// Name:		TaskDAL
// Function: 	Expose data in table TT_EPS_TASK from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月22日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// TaskDAL对应表[TT_EPS_TASK]
    /// </summary>
    public partial class TaskDAL : BusinessObjectProvider<TaskInfo>
	{
		#region Sql Statements
		private const string TT_EPS_TASK_SELECT_BY_ID =
			@"SELECT TASK_SN,
				TASK_TIME,
				TASK_STATUS,
				TASK_PRIORITY,
				PLANT,
				ASSEMBLY_LINE,
				LOCATION,
				PACKAGE,
				USAGE,
				E_LOCATION,
				E_ASSEMBLY_LINE,
				E_PLANT,
				D_LOCATION,
				D_ASSEMBLY_LINE,
				D_PLANT,
				PART_NO,
				REQUEST_TIME,
				DELIVER_TIME,
				ALARM_TIME,
				ACTUAL_QUANTITY,
				ROUTE,
				ROUTE_COMBINATION_LIMIT,
				ZONE,
				ZONE_SCHEDULE_TYPE,
				TRIGGER_STATUS,
				COMBINATION_TYPE,
				PULL_TYPE,
				COMPULSORY_FLAG,
				MIN_STORAGE,
				MAX_STORAGE,
				CURRENT_STORAGE,
				BUTTON_ID,
				TAG_REQUEST_SN,
				SESSION_SN,
				SCREEN_LOCATION,
				BAHNHOF_NO,
				DOLLY,
				WMS_SEND_TIME,
				WMS_SEND_STATUS,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				PICKUP_TIME,
				ARRIVE_TIME,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				RUNSHEET_NO,
				PRINT_STATE,
				PRINT_TIMES,
				PLANT_ZONE				  
				FROM [LES].[TT_EPS_TASK] WITH(NOLOCK) WHERE 1=1  AND TASK_SN =@TASK_SN;";
			
		private const string TT_EPS_TASK_SELECT = 
			@"SELECT TASK_SN,
				TASK_TIME,
				TASK_STATUS,
				TASK_PRIORITY,
				PLANT,
				ASSEMBLY_LINE,
				LOCATION,
				PACKAGE,
				USAGE,
				E_LOCATION,
				E_ASSEMBLY_LINE,
				E_PLANT,
				D_LOCATION,
				D_ASSEMBLY_LINE,
				D_PLANT,
				PART_NO,
				REQUEST_TIME,
				DELIVER_TIME,
				ALARM_TIME,
				ACTUAL_QUANTITY,
				ROUTE,
				ROUTE_COMBINATION_LIMIT,
				ZONE,
				ZONE_SCHEDULE_TYPE,
				TRIGGER_STATUS,
				COMBINATION_TYPE,
				PULL_TYPE,
				COMPULSORY_FLAG,
				MIN_STORAGE,
				MAX_STORAGE,
				CURRENT_STORAGE,
				BUTTON_ID,
				TAG_REQUEST_SN,
				SESSION_SN,
				SCREEN_LOCATION,
				BAHNHOF_NO,
				DOLLY,
				WMS_SEND_TIME,
				WMS_SEND_STATUS,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				PICKUP_TIME,
				ARRIVE_TIME,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				RUNSHEET_NO,
				PRINT_STATE,
				PRINT_TIMES,
				PLANT_ZONE				 
				FROM [LES].[TT_EPS_TASK] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TT_EPS_TASK_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_EPS_TASK]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TT_EPS_TASK_INSERT =
			@"INSERT INTO [LES].[TT_EPS_TASK] (
				TASK_SN,
				TASK_TIME,
				TASK_STATUS,
				TASK_PRIORITY,
				PLANT,
				ASSEMBLY_LINE,
				LOCATION,
				PACKAGE,
				USAGE,
				E_LOCATION,
				E_ASSEMBLY_LINE,
				E_PLANT,
				D_LOCATION,
				D_ASSEMBLY_LINE,
				D_PLANT,
				PART_NO,
				REQUEST_TIME,
				DELIVER_TIME,
				ALARM_TIME,
				ACTUAL_QUANTITY,
				ROUTE,
				ROUTE_COMBINATION_LIMIT,
				ZONE,
				ZONE_SCHEDULE_TYPE,
				TRIGGER_STATUS,
				COMBINATION_TYPE,
				PULL_TYPE,
				COMPULSORY_FLAG,
				MIN_STORAGE,
				MAX_STORAGE,
				CURRENT_STORAGE,
				BUTTON_ID,
				TAG_REQUEST_SN,
				SESSION_SN,
				SCREEN_LOCATION,
				BAHNHOF_NO,
				DOLLY,
				WMS_SEND_TIME,
				WMS_SEND_STATUS,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				PICKUP_TIME,
				ARRIVE_TIME,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				RUNSHEET_NO,
				PRINT_STATE,
				PRINT_TIMES,
				PLANT_ZONE				 
			) VALUES (
				@TASK_SN,
				@TASK_TIME,
				@TASK_STATUS,
				@TASK_PRIORITY,
				@PLANT,
				@ASSEMBLY_LINE,
				@LOCATION,
				@PACKAGE,
				@USAGE,
				@E_LOCATION,
				@E_ASSEMBLY_LINE,
				@E_PLANT,
				@D_LOCATION,
				@D_ASSEMBLY_LINE,
				@D_PLANT,
				@PART_NO,
				@REQUEST_TIME,
				@DELIVER_TIME,
				@ALARM_TIME,
				@ACTUAL_QUANTITY,
				@ROUTE,
				@ROUTE_COMBINATION_LIMIT,
				@ZONE,
				@ZONE_SCHEDULE_TYPE,
				@TRIGGER_STATUS,
				@COMBINATION_TYPE,
				@PULL_TYPE,
				@COMPULSORY_FLAG,
				@MIN_STORAGE,
				@MAX_STORAGE,
				@CURRENT_STORAGE,
				@BUTTON_ID,
				@TAG_REQUEST_SN,
				@SESSION_SN,
				@SCREEN_LOCATION,
				@BAHNHOF_NO,
				@DOLLY,
				@WMS_SEND_TIME,
				@WMS_SEND_STATUS,
				@SUPPLIER_NUM,
				@TRANS_SUPPLIER_NUM,
				@INHOUSE_PACKAGE_MODEL,
				@INHOUSE_PACKAGE,
				@PICKUP_TIME,
				@ARRIVE_TIME,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE,
				@RUNSHEET_NO,
				@PRINT_STATE,
				@PRINT_TIMES,
				@PLANT_ZONE				 
			);";
		private const string TT_EPS_TASK_UPDATE =
			@"UPDATE [LES].[TT_EPS_TASK] WITH(ROWLOCK) 
				SET TASK_SN=@TASK_SN,
				TASK_TIME=@TASK_TIME,
				TASK_STATUS=@TASK_STATUS,
				TASK_PRIORITY=@TASK_PRIORITY,
				PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				LOCATION=@LOCATION,
				PACKAGE=@PACKAGE,
				USAGE=@USAGE,
				E_LOCATION=@E_LOCATION,
				E_ASSEMBLY_LINE=@E_ASSEMBLY_LINE,
				E_PLANT=@E_PLANT,
				D_LOCATION=@D_LOCATION,
				D_ASSEMBLY_LINE=@D_ASSEMBLY_LINE,
				D_PLANT=@D_PLANT,
				PART_NO=@PART_NO,
				REQUEST_TIME=@REQUEST_TIME,
				DELIVER_TIME=@DELIVER_TIME,
				ALARM_TIME=@ALARM_TIME,
				ACTUAL_QUANTITY=@ACTUAL_QUANTITY,
				ROUTE=@ROUTE,
				ROUTE_COMBINATION_LIMIT=@ROUTE_COMBINATION_LIMIT,
				ZONE=@ZONE,
				ZONE_SCHEDULE_TYPE=@ZONE_SCHEDULE_TYPE,
				TRIGGER_STATUS=@TRIGGER_STATUS,
				COMBINATION_TYPE=@COMBINATION_TYPE,
				PULL_TYPE=@PULL_TYPE,
				COMPULSORY_FLAG=@COMPULSORY_FLAG,
				MIN_STORAGE=@MIN_STORAGE,
				MAX_STORAGE=@MAX_STORAGE,
				CURRENT_STORAGE=@CURRENT_STORAGE,
				BUTTON_ID=@BUTTON_ID,
				TAG_REQUEST_SN=@TAG_REQUEST_SN,
				SESSION_SN=@SESSION_SN,
				SCREEN_LOCATION=@SCREEN_LOCATION,
				BAHNHOF_NO=@BAHNHOF_NO,
				DOLLY=@DOLLY,
				WMS_SEND_TIME=@WMS_SEND_TIME,
				WMS_SEND_STATUS=@WMS_SEND_STATUS,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM=@TRANS_SUPPLIER_NUM,
				INHOUSE_PACKAGE_MODEL=@INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE=@INHOUSE_PACKAGE,
				PICKUP_TIME=@PICKUP_TIME,
				ARRIVE_TIME=@ARRIVE_TIME,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE,
				RUNSHEET_NO=@RUNSHEET_NO,
				PRINT_STATE=@PRINT_STATE,
				PRINT_TIMES=@PRINT_TIMES,
				PLANT_ZONE=@PLANT_ZONE				 
				WHERE 1=1  AND TASK_SN =@TASK_SN;";

		private const string TT_EPS_TASK_DELETE =
			@"DELETE FROM [LES].[TT_EPS_TASK] WITH(ROWLOCK)  
				WHERE 1=1  AND TASK_SN =@TASK_SN;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get TaskInfo
		/// </summary>
		/// <param name="TASK_SN">TaskInfo Primary key </param>
		/// <returns></returns> 
		public TaskInfo GetInfo(int aTaskSn)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_EPS_TASK_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@TASK_SN", DbType.Int32, aTaskSn);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateTaskInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>TaskInfo Collection </returns>
		public List<TaskInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_EPS_TASK_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>TaskInfo Collection </returns>
		public List<TaskInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<TaskInfo> list = new List<TaskInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateTaskInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<TaskInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[TASK_SN] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_EPS_TASK]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<TaskInfo> list = new List<TaskInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateTaskInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_EPS_TASK_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public bool Add(TaskInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_EPS_TASK_INSERT);			
			db.AddInParameter(dbCommand, "@TASK_SN", DbType.Int32, info.TaskSn);
			db.AddInParameter(dbCommand, "@TASK_TIME", DbType.DateTime, info.TaskTime);
			db.AddInParameter(dbCommand, "@TASK_STATUS", DbType.Int32, info.TaskStatus);
			db.AddInParameter(dbCommand, "@TASK_PRIORITY", DbType.Int32, info.TaskPriority);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Int32, info.Package);
			db.AddInParameter(dbCommand, "@USAGE", DbType.Int32, info.Usage);
			db.AddInParameter(dbCommand, "@E_LOCATION", DbType.AnsiString, info.ELocation);
			db.AddInParameter(dbCommand, "@E_ASSEMBLY_LINE", DbType.AnsiString, info.EAssemblyLine);
			db.AddInParameter(dbCommand, "@E_PLANT", DbType.AnsiString, info.EPlant);
			db.AddInParameter(dbCommand, "@D_LOCATION", DbType.AnsiString, info.DLocation);
			db.AddInParameter(dbCommand, "@D_ASSEMBLY_LINE", DbType.AnsiString, info.DAssemblyLine);
			db.AddInParameter(dbCommand, "@D_PLANT", DbType.AnsiString, info.DPlant);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@REQUEST_TIME", DbType.DateTime, info.RequestTime);
			db.AddInParameter(dbCommand, "@DELIVER_TIME", DbType.DateTime, info.DeliverTime);
			db.AddInParameter(dbCommand, "@ALARM_TIME", DbType.DateTime, info.AlarmTime);
			db.AddInParameter(dbCommand, "@ACTUAL_QUANTITY", DbType.Int32, info.ActualQuantity);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@ROUTE_COMBINATION_LIMIT", DbType.Int32, info.RouteCombinationLimit);
			db.AddInParameter(dbCommand, "@ZONE", DbType.String, info.Zone);
			db.AddInParameter(dbCommand, "@ZONE_SCHEDULE_TYPE", DbType.Int32, info.ZoneScheduleType);
			db.AddInParameter(dbCommand, "@TRIGGER_STATUS", DbType.Int32, info.TriggerStatus);
			db.AddInParameter(dbCommand, "@COMBINATION_TYPE", DbType.Int32, info.CombinationType);
			db.AddInParameter(dbCommand, "@PULL_TYPE", DbType.Int32, info.PullType);
			db.AddInParameter(dbCommand, "@COMPULSORY_FLAG", DbType.Int32, info.CompulsoryFlag);
			db.AddInParameter(dbCommand, "@MIN_STORAGE", DbType.Int32, info.MinStorage);
			db.AddInParameter(dbCommand, "@MAX_STORAGE", DbType.Int32, info.MaxStorage);
			db.AddInParameter(dbCommand, "@CURRENT_STORAGE", DbType.Int32, info.CurrentStorage);
			db.AddInParameter(dbCommand, "@BUTTON_ID", DbType.String, info.ButtonId);
			db.AddInParameter(dbCommand, "@TAG_REQUEST_SN", DbType.Int32, info.TagRequestSn);
			db.AddInParameter(dbCommand, "@SESSION_SN", DbType.Int32, info.SessionSn);
			db.AddInParameter(dbCommand, "@SCREEN_LOCATION", DbType.String, info.ScreenLocation);
			db.AddInParameter(dbCommand, "@BAHNHOF_NO", DbType.String, info.BahnhofNo);
			db.AddInParameter(dbCommand, "@DOLLY", DbType.String, info.Dolly);
			db.AddInParameter(dbCommand, "@WMS_SEND_TIME", DbType.DateTime, info.WmsSendTime);
			db.AddInParameter(dbCommand, "@WMS_SEND_STATUS", DbType.Int32, info.WmsSendStatus);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@TRANS_SUPPLIER_NUM", DbType.String, info.TransSupplierNum);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
			db.AddInParameter(dbCommand, "@PICKUP_TIME", DbType.DateTime, info.PickupTime);
			db.AddInParameter(dbCommand, "@ARRIVE_TIME", DbType.DateTime, info.ArriveTime);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@RUNSHEET_NO", DbType.String, info.RunsheetNo);
			db.AddInParameter(dbCommand, "@PRINT_STATE", DbType.Int32, info.PrintState);
			db.AddInParameter(dbCommand, "@PRINT_TIMES", DbType.Int32, info.PrintTimes);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(TaskInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_EPS_TASK_UPDATE);				
			db.AddInParameter(dbCommand, "@TASK_SN", DbType.Int32, info.TaskSn);
			db.AddInParameter(dbCommand, "@TASK_TIME", DbType.DateTime, info.TaskTime);
			db.AddInParameter(dbCommand, "@TASK_STATUS", DbType.Int32, info.TaskStatus);
			db.AddInParameter(dbCommand, "@TASK_PRIORITY", DbType.Int32, info.TaskPriority);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@LOCATION", DbType.String, info.Location);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Int32, info.Package);
			db.AddInParameter(dbCommand, "@USAGE", DbType.Int32, info.Usage);
			db.AddInParameter(dbCommand, "@E_LOCATION", DbType.AnsiString, info.ELocation);
			db.AddInParameter(dbCommand, "@E_ASSEMBLY_LINE", DbType.AnsiString, info.EAssemblyLine);
			db.AddInParameter(dbCommand, "@E_PLANT", DbType.AnsiString, info.EPlant);
			db.AddInParameter(dbCommand, "@D_LOCATION", DbType.AnsiString, info.DLocation);
			db.AddInParameter(dbCommand, "@D_ASSEMBLY_LINE", DbType.AnsiString, info.DAssemblyLine);
			db.AddInParameter(dbCommand, "@D_PLANT", DbType.AnsiString, info.DPlant);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@REQUEST_TIME", DbType.DateTime, info.RequestTime);
			db.AddInParameter(dbCommand, "@DELIVER_TIME", DbType.DateTime, info.DeliverTime);
			db.AddInParameter(dbCommand, "@ALARM_TIME", DbType.DateTime, info.AlarmTime);
			db.AddInParameter(dbCommand, "@ACTUAL_QUANTITY", DbType.Int32, info.ActualQuantity);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@ROUTE_COMBINATION_LIMIT", DbType.Int32, info.RouteCombinationLimit);
			db.AddInParameter(dbCommand, "@ZONE", DbType.String, info.Zone);
			db.AddInParameter(dbCommand, "@ZONE_SCHEDULE_TYPE", DbType.Int32, info.ZoneScheduleType);
			db.AddInParameter(dbCommand, "@TRIGGER_STATUS", DbType.Int32, info.TriggerStatus);
			db.AddInParameter(dbCommand, "@COMBINATION_TYPE", DbType.Int32, info.CombinationType);
			db.AddInParameter(dbCommand, "@PULL_TYPE", DbType.Int32, info.PullType);
			db.AddInParameter(dbCommand, "@COMPULSORY_FLAG", DbType.Int32, info.CompulsoryFlag);
			db.AddInParameter(dbCommand, "@MIN_STORAGE", DbType.Int32, info.MinStorage);
			db.AddInParameter(dbCommand, "@MAX_STORAGE", DbType.Int32, info.MaxStorage);
			db.AddInParameter(dbCommand, "@CURRENT_STORAGE", DbType.Int32, info.CurrentStorage);
			db.AddInParameter(dbCommand, "@BUTTON_ID", DbType.String, info.ButtonId);
			db.AddInParameter(dbCommand, "@TAG_REQUEST_SN", DbType.Int32, info.TagRequestSn);
			db.AddInParameter(dbCommand, "@SESSION_SN", DbType.Int32, info.SessionSn);
			db.AddInParameter(dbCommand, "@SCREEN_LOCATION", DbType.String, info.ScreenLocation);
			db.AddInParameter(dbCommand, "@BAHNHOF_NO", DbType.String, info.BahnhofNo);
			db.AddInParameter(dbCommand, "@DOLLY", DbType.String, info.Dolly);
			db.AddInParameter(dbCommand, "@WMS_SEND_TIME", DbType.DateTime, info.WmsSendTime);
			db.AddInParameter(dbCommand, "@WMS_SEND_STATUS", DbType.Int32, info.WmsSendStatus);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@TRANS_SUPPLIER_NUM", DbType.String, info.TransSupplierNum);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
			db.AddInParameter(dbCommand, "@PICKUP_TIME", DbType.DateTime, info.PickupTime);
			db.AddInParameter(dbCommand, "@ARRIVE_TIME", DbType.DateTime, info.ArriveTime);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@RUNSHEET_NO", DbType.String, info.RunsheetNo);
			db.AddInParameter(dbCommand, "@PRINT_STATE", DbType.Int32, info.PrintState);
			db.AddInParameter(dbCommand, "@PRINT_TIMES", DbType.Int32, info.PrintTimes);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="TASK_SN">TaskInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aTaskSn)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_EPS_TASK_DELETE);
		    db.AddInParameter(dbCommand, "@TASK_SN", DbType.Int32, aTaskSn);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="TASK_SN">TaskInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aTaskSn)
		{
		    string sql = "update [LES].[TT_EPS_TASK] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND TASK_SN =@TASK_SN;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@TASK_SN", DbType.Int32, aTaskSn);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static TaskInfo CreateTaskInfo(IDataReader rdr)
		{
			TaskInfo info = new TaskInfo();
			info.TaskSn = DBConvert.GetInt32(rdr, rdr.GetOrdinal("TASK_SN"));			
			info.TaskTime = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("TASK_TIME"));			
			info.TaskStatus = DBConvert.GetInt32(rdr, rdr.GetOrdinal("TASK_STATUS"));			
			info.TaskPriority = DBConvert.GetInt32(rdr, rdr.GetOrdinal("TASK_PRIORITY"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.Location = DBConvert.GetString(rdr, rdr.GetOrdinal("LOCATION"));			
			info.Package = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PACKAGE"));			
			info.Usage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("USAGE"));			
			info.ELocation = DBConvert.GetString(rdr, rdr.GetOrdinal("E_LOCATION"));			
			info.EAssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("E_ASSEMBLY_LINE"));			
			info.EPlant = DBConvert.GetString(rdr, rdr.GetOrdinal("E_PLANT"));			
			info.DLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("D_LOCATION"));			
			info.DAssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("D_ASSEMBLY_LINE"));			
			info.DPlant = DBConvert.GetString(rdr, rdr.GetOrdinal("D_PLANT"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.RequestTime = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("REQUEST_TIME"));			
			info.DeliverTime = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("DELIVER_TIME"));			
			info.AlarmTime = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("ALARM_TIME"));			
			info.ActualQuantity = DBConvert.GetInt32(rdr, rdr.GetOrdinal("ACTUAL_QUANTITY"));			
			info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));			
			info.RouteCombinationLimit = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ROUTE_COMBINATION_LIMIT"));			
			info.Zone = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE"));			
			info.ZoneScheduleType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ZONE_SCHEDULE_TYPE"));			
			info.TriggerStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRIGGER_STATUS"));			
			info.CombinationType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("COMBINATION_TYPE"));			
			info.PullType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PULL_TYPE"));			
			info.CompulsoryFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("COMPULSORY_FLAG"));			
			info.MinStorage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MIN_STORAGE"));			
			info.MaxStorage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MAX_STORAGE"));			
			info.CurrentStorage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("CURRENT_STORAGE"));			
			info.ButtonId = DBConvert.GetString(rdr, rdr.GetOrdinal("BUTTON_ID"));			
			info.TagRequestSn = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TAG_REQUEST_SN"));			
			info.SessionSn = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SESSION_SN"));			
			info.ScreenLocation = DBConvert.GetString(rdr, rdr.GetOrdinal("SCREEN_LOCATION"));			
			info.BahnhofNo = DBConvert.GetString(rdr, rdr.GetOrdinal("BAHNHOF_NO"));			
			info.Dolly = DBConvert.GetString(rdr, rdr.GetOrdinal("DOLLY"));			
			info.WmsSendTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("WMS_SEND_TIME"));			
			info.WmsSendStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("WMS_SEND_STATUS"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.TransSupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANS_SUPPLIER_NUM"));			
			info.InhousePackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE_MODEL"));			
			info.InhousePackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE"));			
			info.PickupTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PICKUP_TIME"));			
			info.ArriveTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("ARRIVE_TIME"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			info.RunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RUNSHEET_NO"));			
			info.PrintState = DBConvert.GetInt32(rdr, rdr.GetOrdinal("PRINT_STATE"));			
			info.PrintTimes = DBConvert.GetInt32(rdr, rdr.GetOrdinal("PRINT_TIMES"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			return info;
		}
		
		#endregion
	}
}
