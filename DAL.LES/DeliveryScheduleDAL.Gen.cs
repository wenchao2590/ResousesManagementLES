#region Declaim
//---------------------------------------------------------------------------
// Name:		DeliveryScheduleDAL
// Function: 	Expose data in table TT_PCS_DELIVERY_SCHEDULE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月18日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// DeliveryScheduleDAL对应表[TT_PCS_DELIVERY_SCHEDULE]
    /// </summary>
    public partial class DeliveryScheduleDAL : BusinessObjectProvider<DeliveryScheduleInfo>
	{
		#region Sql Statements
		private const string TT_PCS_DELIVERY_SCHEDULE_SELECT_BY_ID =
			@"SELECT SCHEDULE_IDENTITY,
				PLANT,
				ASSEMBLY_LINE,
				WORKSHOP,
				PLANT_ZONE,
				DELIVERY_TIME,
				SHIFT,
				DELIVERY_DATE,
				IS_DELIVERIED,
				BOX_PARTS,
				WINDOWS_TIME,
				SCHEDULE_TYPE,
				TEMPLATE_ID,
				IS_PRINTED,
				IS_ORGANIZE_SHEET,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE				  
				FROM [LES].[TT_PCS_DELIVERY_SCHEDULE] WITH(NOLOCK) WHERE 1=1  AND SCHEDULE_IDENTITY =@SCHEDULE_IDENTITY;";
			
		private const string TT_PCS_DELIVERY_SCHEDULE_SELECT = 
			@"SELECT SCHEDULE_IDENTITY,
				PLANT,
				ASSEMBLY_LINE,
				WORKSHOP,
				PLANT_ZONE,
				DELIVERY_TIME,
				SHIFT,
				DELIVERY_DATE,
				IS_DELIVERIED,
				BOX_PARTS,
				WINDOWS_TIME,
				SCHEDULE_TYPE,
				TEMPLATE_ID,
				IS_PRINTED,
				IS_ORGANIZE_SHEET,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE				 
				FROM [LES].[TT_PCS_DELIVERY_SCHEDULE] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TT_PCS_DELIVERY_SCHEDULE_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_PCS_DELIVERY_SCHEDULE]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TT_PCS_DELIVERY_SCHEDULE_INSERT =
			@"INSERT INTO [LES].[TT_PCS_DELIVERY_SCHEDULE] (
				PLANT,
				ASSEMBLY_LINE,
				WORKSHOP,
				PLANT_ZONE,
				DELIVERY_TIME,
				SHIFT,
				DELIVERY_DATE,
				IS_DELIVERIED,
				BOX_PARTS,
				WINDOWS_TIME,
				SCHEDULE_TYPE,
				TEMPLATE_ID,
				IS_PRINTED,
				IS_ORGANIZE_SHEET,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE				 
			) VALUES (
				@PLANT,
				@ASSEMBLY_LINE,
				@WORKSHOP,
				@PLANT_ZONE,
				@DELIVERY_TIME,
				@SHIFT,
				@DELIVERY_DATE,
				@IS_DELIVERIED,
				@BOX_PARTS,
				@WINDOWS_TIME,
				@SCHEDULE_TYPE,
				@TEMPLATE_ID,
				@IS_PRINTED,
				@IS_ORGANIZE_SHEET,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE				 
			);SELECT @@IDENTITY;";
		private const string TT_PCS_DELIVERY_SCHEDULE_UPDATE =
			@"UPDATE [LES].[TT_PCS_DELIVERY_SCHEDULE] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				WORKSHOP=@WORKSHOP,
				PLANT_ZONE=@PLANT_ZONE,
				DELIVERY_TIME=@DELIVERY_TIME,
				SHIFT=@SHIFT,
				DELIVERY_DATE=@DELIVERY_DATE,
				IS_DELIVERIED=@IS_DELIVERIED,
				BOX_PARTS=@BOX_PARTS,
				WINDOWS_TIME=@WINDOWS_TIME,
				SCHEDULE_TYPE=@SCHEDULE_TYPE,
				TEMPLATE_ID=@TEMPLATE_ID,
				IS_PRINTED=@IS_PRINTED,
				IS_ORGANIZE_SHEET=@IS_ORGANIZE_SHEET,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE				 
				WHERE 1=1  AND SCHEDULE_IDENTITY =@SCHEDULE_IDENTITY;";

		private const string TT_PCS_DELIVERY_SCHEDULE_DELETE =
			@"DELETE FROM [LES].[TT_PCS_DELIVERY_SCHEDULE] WITH(ROWLOCK)  
				WHERE 1=1  AND SCHEDULE_IDENTITY =@SCHEDULE_IDENTITY;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get DeliveryScheduleInfo
		/// </summary>
		/// <param name="SCHEDULE_IDENTITY">DeliveryScheduleInfo Primary key </param>
		/// <returns></returns> 
		public DeliveryScheduleInfo GetInfo(int aScheduleIdentity)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_PCS_DELIVERY_SCHEDULE_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@SCHEDULE_IDENTITY", DbType.Int32, aScheduleIdentity);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateDeliveryScheduleInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>DeliveryScheduleInfo Collection </returns>
		public List<DeliveryScheduleInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_PCS_DELIVERY_SCHEDULE_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>DeliveryScheduleInfo Collection </returns>
		public List<DeliveryScheduleInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<DeliveryScheduleInfo> list = new List<DeliveryScheduleInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateDeliveryScheduleInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<DeliveryScheduleInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[SCHEDULE_IDENTITY] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_PCS_DELIVERY_SCHEDULE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<DeliveryScheduleInfo> list = new List<DeliveryScheduleInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateDeliveryScheduleInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_PCS_DELIVERY_SCHEDULE_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(DeliveryScheduleInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_PCS_DELIVERY_SCHEDULE_INSERT);			
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@DELIVERY_TIME", DbType.String, info.DeliveryTime);
			db.AddInParameter(dbCommand, "@SHIFT", DbType.String, info.Shift);
			db.AddInParameter(dbCommand, "@DELIVERY_DATE", DbType.DateTime, info.DeliveryDate);
			db.AddInParameter(dbCommand, "@IS_DELIVERIED", DbType.Int32, info.IsDeliveried);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@WINDOWS_TIME", DbType.String, info.WindowsTime);
			db.AddInParameter(dbCommand, "@SCHEDULE_TYPE", DbType.Int32, info.ScheduleType);
			db.AddInParameter(dbCommand, "@TEMPLATE_ID", DbType.Int32, info.TemplateId);
			db.AddInParameter(dbCommand, "@IS_PRINTED", DbType.Int32, info.IsPrinted);
			db.AddInParameter(dbCommand, "@IS_ORGANIZE_SHEET", DbType.Int32, info.IsOrganizeSheet);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(DeliveryScheduleInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_PCS_DELIVERY_SCHEDULE_UPDATE);				
			db.AddInParameter(dbCommand, "@SCHEDULE_IDENTITY", DbType.Int32, info.ScheduleIdentity);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@DELIVERY_TIME", DbType.String, info.DeliveryTime);
			db.AddInParameter(dbCommand, "@SHIFT", DbType.String, info.Shift);
			db.AddInParameter(dbCommand, "@DELIVERY_DATE", DbType.DateTime, info.DeliveryDate);
			db.AddInParameter(dbCommand, "@IS_DELIVERIED", DbType.Int32, info.IsDeliveried);
			db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
			db.AddInParameter(dbCommand, "@WINDOWS_TIME", DbType.String, info.WindowsTime);
			db.AddInParameter(dbCommand, "@SCHEDULE_TYPE", DbType.Int32, info.ScheduleType);
			db.AddInParameter(dbCommand, "@TEMPLATE_ID", DbType.Int32, info.TemplateId);
			db.AddInParameter(dbCommand, "@IS_PRINTED", DbType.Int32, info.IsPrinted);
			db.AddInParameter(dbCommand, "@IS_ORGANIZE_SHEET", DbType.Int32, info.IsOrganizeSheet);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="SCHEDULE_IDENTITY">DeliveryScheduleInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aScheduleIdentity)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_PCS_DELIVERY_SCHEDULE_DELETE);
		    db.AddInParameter(dbCommand, "@SCHEDULE_IDENTITY", DbType.Int32, aScheduleIdentity);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="SCHEDULE_IDENTITY">DeliveryScheduleInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aScheduleIdentity)
		{
		    string sql = "update [LES].[TT_PCS_DELIVERY_SCHEDULE] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND SCHEDULE_IDENTITY =@SCHEDULE_IDENTITY;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@SCHEDULE_IDENTITY", DbType.Int32, aScheduleIdentity);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static DeliveryScheduleInfo CreateDeliveryScheduleInfo(IDataReader rdr)
		{
			DeliveryScheduleInfo info = new DeliveryScheduleInfo();
			info.ScheduleIdentity = DBConvert.GetInt32(rdr, rdr.GetOrdinal("SCHEDULE_IDENTITY"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.DeliveryTime = DBConvert.GetString(rdr, rdr.GetOrdinal("DELIVERY_TIME"));			
			info.Shift = DBConvert.GetString(rdr, rdr.GetOrdinal("SHIFT"));			
			info.DeliveryDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("DELIVERY_DATE"));			
			info.IsDeliveried = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_DELIVERIED"));			
			info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));			
			info.WindowsTime = DBConvert.GetString(rdr, rdr.GetOrdinal("WINDOWS_TIME"));			
			info.ScheduleType = DBConvert.GetInt32(rdr, rdr.GetOrdinal("SCHEDULE_TYPE"));			
			info.TemplateId = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TEMPLATE_ID"));			
			info.IsPrinted = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_PRINTED"));			
			info.IsOrganizeSheet = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_ORGANIZE_SHEET"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			return info;
		}
		
		#endregion
	}
}
