#region Declaim
//---------------------------------------------------------------------------
// Name:		WmmTranReceiveDetailViewDAL
// Function: 	Expose data in table V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年1月9日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#endregion

namespace DAL.LES
{
    //// <summary>
    /// WmmTranReceiveDetailViewDAL对应表[V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW]
    /// </summary>
    public partial class WmmTranReceiveDetailViewDAL : BusinessObjectProvider<WmmTranReceiveDetailViewInfo>
    {
        #region Sql Statements
        private const string V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_SELECT_BY_ID =
            "";

        private const string V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_SELECT =
            @"SELECT PLANT,
				ZONE_NO,
				PART_NO,
				REQUIRED_INHOUSE_PACKAGE_QTY,
				INHOUSE_PACKAGE_MODEL,
				IS_ASN,
				PLAN_RUNSHEET_SN,
				SUB_QTY,
				DOCK,
				PART_CNAME,
				SUPPLIER_NUM,
				REQUIRED_INHOUSE_PACKAGE,
				ACTUAL_INHOUSE_PACKAGE_QTY,
				DISPO,
				WM_NO,
				PLAN_RUNSHEET_NO,
				INHOUSE_PACKAGE,
				PUBLISH_TIME,
				SUB_BOX_NUM,
				EXPECTED_ARRIVAL_TIME,
				ACTUAL_INHOUSE_PACKAGE				 
				FROM [LES].[V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW] WITH (NOLOCK) WHERE 1=1 {0};";

        private const string V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_SELECT_COUNTS =
            @"SELECT count(*) FROM [LES].[V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW]  WITH(NOLOCK) WHERE 1=1 {0};";

        private const string V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_INSERT =
            @"INSERT INTO [LES].[V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW] (
				PLANT,
				ZONE_NO,
				PART_NO,
				REQUIRED_INHOUSE_PACKAGE_QTY,
				INHOUSE_PACKAGE_MODEL,
				IS_ASN,
				PLAN_RUNSHEET_SN,
				SUB_QTY,
				DOCK,
				PART_CNAME,
				SUPPLIER_NUM,
				REQUIRED_INHOUSE_PACKAGE,
				ACTUAL_INHOUSE_PACKAGE_QTY,
				DISPO,
				WM_NO,
				PLAN_RUNSHEET_NO,
				INHOUSE_PACKAGE,
				PUBLISH_TIME,
				SUB_BOX_NUM,
				EXPECTED_ARRIVAL_TIME,
				ACTUAL_INHOUSE_PACKAGE				 
			) VALUES (
				@PLANT,
				@ZONE_NO,
				@PART_NO,
				@REQUIRED_INHOUSE_PACKAGE_QTY,
				@INHOUSE_PACKAGE_MODEL,
				@IS_ASN,
				@PLAN_RUNSHEET_SN,
				@SUB_QTY,
				@DOCK,
				@PART_CNAME,
				@SUPPLIER_NUM,
				@REQUIRED_INHOUSE_PACKAGE,
				@ACTUAL_INHOUSE_PACKAGE_QTY,
				@DISPO,
				@WM_NO,
				@PLAN_RUNSHEET_NO,
				@INHOUSE_PACKAGE,
				@PUBLISH_TIME,
				@SUB_BOX_NUM,
				@EXPECTED_ARRIVAL_TIME,
				@ACTUAL_INHOUSE_PACKAGE				 
			);";
        private const string V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_UPDATE =
            "";

        private const string V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_DELETE =
            "";
        #endregion

        #region Access Methods

        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="textWhere">Conditon</param>
        /// <param name="orderText">Sort</param>
        /// <returns>WmmTranReceiveDetailViewInfo Collection </returns>
        public List<WmmTranReceiveDetailViewInfo> GetList(string textWhere, string orderText)
        {
            string query = string.Empty;
            if (string.IsNullOrEmpty(textWhere))
                query = string.Empty;
            else
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    query = textWhere;
                else
                    query = " and " + textWhere;
            }
            if (!string.IsNullOrEmpty(orderText))
                query += " order by " + orderText;

            return GetList(string.Format(V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_SELECT, query));
        }
        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>WmmTranReceiveDetailViewInfo Collection </returns>
        public List<WmmTranReceiveDetailViewInfo> GetList(string sql)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<WmmTranReceiveDetailViewInfo> list = new List<WmmTranReceiveDetailViewInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateWmmTranReceiveDetailViewInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
        public List<WmmTranReceiveDetailViewInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
        {
            if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
            string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
            else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[PLAN_RUNSHEET_SN] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<WmmTranReceiveDetailViewInfo> list = new List<WmmTranReceiveDetailViewInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateWmmTranReceiveDetailViewInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            if (string.IsNullOrEmpty(textWhere))
                textWhere = string.Empty;
            else
            {
                if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    textWhere = " and " + textWhere;
            }
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_SELECT_COUNTS, textWhere));
            return Convert.ToInt32(db.ExecuteScalar(cmd));
        }
        /// <summary>
        /// Add
        /// </summary>
        /// <param name="info"> info</param>
        public bool Add(WmmTranReceiveDetailViewInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_INSERT);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
            db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
            db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
            db.AddInParameter(dbCommand, "@REQUIRED_INHOUSE_PACKAGE_QTY", DbType.Int32, info.RequiredInhousePackageQty);
            db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
            db.AddInParameter(dbCommand, "@IS_ASN", DbType.Int32, info.IsAsn);
            db.AddInParameter(dbCommand, "@PLAN_RUNSHEET_SN", DbType.Int32, info.PlanRunsheetSn);
            db.AddInParameter(dbCommand, "@SUB_QTY", DbType.Int32, info.SubQty);
            db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
            db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@REQUIRED_INHOUSE_PACKAGE", DbType.Int32, info.RequiredInhousePackage);
            db.AddInParameter(dbCommand, "@ACTUAL_INHOUSE_PACKAGE_QTY", DbType.Int32, info.ActualInhousePackageQty);
            db.AddInParameter(dbCommand, "@DISPO", DbType.String, info.Dispo);
            db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
            db.AddInParameter(dbCommand, "@PLAN_RUNSHEET_NO", DbType.AnsiString, info.PlanRunsheetNo);
            db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
            db.AddInParameter(dbCommand, "@PUBLISH_TIME", DbType.DateTime, info.PublishTime);
            db.AddInParameter(dbCommand, "@SUB_BOX_NUM", DbType.Int32, info.SubBoxNum);
            db.AddInParameter(dbCommand, "@EXPECTED_ARRIVAL_TIME", DbType.DateTime, info.ExpectedArrivalTime);
            db.AddInParameter(dbCommand, "@ACTUAL_INHOUSE_PACKAGE", DbType.Int32, info.ActualInhousePackage);
            return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;
        }
        /// <summary>
        /// Update
        /// </summary>
        /// <param name="info">info</param>
        public int Update(WmmTranReceiveDetailViewInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_TT_WMM_TRAN_RECEIVE_DETAIL_VIEW_UPDATE);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
            db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
            db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
            db.AddInParameter(dbCommand, "@REQUIRED_INHOUSE_PACKAGE_QTY", DbType.Int32, info.RequiredInhousePackageQty);
            db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
            db.AddInParameter(dbCommand, "@IS_ASN", DbType.Int32, info.IsAsn);
            db.AddInParameter(dbCommand, "@PLAN_RUNSHEET_SN", DbType.Int32, info.PlanRunsheetSn);
            db.AddInParameter(dbCommand, "@SUB_QTY", DbType.Int32, info.SubQty);
            db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
            db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@REQUIRED_INHOUSE_PACKAGE", DbType.Int32, info.RequiredInhousePackage);
            db.AddInParameter(dbCommand, "@ACTUAL_INHOUSE_PACKAGE_QTY", DbType.Int32, info.ActualInhousePackageQty);
            db.AddInParameter(dbCommand, "@DISPO", DbType.String, info.Dispo);
            db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
            db.AddInParameter(dbCommand, "@PLAN_RUNSHEET_NO", DbType.AnsiString, info.PlanRunsheetNo);
            db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
            db.AddInParameter(dbCommand, "@PUBLISH_TIME", DbType.DateTime, info.PublishTime);
            db.AddInParameter(dbCommand, "@SUB_BOX_NUM", DbType.Int32, info.SubBoxNum);
            db.AddInParameter(dbCommand, "@EXPECTED_ARRIVAL_TIME", DbType.DateTime, info.ExpectedArrivalTime);
            db.AddInParameter(dbCommand, "@ACTUAL_INHOUSE_PACKAGE", DbType.Int32, info.ActualInhousePackage);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }


        #endregion

        #region Helpers

        private static WmmTranReceiveDetailViewInfo CreateWmmTranReceiveDetailViewInfo(IDataReader rdr)
        {
            WmmTranReceiveDetailViewInfo info = new WmmTranReceiveDetailViewInfo();
            info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));
            info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));
            info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));
            info.RequiredInhousePackageQty = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("REQUIRED_INHOUSE_PACKAGE_QTY"));
            info.InhousePackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE_MODEL"));
            info.IsAsn = DBConvert.GetInt32(rdr, rdr.GetOrdinal("IS_ASN"));
            info.PlanRunsheetSn = DBConvert.GetInt32(rdr, rdr.GetOrdinal("PLAN_RUNSHEET_SN"));
            info.SubQty = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SUB_QTY"));
            info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));
            info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));
            info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));
            info.RequiredInhousePackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("REQUIRED_INHOUSE_PACKAGE"));
            info.ActualInhousePackageQty = DBConvert.GetInt32(rdr, rdr.GetOrdinal("ACTUAL_INHOUSE_PACKAGE_QTY"));
            info.Dispo = DBConvert.GetString(rdr, rdr.GetOrdinal("DISPO"));
            info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));
            info.PlanRunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PLAN_RUNSHEET_NO"));
            info.InhousePackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE"));
            info.PublishTime = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("PUBLISH_TIME"));
            info.SubBoxNum = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SUB_BOX_NUM"));
            info.ExpectedArrivalTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("EXPECTED_ARRIVAL_TIME"));
            info.ActualInhousePackage = DBConvert.GetInt32(rdr, rdr.GetOrdinal("ACTUAL_INHOUSE_PACKAGE"));
            return info;
        }

        #endregion
    }
}
