#region Declaim
//---------------------------------------------------------------------------
// Name:		PullOrdersDAL
// Function: 	Expose data in table TT_BAS_PULL_ORDERS from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月17日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// PullOrdersDAL对应表[TT_BAS_PULL_ORDERS]
    /// </summary>
    public partial class PullOrdersDAL : BusinessObjectProvider<PullOrdersInfo>
	{
		#region Sql Statements
		private const string TT_BAS_PULL_ORDERS_SELECT_BY_ID =
			@"SELECT ID,
				FID,
				ORDER_NO,
				WERK,
				MODEL_YEAR,
				MODEL,
				VEHICLE_ORDER,
				ORDER_DATE,
				ASSEMBLY_LINE,
				VIN,
				PART_NO,
				VORSERIE,
				SPJ,
				KNR,
				FARBAU,
				FARBIN,
				PNR_STRING,
				PNR_STRING_COMPUTE,
				DEAL_FLAG,
				STATUS_FLAG,
				SIGNATURE,
				ORDER_FILE_NAME,
				ORDER_TYPE,
				RECALCULATE_FLAG,
				CHANGE_FLAG,
				PROCESS_LINE_SN,
				INIT_STSTUS,
				VERSION,
				ORDER_STATUS,
				QTY,
				MEASURING_UNIT,
				ZCOLORI,
				ZCOLORI_D,
				PLAN_FLAG,
				PLAN_EXECUTE_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				  
				FROM [LES].[TT_BAS_PULL_ORDERS] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TT_BAS_PULL_ORDERS_SELECT = 
			@"SELECT ID,
				FID,
				ORDER_NO,
				WERK,
				MODEL_YEAR,
				MODEL,
				VEHICLE_ORDER,
				ORDER_DATE,
				ASSEMBLY_LINE,
				VIN,
				PART_NO,
				VORSERIE,
				SPJ,
				KNR,
				FARBAU,
				FARBIN,
				PNR_STRING,
				PNR_STRING_COMPUTE,
				DEAL_FLAG,
				STATUS_FLAG,
				SIGNATURE,
				ORDER_FILE_NAME,
				ORDER_TYPE,
				RECALCULATE_FLAG,
				CHANGE_FLAG,
				PROCESS_LINE_SN,
				INIT_STSTUS,
				VERSION,
				ORDER_STATUS,
				QTY,
				MEASURING_UNIT,
				ZCOLORI,
				ZCOLORI_D,
				PLAN_FLAG,
				PLAN_EXECUTE_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
				FROM [LES].[TT_BAS_PULL_ORDERS] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_BAS_PULL_ORDERS_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_BAS_PULL_ORDERS]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_BAS_PULL_ORDERS_INSERT =
			@"INSERT INTO [LES].[TT_BAS_PULL_ORDERS] (
				FID,
				ORDER_NO,
				WERK,
				MODEL_YEAR,
				MODEL,
				VEHICLE_ORDER,
				ORDER_DATE,
				ASSEMBLY_LINE,
				VIN,
				PART_NO,
				VORSERIE,
				SPJ,
				KNR,
				FARBAU,
				FARBIN,
				PNR_STRING,
				PNR_STRING_COMPUTE,
				DEAL_FLAG,
				STATUS_FLAG,
				SIGNATURE,
				ORDER_FILE_NAME,
				ORDER_TYPE,
				RECALCULATE_FLAG,
				CHANGE_FLAG,
				PROCESS_LINE_SN,
				INIT_STSTUS,
				VERSION,
				ORDER_STATUS,
				QTY,
				MEASURING_UNIT,
				ZCOLORI,
				ZCOLORI_D,
				PLAN_FLAG,
				PLAN_EXECUTE_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
			) VALUES (
				@FID,
				@ORDER_NO,
				@WERK,
				@MODEL_YEAR,
				@MODEL,
				@VEHICLE_ORDER,
				@ORDER_DATE,
				@ASSEMBLY_LINE,
				@VIN,
				@PART_NO,
				@VORSERIE,
				@SPJ,
				@KNR,
				@FARBAU,
				@FARBIN,
				@PNR_STRING,
				@PNR_STRING_COMPUTE,
				@DEAL_FLAG,
				@STATUS_FLAG,
				@SIGNATURE,
				@ORDER_FILE_NAME,
				@ORDER_TYPE,
				@RECALCULATE_FLAG,
				@CHANGE_FLAG,
				@PROCESS_LINE_SN,
				@INIT_STSTUS,
				@VERSION,
				@ORDER_STATUS,
				@QTY,
				@MEASURING_UNIT,
				@ZCOLORI,
				@ZCOLORI_D,
				@PLAN_FLAG,
				@PLAN_EXECUTE_TIME,
				@COMMENTS,
				@VALID_FLAG,
				@CREATE_USER,
				GETDATE(),
				@MODIFY_USER,
				@MODIFY_DATE				 
			);SELECT @@IDENTITY;";
		private const string TT_BAS_PULL_ORDERS_UPDATE =
			@"UPDATE [LES].[TT_BAS_PULL_ORDERS] WITH(ROWLOCK) 
				SET FID=@FID,
				ORDER_NO=@ORDER_NO,
				WERK=@WERK,
				MODEL_YEAR=@MODEL_YEAR,
				MODEL=@MODEL,
				VEHICLE_ORDER=@VEHICLE_ORDER,
				ORDER_DATE=@ORDER_DATE,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				VIN=@VIN,
				PART_NO=@PART_NO,
				VORSERIE=@VORSERIE,
				SPJ=@SPJ,
				KNR=@KNR,
				FARBAU=@FARBAU,
				FARBIN=@FARBIN,
				PNR_STRING=@PNR_STRING,
				PNR_STRING_COMPUTE=@PNR_STRING_COMPUTE,
				DEAL_FLAG=@DEAL_FLAG,
				STATUS_FLAG=@STATUS_FLAG,
				SIGNATURE=@SIGNATURE,
				ORDER_FILE_NAME=@ORDER_FILE_NAME,
				ORDER_TYPE=@ORDER_TYPE,
				RECALCULATE_FLAG=@RECALCULATE_FLAG,
				CHANGE_FLAG=@CHANGE_FLAG,
				PROCESS_LINE_SN=@PROCESS_LINE_SN,
				INIT_STSTUS=@INIT_STSTUS,
				VERSION=@VERSION,
				ORDER_STATUS=@ORDER_STATUS,
				QTY=@QTY,
				MEASURING_UNIT=@MEASURING_UNIT,
				ZCOLORI=@ZCOLORI,
				ZCOLORI_D=@ZCOLORI_D,
				PLAN_FLAG=@PLAN_FLAG,
				PLAN_EXECUTE_TIME=@PLAN_EXECUTE_TIME,
				COMMENTS=@COMMENTS,
				VALID_FLAG=@VALID_FLAG,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TT_BAS_PULL_ORDERS_DELETE =
			@"DELETE FROM [LES].[TT_BAS_PULL_ORDERS] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get PullOrdersInfo
		/// </summary>
		/// <param name="ID">PullOrdersInfo Primary key </param>
		/// <returns></returns> 
		public PullOrdersInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_BAS_PULL_ORDERS_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreatePullOrdersInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>PullOrdersInfo Collection </returns>
		public List<PullOrdersInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_BAS_PULL_ORDERS_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>PullOrdersInfo Collection </returns>
		public List<PullOrdersInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<PullOrdersInfo> list = new List<PullOrdersInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreatePullOrdersInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<PullOrdersInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_BAS_PULL_ORDERS]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<PullOrdersInfo> list = new List<PullOrdersInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreatePullOrdersInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_BAS_PULL_ORDERS_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(PullOrdersInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_BAS_PULL_ORDERS_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@ORDER_NO", DbType.String, info.OrderNo);
			db.AddInParameter(dbCommand, "@WERK", DbType.String, info.Werk);
			db.AddInParameter(dbCommand, "@MODEL_YEAR", DbType.String, info.ModelYear);
			db.AddInParameter(dbCommand, "@MODEL", DbType.String, info.Model);
			db.AddInParameter(dbCommand, "@VEHICLE_ORDER", DbType.String, info.VehicleOrder);
			db.AddInParameter(dbCommand, "@ORDER_DATE", DbType.DateTime, info.OrderDate);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@VORSERIE", DbType.Boolean, info.Vorserie);
			db.AddInParameter(dbCommand, "@SPJ", DbType.String, info.Spj);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@FARBAU", DbType.String, info.Farbau);
			db.AddInParameter(dbCommand, "@FARBIN", DbType.String, info.Farbin);
			db.AddInParameter(dbCommand, "@PNR_STRING", DbType.String, info.PnrString);
			db.AddInParameter(dbCommand, "@PNR_STRING_COMPUTE", DbType.String, info.PnrStringCompute);
			db.AddInParameter(dbCommand, "@DEAL_FLAG", DbType.Int32, info.DealFlag);
			db.AddInParameter(dbCommand, "@STATUS_FLAG", DbType.String, info.StatusFlag);
			db.AddInParameter(dbCommand, "@SIGNATURE", DbType.String, info.Signature);
			db.AddInParameter(dbCommand, "@ORDER_FILE_NAME", DbType.String, info.OrderFileName);
			db.AddInParameter(dbCommand, "@ORDER_TYPE", DbType.String, info.OrderType);
			db.AddInParameter(dbCommand, "@RECALCULATE_FLAG", DbType.Int32, info.RecalculateFlag);
			db.AddInParameter(dbCommand, "@CHANGE_FLAG", DbType.Int32, info.ChangeFlag);
			db.AddInParameter(dbCommand, "@PROCESS_LINE_SN", DbType.Int32, info.ProcessLineSn);
			db.AddInParameter(dbCommand, "@INIT_STSTUS", DbType.Int32, info.InitStstus);
			db.AddInParameter(dbCommand, "@VERSION", DbType.Int32, info.Version);
			db.AddInParameter(dbCommand, "@ORDER_STATUS", DbType.Int32, info.OrderStatus);
			db.AddInParameter(dbCommand, "@QTY", DbType.Decimal, info.Qty);
			db.AddInParameter(dbCommand, "@MEASURING_UNIT", DbType.String, info.MeasuringUnit);
			db.AddInParameter(dbCommand, "@ZCOLORI", DbType.String, info.Zcolori);
			db.AddInParameter(dbCommand, "@ZCOLORI_D", DbType.String, info.ZcoloriD);
			db.AddInParameter(dbCommand, "@PLAN_FLAG", DbType.String, info.PlanFlag);
			db.AddInParameter(dbCommand, "@PLAN_EXECUTE_TIME", DbType.DateTime, info.PlanExecuteTime);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(PullOrdersInfo info)
		{
			return  
			@"insert into [LES].[TT_BAS_PULL_ORDERS] (
				FID,
				ORDER_NO,
				WERK,
				MODEL_YEAR,
				MODEL,
				VEHICLE_ORDER,
				ORDER_DATE,
				ASSEMBLY_LINE,
				VIN,
				PART_NO,
				VORSERIE,
				SPJ,
				KNR,
				FARBAU,
				FARBIN,
				PNR_STRING,
				PNR_STRING_COMPUTE,
				DEAL_FLAG,
				STATUS_FLAG,
				SIGNATURE,
				ORDER_FILE_NAME,
				ORDER_TYPE,
				RECALCULATE_FLAG,
				CHANGE_FLAG,
				PROCESS_LINE_SN,
				INIT_STSTUS,
				VERSION,
				ORDER_STATUS,
				QTY,
				MEASURING_UNIT,
				ZCOLORI,
				ZCOLORI_D,
				PLAN_FLAG,
				PLAN_EXECUTE_TIME,
				COMMENTS,
				VALID_FLAG,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE				 
			) values ("+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.OrderNo) ? "NULL" : "N'" + info.OrderNo + "'") + ","+
				(string.IsNullOrEmpty(info.Werk) ? "NULL" : "N'" + info.Werk + "'") + ","+
				(string.IsNullOrEmpty(info.ModelYear) ? "NULL" : "N'" + info.ModelYear + "'") + ","+
				(string.IsNullOrEmpty(info.Model) ? "NULL" : "N'" + info.Model + "'") + ","+
				(string.IsNullOrEmpty(info.VehicleOrder) ? "NULL" : "N'" + info.VehicleOrder + "'") + ","+
				(info.OrderDate == null ? "NULL" : "N'" + info.OrderDate.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLine) ? "NULL" : "N'" + info.AssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.Vin) ? "NULL" : "N'" + info.Vin + "'") + ","+
				(string.IsNullOrEmpty(info.PartNo) ? "NULL" : "N'" + info.PartNo + "'") + ","+
				(info.Vorserie == null ? "NULL" : "" + (info.Vorserie.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(string.IsNullOrEmpty(info.Spj) ? "NULL" : "N'" + info.Spj + "'") + ","+
				(string.IsNullOrEmpty(info.Knr) ? "NULL" : "N'" + info.Knr + "'") + ","+
				(string.IsNullOrEmpty(info.Farbau) ? "NULL" : "N'" + info.Farbau + "'") + ","+
				(string.IsNullOrEmpty(info.Farbin) ? "NULL" : "N'" + info.Farbin + "'") + ","+
				(string.IsNullOrEmpty(info.PnrString) ? "NULL" : "N'" + info.PnrString + "'") + ","+
				(string.IsNullOrEmpty(info.PnrStringCompute) ? "NULL" : "N'" + info.PnrStringCompute + "'") + ","+
				(info.DealFlag == null ? "NULL" : "" + info.DealFlag.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.StatusFlag) ? "NULL" : "N'" + info.StatusFlag + "'") + ","+
				(string.IsNullOrEmpty(info.Signature) ? "NULL" : "N'" + info.Signature + "'") + ","+
				(string.IsNullOrEmpty(info.OrderFileName) ? "NULL" : "N'" + info.OrderFileName + "'") + ","+
				(string.IsNullOrEmpty(info.OrderType) ? "NULL" : "N'" + info.OrderType + "'") + ","+
				(info.RecalculateFlag == null ? "NULL" : "" + info.RecalculateFlag.GetValueOrDefault() + "") + ","+
				(info.ChangeFlag == null ? "NULL" : "" + info.ChangeFlag.GetValueOrDefault() + "") + ","+
				(info.ProcessLineSn == null ? "NULL" : "" + info.ProcessLineSn.GetValueOrDefault() + "") + ","+
				(info.InitStstus == null ? "NULL" : "" + info.InitStstus.GetValueOrDefault() + "") + ","+
				(info.Version == null ? "NULL" : "" + info.Version.GetValueOrDefault() + "") + ","+
				(info.OrderStatus == null ? "NULL" : "" + info.OrderStatus.GetValueOrDefault() + "") + ","+
				(info.Qty == null ? "NULL" : "" + info.Qty.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.MeasuringUnit) ? "NULL" : "N'" + info.MeasuringUnit + "'") + ","+
				(string.IsNullOrEmpty(info.Zcolori) ? "NULL" : "N'" + info.Zcolori + "'") + ","+
				(string.IsNullOrEmpty(info.ZcoloriD) ? "NULL" : "N'" + info.ZcoloriD + "'") + ","+
				(string.IsNullOrEmpty(info.PlanFlag) ? "NULL" : "N'" + info.PlanFlag + "'") + ","+
				(info.PlanExecuteTime == null ? "NULL" : "N'" + info.PlanExecuteTime.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				"1" + ","+		
				"N'" + info.CreateUser + "'" + ","+		
				"GETDATE()" + ","+			
				"NULL" + ","+			
				"NULL" + ");";			
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(PullOrdersInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_BAS_PULL_ORDERS_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@ORDER_NO", DbType.String, info.OrderNo);
			db.AddInParameter(dbCommand, "@WERK", DbType.String, info.Werk);
			db.AddInParameter(dbCommand, "@MODEL_YEAR", DbType.String, info.ModelYear);
			db.AddInParameter(dbCommand, "@MODEL", DbType.String, info.Model);
			db.AddInParameter(dbCommand, "@VEHICLE_ORDER", DbType.String, info.VehicleOrder);
			db.AddInParameter(dbCommand, "@ORDER_DATE", DbType.DateTime, info.OrderDate);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@VORSERIE", DbType.Boolean, info.Vorserie);
			db.AddInParameter(dbCommand, "@SPJ", DbType.String, info.Spj);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@FARBAU", DbType.String, info.Farbau);
			db.AddInParameter(dbCommand, "@FARBIN", DbType.String, info.Farbin);
			db.AddInParameter(dbCommand, "@PNR_STRING", DbType.String, info.PnrString);
			db.AddInParameter(dbCommand, "@PNR_STRING_COMPUTE", DbType.String, info.PnrStringCompute);
			db.AddInParameter(dbCommand, "@DEAL_FLAG", DbType.Int32, info.DealFlag);
			db.AddInParameter(dbCommand, "@STATUS_FLAG", DbType.String, info.StatusFlag);
			db.AddInParameter(dbCommand, "@SIGNATURE", DbType.String, info.Signature);
			db.AddInParameter(dbCommand, "@ORDER_FILE_NAME", DbType.String, info.OrderFileName);
			db.AddInParameter(dbCommand, "@ORDER_TYPE", DbType.String, info.OrderType);
			db.AddInParameter(dbCommand, "@RECALCULATE_FLAG", DbType.Int32, info.RecalculateFlag);
			db.AddInParameter(dbCommand, "@CHANGE_FLAG", DbType.Int32, info.ChangeFlag);
			db.AddInParameter(dbCommand, "@PROCESS_LINE_SN", DbType.Int32, info.ProcessLineSn);
			db.AddInParameter(dbCommand, "@INIT_STSTUS", DbType.Int32, info.InitStstus);
			db.AddInParameter(dbCommand, "@VERSION", DbType.Int32, info.Version);
			db.AddInParameter(dbCommand, "@ORDER_STATUS", DbType.Int32, info.OrderStatus);
			db.AddInParameter(dbCommand, "@QTY", DbType.Decimal, info.Qty);
			db.AddInParameter(dbCommand, "@MEASURING_UNIT", DbType.String, info.MeasuringUnit);
			db.AddInParameter(dbCommand, "@ZCOLORI", DbType.String, info.Zcolori);
			db.AddInParameter(dbCommand, "@ZCOLORI_D", DbType.String, info.ZcoloriD);
			db.AddInParameter(dbCommand, "@PLAN_FLAG", DbType.String, info.PlanFlag);
			db.AddInParameter(dbCommand, "@PLAN_EXECUTE_TIME", DbType.DateTime, info.PlanExecuteTime);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">PullOrdersInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_BAS_PULL_ORDERS_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">PullOrdersInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TT_BAS_PULL_ORDERS] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                                        db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">PullOrdersInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TT_BAS_PULL_ORDERS] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static PullOrdersInfo CreatePullOrdersInfo(IDataReader rdr)
		{
			PullOrdersInfo info = new PullOrdersInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.OrderNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ORDER_NO"));			
			info.Werk = DBConvert.GetString(rdr, rdr.GetOrdinal("WERK"));			
			info.ModelYear = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL_YEAR"));			
			info.Model = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL"));			
			info.VehicleOrder = DBConvert.GetString(rdr, rdr.GetOrdinal("VEHICLE_ORDER"));			
			info.OrderDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("ORDER_DATE"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.Vin = DBConvert.GetString(rdr, rdr.GetOrdinal("VIN"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.Vorserie = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VORSERIE"));			
			info.Spj = DBConvert.GetString(rdr, rdr.GetOrdinal("SPJ"));			
			info.Knr = DBConvert.GetString(rdr, rdr.GetOrdinal("KNR"));			
			info.Farbau = DBConvert.GetString(rdr, rdr.GetOrdinal("FARBAU"));			
			info.Farbin = DBConvert.GetString(rdr, rdr.GetOrdinal("FARBIN"));			
			info.PnrString = DBConvert.GetString(rdr, rdr.GetOrdinal("PNR_STRING"));			
			info.PnrStringCompute = DBConvert.GetString(rdr, rdr.GetOrdinal("PNR_STRING_COMPUTE"));			
			info.DealFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("DEAL_FLAG"));			
			info.StatusFlag = DBConvert.GetString(rdr, rdr.GetOrdinal("STATUS_FLAG"));			
			info.Signature = DBConvert.GetString(rdr, rdr.GetOrdinal("SIGNATURE"));			
			info.OrderFileName = DBConvert.GetString(rdr, rdr.GetOrdinal("ORDER_FILE_NAME"));			
			info.OrderType = DBConvert.GetString(rdr, rdr.GetOrdinal("ORDER_TYPE"));			
			info.RecalculateFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("RECALCULATE_FLAG"));			
			info.ChangeFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("CHANGE_FLAG"));			
			info.ProcessLineSn = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PROCESS_LINE_SN"));			
			info.InitStstus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INIT_STSTUS"));			
			info.Version = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("VERSION"));			
			info.OrderStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ORDER_STATUS"));			
			info.Qty = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("QTY"));			
			info.MeasuringUnit = DBConvert.GetString(rdr, rdr.GetOrdinal("MEASURING_UNIT"));			
			info.Zcolori = DBConvert.GetString(rdr, rdr.GetOrdinal("ZCOLORI"));			
			info.ZcoloriD = DBConvert.GetString(rdr, rdr.GetOrdinal("ZCOLORI_D"));			
			info.PlanFlag = DBConvert.GetString(rdr, rdr.GetOrdinal("PLAN_FLAG"));			
			info.PlanExecuteTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PLAN_EXECUTE_TIME"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			return info;
		}
		
		#endregion
	}
}
