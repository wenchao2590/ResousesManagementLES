#region Declaim
//---------------------------------------------------------------------------
// Name:		PlanWindowTimeDAL
// Function: 	Expose data in table TT_MPM_PLAN_WINDOW_TIME from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年4月11日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#endregion

namespace DAL.LES
{
    //// <summary>
    /// PlanWindowTimeDAL对应表[TT_MPM_PLAN_WINDOW_TIME]
    /// </summary>
    public partial class PlanWindowTimeDAL
    {
        /// <summary>
        /// 根据零件类外键
        /// 获取最近一个未发单的窗口时间
        /// </summary>
        /// <param name="ID">PlanWindowTimeInfo Primary key </param>
        /// <returns></returns> 
        public PlanWindowTimeInfo GetLastNoSendTimeInfo(Guid partBoxFid)
        {
            string sql = "select top 1 * from [LES].[TT_MPM_PLAN_WINDOW_TIME] with(nolock) "
                + "where [VALID_FLAG] = 1 and [SEND_TIME_STATUS] = @SEND_TIME_STATUS and [SEND_TIME] < GETDATE() and [PART_BOX_FID] = @PART_BOX_FID "
                + "order by [SEND_TIME] desc;";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(sql);
            db.AddInParameter(cmd, "@SEND_TIME_STATUS", DbType.Int32, (int)SendTimeStatusConstants.NoSend);
            db.AddInParameter(cmd, "@PART_BOX_FID", DbType.Guid, partBoxFid);
            using (IDataReader dr = db.ExecuteReader(cmd))
            {
                if (dr.Read())
                    return CreatePlanWindowTimeInfo(dr);
            }
            return null;
        }
        /// <summary>
        /// 根据零件类、当前窗口时间
        /// 获取下一窗口时间
        /// </summary>
        /// <param name="partBoxFid"></param>
        /// <param name="currentWindowTime"></param>
        /// <returns></returns>
        public DateTime GetNextWindowTime(Guid partBoxFid, DateTime currentWindowTime)
        {
            string sql = "select top 1 [WINDOW_TIME] from [LES].[TT_MPM_PLAN_WINDOW_TIME] with(nolock) "
                + "where [VALID_FLAG] = 1 and [SEND_TIME_STATUS] = @SEND_TIME_STATUS and [WINDOW_TIME] > @WINDOW_TIME and [PART_BOX_FID] = @PART_BOX_FID "
                + "order by [WINDOW_TIME] asc;";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(sql);
            db.AddInParameter(cmd, "@SEND_TIME_STATUS", DbType.Int32, (int)SendTimeStatusConstants.NoSend);
            db.AddInParameter(cmd, "@PART_BOX_FID", DbType.Guid, partBoxFid);
            db.AddInParameter(cmd, "@WINDOW_TIME", DbType.DateTime, currentWindowTime);
            object result = db.ExecuteScalar(cmd);
            if (result == null || result == DBNull.Value)
                return DateTime.MaxValue;
            return DateTime.Parse(result.ToString());
        }
        /// <summary>
        /// 根据工作日、零件类
        /// 获取有效的窗口时间
        /// </summary>
        /// <param name="workDay"></param>
        /// <param name="partBoxFid"></param>
        /// <returns></returns>
        public List<DateTime> GetWindowTimesByWorkDay(DateTime workDay, Guid partBoxFid)
        {
            string sql = "select [WINDOW_TIME] from [LES].[TT_MPM_PLAN_WINDOW_TIME] with(nolock) "
                + "where [VALID_FLAG] = 1 and [WORK_DAY] = @WORK_DAY and [PART_BOX_FID] = @PART_BOX_FID "
                + "order by [WINDOW_TIME] asc;";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(sql);
            db.AddInParameter(cmd, "@WORK_DAY", DbType.DateTime, workDay);
            db.AddInParameter(cmd, "@PART_BOX_FID", DbType.Guid, partBoxFid);
            List<DateTime> list = new List<DateTime>();
            using (IDataReader dr = db.ExecuteReader(cmd))
            {
                while (dr.Read())
                {
                    DateTime? windowTime = DBConvert.GetDateTimeNullable(dr, dr.GetOrdinal("WINDOW_TIME"));
                    if (windowTime == null) continue;
                    list.Add(windowTime.GetValueOrDefault());
                }
            }
            return list;
        }


        /// <summary>
        /// 根据工作日、零件类
        /// 获取有效的时区
        /// </summary>
        /// <param name="workDay"></param>
        /// <param name="partBoxFid"></param>
        /// <returns></returns>
        public List<string> GettimeZoneByWorkDay(DateTime workDay, Guid partBoxFid)
        {
            string sql = "select [TIME_ZONE] from [LES].[TT_MPM_PLAN_WINDOW_TIME] with(nolock) "
                + "where [VALID_FLAG] = 1 and [WORK_DAY] = @WORK_DAY and [PART_BOX_FID] = @PART_BOX_FID "
                + "order by [WINDOW_TIME] asc;";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(sql);
            db.AddInParameter(cmd, "@WORK_DAY", DbType.DateTime, workDay);
            db.AddInParameter(cmd, "@PART_BOX_FID", DbType.Guid, partBoxFid);
            List<string> list = new List<string>();
            using (IDataReader dr = db.ExecuteReader(cmd))
            {
                while (dr.Read())
                {
                    string timezone = DBConvert.GetString(dr, dr.GetOrdinal("TIME_ZONE"));
                    if (timezone == null) continue;
                    list.Add(timezone);
                }
            }
            return list;
        }
    }
}
