#region Declaim
//---------------------------------------------------------------------------
// Name:		TrayInfoDAL
// Function: 	Expose data in table TT_SPM_TRAY_INFO from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月22日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// TrayInfoDAL对应表[TT_SPM_TRAY_INFO]
    /// </summary>
    public partial class TrayInfoDAL : BusinessObjectProvider<TrayInfoInfo>
	{
		#region Sql Statements
		private const string TT_SPM_TRAY_INFO_SELECT_BY_ID =
			@"SELECT ID,
				TRAY_NO,
				PLANT,
				WM_NO,
				ZONE_NO,
				DLOC,
				BILL_NO,
				PART_NO,
				PART_CNAME,
				NUM,
				BOX_NUM,
				BIND_TIME,
				TRAY_STATUS,
				BATCH_NO,
				VALID_FLAG,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				FARBAU,
				FARBIN,
				MODEL_YEAR,
				MODEL,
				ZCOLORI,
				ZCOLORI_D,
				TWD_RUNSHEET_NO,
				ASSEMBLY_LINE,
				DMSNO,
				RFID_NO				  
				FROM [LES].[TT_SPM_TRAY_INFO] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TT_SPM_TRAY_INFO_SELECT = 
			@"SELECT ID,
				TRAY_NO,
				PLANT,
				WM_NO,
				ZONE_NO,
				DLOC,
				BILL_NO,
				PART_NO,
				PART_CNAME,
				NUM,
				BOX_NUM,
				BIND_TIME,
				TRAY_STATUS,
				BATCH_NO,
				VALID_FLAG,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				FARBAU,
				FARBIN,
				MODEL_YEAR,
				MODEL,
				ZCOLORI,
				ZCOLORI_D,
				TWD_RUNSHEET_NO,
				ASSEMBLY_LINE,
				DMSNO,
				RFID_NO				 
				FROM [LES].[TT_SPM_TRAY_INFO] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_SPM_TRAY_INFO_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_SPM_TRAY_INFO]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_SPM_TRAY_INFO_INSERT =
			@"INSERT INTO [LES].[TT_SPM_TRAY_INFO] (
				TRAY_NO,
				PLANT,
				WM_NO,
				ZONE_NO,
				DLOC,
				BILL_NO,
				PART_NO,
				PART_CNAME,
				NUM,
				BOX_NUM,
				BIND_TIME,
				TRAY_STATUS,
				BATCH_NO,
				VALID_FLAG,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				FARBAU,
				FARBIN,
				MODEL_YEAR,
				MODEL,
				ZCOLORI,
				ZCOLORI_D,
				TWD_RUNSHEET_NO,
				ASSEMBLY_LINE,
				DMSNO,
				RFID_NO				 
			) VALUES (
				@TRAY_NO,
				@PLANT,
				@WM_NO,
				@ZONE_NO,
				@DLOC,
				@BILL_NO,
				@PART_NO,
				@PART_CNAME,
				@NUM,
				@BOX_NUM,
				@BIND_TIME,
				@TRAY_STATUS,
				@BATCH_NO,
				@VALID_FLAG,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE,
				@FARBAU,
				@FARBIN,
				@MODEL_YEAR,
				@MODEL,
				@ZCOLORI,
				@ZCOLORI_D,
				@TWD_RUNSHEET_NO,
				@ASSEMBLY_LINE,
				@DMSNO,
				@RFID_NO				 
			);SELECT @@IDENTITY;";
		private const string TT_SPM_TRAY_INFO_UPDATE =
			@"UPDATE [LES].[TT_SPM_TRAY_INFO] WITH(ROWLOCK) 
				SET TRAY_NO=@TRAY_NO,
				PLANT=@PLANT,
				WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				DLOC=@DLOC,
				BILL_NO=@BILL_NO,
				PART_NO=@PART_NO,
				PART_CNAME=@PART_CNAME,
				NUM=@NUM,
				BOX_NUM=@BOX_NUM,
				BIND_TIME=@BIND_TIME,
				TRAY_STATUS=@TRAY_STATUS,
				BATCH_NO=@BATCH_NO,
				VALID_FLAG=@VALID_FLAG,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE,
				FARBAU=@FARBAU,
				FARBIN=@FARBIN,
				MODEL_YEAR=@MODEL_YEAR,
				MODEL=@MODEL,
				ZCOLORI=@ZCOLORI,
				ZCOLORI_D=@ZCOLORI_D,
				TWD_RUNSHEET_NO=@TWD_RUNSHEET_NO,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				DMSNO=@DMSNO,
				RFID_NO=@RFID_NO				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TT_SPM_TRAY_INFO_DELETE =
			@"DELETE FROM [LES].[TT_SPM_TRAY_INFO] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get TrayInfoInfo
		/// </summary>
		/// <param name="ID">TrayInfoInfo Primary key </param>
		/// <returns></returns> 
		public TrayInfoInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_TRAY_INFO_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateTrayInfoInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>TrayInfoInfo Collection </returns>
		public List<TrayInfoInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_SPM_TRAY_INFO_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>TrayInfoInfo Collection </returns>
		public List<TrayInfoInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<TrayInfoInfo> list = new List<TrayInfoInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateTrayInfoInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<TrayInfoInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_SPM_TRAY_INFO]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<TrayInfoInfo> list = new List<TrayInfoInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateTrayInfoInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_SPM_TRAY_INFO_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(TrayInfoInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_TRAY_INFO_INSERT);			
			db.AddInParameter(dbCommand, "@TRAY_NO", DbType.String, info.TrayNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@BILL_NO", DbType.String, info.BillNo);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@NUM", DbType.Int32, info.Num);
			db.AddInParameter(dbCommand, "@BOX_NUM", DbType.Int32, info.BoxNum);
			db.AddInParameter(dbCommand, "@BIND_TIME", DbType.DateTime, info.BindTime);
			db.AddInParameter(dbCommand, "@TRAY_STATUS", DbType.Int32, info.TrayStatus);
			db.AddInParameter(dbCommand, "@BATCH_NO", DbType.String, info.BatchNo);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Int32, info.ValidFlag);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@FARBAU", DbType.String, info.Farbau);
			db.AddInParameter(dbCommand, "@FARBIN", DbType.String, info.Farbin);
			db.AddInParameter(dbCommand, "@MODEL_YEAR", DbType.String, info.ModelYear);
			db.AddInParameter(dbCommand, "@MODEL", DbType.String, info.Model);
			db.AddInParameter(dbCommand, "@ZCOLORI", DbType.String, info.Zcolori);
			db.AddInParameter(dbCommand, "@ZCOLORI_D", DbType.String, info.ZcoloriD);
			db.AddInParameter(dbCommand, "@TWD_RUNSHEET_NO", DbType.String, info.TwdRunsheetNo);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@DMSNO", DbType.String, info.Dmsno);
			db.AddInParameter(dbCommand, "@RFID_NO", DbType.String, info.RfidNo);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(TrayInfoInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_TRAY_INFO_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@TRAY_NO", DbType.String, info.TrayNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@BILL_NO", DbType.String, info.BillNo);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@NUM", DbType.Int32, info.Num);
			db.AddInParameter(dbCommand, "@BOX_NUM", DbType.Int32, info.BoxNum);
			db.AddInParameter(dbCommand, "@BIND_TIME", DbType.DateTime, info.BindTime);
			db.AddInParameter(dbCommand, "@TRAY_STATUS", DbType.Int32, info.TrayStatus);
			db.AddInParameter(dbCommand, "@BATCH_NO", DbType.String, info.BatchNo);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Int32, info.ValidFlag);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@FARBAU", DbType.String, info.Farbau);
			db.AddInParameter(dbCommand, "@FARBIN", DbType.String, info.Farbin);
			db.AddInParameter(dbCommand, "@MODEL_YEAR", DbType.String, info.ModelYear);
			db.AddInParameter(dbCommand, "@MODEL", DbType.String, info.Model);
			db.AddInParameter(dbCommand, "@ZCOLORI", DbType.String, info.Zcolori);
			db.AddInParameter(dbCommand, "@ZCOLORI_D", DbType.String, info.ZcoloriD);
			db.AddInParameter(dbCommand, "@TWD_RUNSHEET_NO", DbType.String, info.TwdRunsheetNo);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@DMSNO", DbType.String, info.Dmsno);
			db.AddInParameter(dbCommand, "@RFID_NO", DbType.String, info.RfidNo);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">TrayInfoInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_SPM_TRAY_INFO_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">TrayInfoInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TT_SPM_TRAY_INFO] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                             db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">TrayInfoInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TT_SPM_TRAY_INFO] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static TrayInfoInfo CreateTrayInfoInfo(IDataReader rdr)
		{
			TrayInfoInfo info = new TrayInfoInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.TrayNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAY_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.Dloc = DBConvert.GetString(rdr, rdr.GetOrdinal("DLOC"));			
			info.BillNo = DBConvert.GetString(rdr, rdr.GetOrdinal("BILL_NO"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.Num = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("NUM"));			
			info.BoxNum = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BOX_NUM"));			
			info.BindTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("BIND_TIME"));			
			info.TrayStatus = DBConvert.GetInt32(rdr, rdr.GetOrdinal("TRAY_STATUS"));			
			info.BatchNo = DBConvert.GetString(rdr, rdr.GetOrdinal("BATCH_NO"));			
			info.ValidFlag = DBConvert.GetInt32(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			info.Farbau = DBConvert.GetString(rdr, rdr.GetOrdinal("FARBAU"));			
			info.Farbin = DBConvert.GetString(rdr, rdr.GetOrdinal("FARBIN"));			
			info.ModelYear = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL_YEAR"));			
			info.Model = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL"));			
			info.Zcolori = DBConvert.GetString(rdr, rdr.GetOrdinal("ZCOLORI"));			
			info.ZcoloriD = DBConvert.GetString(rdr, rdr.GetOrdinal("ZCOLORI_D"));			
			info.TwdRunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TWD_RUNSHEET_NO"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.Dmsno = DBConvert.GetString(rdr, rdr.GetOrdinal("DMSNO"));			
			info.RfidNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RFID_NO"));			
			return info;
		}
		
		#endregion
	}
}
