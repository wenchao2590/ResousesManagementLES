#region Declaim
//---------------------------------------------------------------------------
// Name:		NotificationHeadDAL
// Function: 	Expose data in table TT_WMM_NOTIFICATION_HEAD from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月21日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// NotificationHeadDAL对应表[TT_WMM_NOTIFICATION_HEAD]
    /// </summary>
    public partial class NotificationHeadDAL : BusinessObjectProvider<NotificationHeadInfo>
	{
		#region Sql Statements
		private const string TT_WMM_NOTIFICATION_HEAD_SELECT_BY_ID =
			@"SELECT NOTIFICATION_ID,
				NOTIFICATION_NO,
				PLANT,
				WM_NO,
				ZONE_NO,
				COUNT_TYPE,
				COUNT_TIME,
				APPLY_KEEPER,
				BOOK_KEEPER,
				PUBLISH_KEEPER,
				PUBLISH_TIME,
				CONFIRM_FLAG,
				COUNT_STATUS,
				EMERGENCY_TYPE,
				COUNT_REASON,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				FROM_SAP,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ERP_FLAG				  
				FROM [LES].[TT_WMM_NOTIFICATION_HEAD] WITH(NOLOCK) WHERE 1=1  AND NOTIFICATION_ID =@NOTIFICATION_ID;";
			
		private const string TT_WMM_NOTIFICATION_HEAD_SELECT = 
			@"SELECT NOTIFICATION_ID,
				NOTIFICATION_NO,
				PLANT,
				WM_NO,
				ZONE_NO,
				COUNT_TYPE,
				COUNT_TIME,
				APPLY_KEEPER,
				BOOK_KEEPER,
				PUBLISH_KEEPER,
				PUBLISH_TIME,
				CONFIRM_FLAG,
				COUNT_STATUS,
				EMERGENCY_TYPE,
				COUNT_REASON,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				FROM_SAP,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ERP_FLAG				 
				FROM [LES].[TT_WMM_NOTIFICATION_HEAD] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TT_WMM_NOTIFICATION_HEAD_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_WMM_NOTIFICATION_HEAD]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TT_WMM_NOTIFICATION_HEAD_INSERT =
			@"INSERT INTO [LES].[TT_WMM_NOTIFICATION_HEAD] (
				NOTIFICATION_NO,
				PLANT,
				WM_NO,
				ZONE_NO,
				COUNT_TYPE,
				COUNT_TIME,
				APPLY_KEEPER,
				BOOK_KEEPER,
				PUBLISH_KEEPER,
				PUBLISH_TIME,
				CONFIRM_FLAG,
				COUNT_STATUS,
				EMERGENCY_TYPE,
				COUNT_REASON,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				FROM_SAP,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ERP_FLAG				 
			) VALUES (
				@NOTIFICATION_NO,
				@PLANT,
				@WM_NO,
				@ZONE_NO,
				@COUNT_TYPE,
				@COUNT_TIME,
				@APPLY_KEEPER,
				@BOOK_KEEPER,
				@PUBLISH_KEEPER,
				@PUBLISH_TIME,
				@CONFIRM_FLAG,
				@COUNT_STATUS,
				@EMERGENCY_TYPE,
				@COUNT_REASON,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@FROM_SAP,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE,
				@ERP_FLAG				 
			);SELECT @@IDENTITY;";
		private const string TT_WMM_NOTIFICATION_HEAD_UPDATE =
			@"UPDATE [LES].[TT_WMM_NOTIFICATION_HEAD] WITH(ROWLOCK) 
				SET NOTIFICATION_NO=@NOTIFICATION_NO,
				PLANT=@PLANT,
				WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				COUNT_TYPE=@COUNT_TYPE,
				COUNT_TIME=@COUNT_TIME,
				APPLY_KEEPER=@APPLY_KEEPER,
				BOOK_KEEPER=@BOOK_KEEPER,
				PUBLISH_KEEPER=@PUBLISH_KEEPER,
				PUBLISH_TIME=@PUBLISH_TIME,
				CONFIRM_FLAG=@CONFIRM_FLAG,
				COUNT_STATUS=@COUNT_STATUS,
				EMERGENCY_TYPE=@EMERGENCY_TYPE,
				COUNT_REASON=@COUNT_REASON,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				FROM_SAP=@FROM_SAP,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE,
				ERP_FLAG=@ERP_FLAG				 
				WHERE 1=1  AND NOTIFICATION_ID =@NOTIFICATION_ID;";

		private const string TT_WMM_NOTIFICATION_HEAD_DELETE =
			@"DELETE FROM [LES].[TT_WMM_NOTIFICATION_HEAD] WITH(ROWLOCK)  
				WHERE 1=1  AND NOTIFICATION_ID =@NOTIFICATION_ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get NotificationHeadInfo
		/// </summary>
		/// <param name="NOTIFICATION_ID">NotificationHeadInfo Primary key </param>
		/// <returns></returns> 
		public NotificationHeadInfo GetInfo(int aNotificationId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_NOTIFICATION_HEAD_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@NOTIFICATION_ID", DbType.Int32, aNotificationId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateNotificationHeadInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>NotificationHeadInfo Collection </returns>
		public List<NotificationHeadInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_WMM_NOTIFICATION_HEAD_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>NotificationHeadInfo Collection </returns>
		public List<NotificationHeadInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<NotificationHeadInfo> list = new List<NotificationHeadInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateNotificationHeadInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<NotificationHeadInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[NOTIFICATION_ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_WMM_NOTIFICATION_HEAD]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<NotificationHeadInfo> list = new List<NotificationHeadInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateNotificationHeadInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_WMM_NOTIFICATION_HEAD_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(NotificationHeadInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_NOTIFICATION_HEAD_INSERT);			
			db.AddInParameter(dbCommand, "@NOTIFICATION_NO", DbType.String, info.NotificationNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@COUNT_TYPE", DbType.Int32, info.CountType);
			db.AddInParameter(dbCommand, "@COUNT_TIME", DbType.DateTime, info.CountTime);
			db.AddInParameter(dbCommand, "@APPLY_KEEPER", DbType.String, info.ApplyKeeper);
			db.AddInParameter(dbCommand, "@BOOK_KEEPER", DbType.String, info.BookKeeper);
			db.AddInParameter(dbCommand, "@PUBLISH_KEEPER", DbType.String, info.PublishKeeper);
			db.AddInParameter(dbCommand, "@PUBLISH_TIME", DbType.DateTime, info.PublishTime);
			db.AddInParameter(dbCommand, "@CONFIRM_FLAG", DbType.Int32, info.ConfirmFlag);
			db.AddInParameter(dbCommand, "@COUNT_STATUS", DbType.Int32, info.CountStatus);
			db.AddInParameter(dbCommand, "@EMERGENCY_TYPE", DbType.Int32, info.EmergencyType);
			db.AddInParameter(dbCommand, "@COUNT_REASON", DbType.String, info.CountReason);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@FROM_SAP", DbType.Int32, info.FromSap);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@ERP_FLAG", DbType.Int32, info.ErpFlag);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(NotificationHeadInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_NOTIFICATION_HEAD_UPDATE);				
			db.AddInParameter(dbCommand, "@NOTIFICATION_ID", DbType.Int32, info.NotificationId);
			db.AddInParameter(dbCommand, "@NOTIFICATION_NO", DbType.String, info.NotificationNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@COUNT_TYPE", DbType.Int32, info.CountType);
			db.AddInParameter(dbCommand, "@COUNT_TIME", DbType.DateTime, info.CountTime);
			db.AddInParameter(dbCommand, "@APPLY_KEEPER", DbType.String, info.ApplyKeeper);
			db.AddInParameter(dbCommand, "@BOOK_KEEPER", DbType.String, info.BookKeeper);
			db.AddInParameter(dbCommand, "@PUBLISH_KEEPER", DbType.String, info.PublishKeeper);
			db.AddInParameter(dbCommand, "@PUBLISH_TIME", DbType.DateTime, info.PublishTime);
			db.AddInParameter(dbCommand, "@CONFIRM_FLAG", DbType.Int32, info.ConfirmFlag);
			db.AddInParameter(dbCommand, "@COUNT_STATUS", DbType.Int32, info.CountStatus);
			db.AddInParameter(dbCommand, "@EMERGENCY_TYPE", DbType.Int32, info.EmergencyType);
			db.AddInParameter(dbCommand, "@COUNT_REASON", DbType.String, info.CountReason);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@FROM_SAP", DbType.Int32, info.FromSap);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@ERP_FLAG", DbType.Int32, info.ErpFlag);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="NOTIFICATION_ID">NotificationHeadInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aNotificationId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_NOTIFICATION_HEAD_DELETE);
		    db.AddInParameter(dbCommand, "@NOTIFICATION_ID", DbType.Int32, aNotificationId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="NOTIFICATION_ID">NotificationHeadInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aNotificationId)
		{
		    string sql = "update [LES].[TT_WMM_NOTIFICATION_HEAD] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND NOTIFICATION_ID =@NOTIFICATION_ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@NOTIFICATION_ID", DbType.Int32, aNotificationId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static NotificationHeadInfo CreateNotificationHeadInfo(IDataReader rdr)
		{
			NotificationHeadInfo info = new NotificationHeadInfo();
			info.NotificationId = DBConvert.GetInt32(rdr, rdr.GetOrdinal("NOTIFICATION_ID"));			
			info.NotificationNo = DBConvert.GetString(rdr, rdr.GetOrdinal("NOTIFICATION_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.CountType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("COUNT_TYPE"));			
			info.CountTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("COUNT_TIME"));			
			info.ApplyKeeper = DBConvert.GetString(rdr, rdr.GetOrdinal("APPLY_KEEPER"));			
			info.BookKeeper = DBConvert.GetString(rdr, rdr.GetOrdinal("BOOK_KEEPER"));			
			info.PublishKeeper = DBConvert.GetString(rdr, rdr.GetOrdinal("PUBLISH_KEEPER"));			
			info.PublishTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PUBLISH_TIME"));			
			info.ConfirmFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("CONFIRM_FLAG"));			
			info.CountStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("COUNT_STATUS"));			
			info.EmergencyType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("EMERGENCY_TYPE"));			
			info.CountReason = DBConvert.GetString(rdr, rdr.GetOrdinal("COUNT_REASON"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.FromSap = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("FROM_SAP"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			info.ErpFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ERP_FLAG"));			
			return info;
		}
		
		#endregion
	}
}
