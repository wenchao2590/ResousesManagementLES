#region Declaim
//---------------------------------------------------------------------------
// Name:		ModelqueryDAL
// Function: 	Expose data in table V_SPS_MODELQUERY from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年1月8日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#endregion

namespace DAL.LES
{
    //// <summary>
    /// ModelqueryDAL对应表[V_SPS_MODELQUERY]
    /// </summary>
    public partial class ModelqueryDAL : BusinessObjectProvider<ModelqueryInfo>
    {
        #region Sql Statements
        private const string V_SPS_MODELQUERY_SELECT_BY_ID =
            "";

        private const string V_SPS_MODELQUERY_SELECT =
            @"SELECT SPS_RUNSHEET_NO,
				SUPPLIER_NUM,
				PART_NO,
				SHEET_STATUS,
				DOCK,
				KNR,
				RUNSHEET_TYPE,
				BOX_PARTS,
				PART_CNAME,
				PLANT,
				PRINT_STATE,
				COMMENTS,
				TRIGGER_TYPE,
				ASSEMBLY_LINE,
				VIN,
				ACTUAL_INBOUND_PACKAGE_QTY,
				MODEL_NO,
				ACTUAL_ARRIVAL_TIME,
				REQUIRED_INBOUND_PACKAGE_QTY,
				SEND_STATUS				 
				FROM [LES].[V_SPS_MODELQUERY] WITH (NOLOCK) WHERE 1=1 {0};";

        private const string V_SPS_MODELQUERY_SELECT_COUNTS =
            @"SELECT count(*) FROM [LES].[V_SPS_MODELQUERY]  WITH(NOLOCK) WHERE 1=1 {0};";

        private const string V_SPS_MODELQUERY_INSERT =
            @"INSERT INTO [LES].[V_SPS_MODELQUERY] (
				SPS_RUNSHEET_NO,
				SUPPLIER_NUM,
				PART_NO,
				SHEET_STATUS,
				DOCK,
				KNR,
				RUNSHEET_TYPE,
				BOX_PARTS,
				PART_CNAME,
				PLANT,
				PRINT_STATE,
				COMMENTS,
				TRIGGER_TYPE,
				ASSEMBLY_LINE,
				VIN,
				ACTUAL_INBOUND_PACKAGE_QTY,
				MODEL_NO,
				ACTUAL_ARRIVAL_TIME,
				REQUIRED_INBOUND_PACKAGE_QTY,
				SEND_STATUS				 
			) VALUES (
				@SPS_RUNSHEET_NO,
				@SUPPLIER_NUM,
				@PART_NO,
				@SHEET_STATUS,
				@DOCK,
				@KNR,
				@RUNSHEET_TYPE,
				@BOX_PARTS,
				@PART_CNAME,
				@PLANT,
				@PRINT_STATE,
				@COMMENTS,
				@TRIGGER_TYPE,
				@ASSEMBLY_LINE,
				@VIN,
				@ACTUAL_INBOUND_PACKAGE_QTY,
				@MODEL_NO,
				@ACTUAL_ARRIVAL_TIME,
				@REQUIRED_INBOUND_PACKAGE_QTY,
				@SEND_STATUS				 
			);";
        private const string V_SPS_MODELQUERY_UPDATE =
            "";

        private const string V_SPS_MODELQUERY_DELETE =
            "";
        #endregion

        #region Access Methods

        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="textWhere">Conditon</param>
        /// <param name="orderText">Sort</param>
        /// <returns>ModelqueryInfo Collection </returns>
        public List<ModelqueryInfo> GetList(string textWhere, string orderText)
        {
            string query = string.Empty;
            if (string.IsNullOrEmpty(textWhere))
                query = string.Empty;
            else
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    query = textWhere;
                else
                    query = " and " + textWhere;
            }
            if (!string.IsNullOrEmpty(orderText))
                query += " order by " + orderText;

            return GetList(string.Format(V_SPS_MODELQUERY_SELECT, query));
        }
        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>ModelqueryInfo Collection </returns>
        public List<ModelqueryInfo> GetList(string sql)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<ModelqueryInfo> list = new List<ModelqueryInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateModelqueryInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
        public List<ModelqueryInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
        {
            if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
            string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
            else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[VIN] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[V_SPS_MODELQUERY]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<ModelqueryInfo> list = new List<ModelqueryInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateModelqueryInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            if (string.IsNullOrEmpty(textWhere))
                textWhere = string.Empty;
            else
            {
                if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    textWhere = " and " + textWhere;
            }
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(V_SPS_MODELQUERY_SELECT_COUNTS, textWhere));
            return Convert.ToInt32(db.ExecuteScalar(cmd));
        }
        /// <summary>
        /// Add
        /// </summary>
        /// <param name="info"> info</param>
        public bool Add(ModelqueryInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_SPS_MODELQUERY_INSERT);
            db.AddInParameter(dbCommand, "@SPS_RUNSHEET_NO", DbType.String, info.SpsRunsheetNo);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
            db.AddInParameter(dbCommand, "@SHEET_STATUS", DbType.Int32, info.SheetStatus);
            db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
            db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
            db.AddInParameter(dbCommand, "@RUNSHEET_TYPE", DbType.Int32, info.RunsheetType);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
            db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
            db.AddInParameter(dbCommand, "@PRINT_STATE", DbType.Int32, info.PrintState);
            db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
            db.AddInParameter(dbCommand, "@TRIGGER_TYPE", DbType.Int32, info.TriggerType);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
            db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
            db.AddInParameter(dbCommand, "@ACTUAL_INBOUND_PACKAGE_QTY", DbType.Int32, info.ActualInboundPackageQty);
            db.AddInParameter(dbCommand, "@MODEL_NO", DbType.String, info.ModelNo);
            db.AddInParameter(dbCommand, "@ACTUAL_ARRIVAL_TIME", DbType.DateTime, info.ActualArrivalTime);
            db.AddInParameter(dbCommand, "@REQUIRED_INBOUND_PACKAGE_QTY", DbType.Int32, info.RequiredInboundPackageQty);
            db.AddInParameter(dbCommand, "@SEND_STATUS", DbType.Int32, info.SendStatus);
            return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;
        }
        /// <summary>
        /// Update
        /// </summary>
        /// <param name="info">info</param>
        public int Update(ModelqueryInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(V_SPS_MODELQUERY_UPDATE);
            db.AddInParameter(dbCommand, "@SPS_RUNSHEET_NO", DbType.String, info.SpsRunsheetNo);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
            db.AddInParameter(dbCommand, "@SHEET_STATUS", DbType.Int32, info.SheetStatus);
            db.AddInParameter(dbCommand, "@DOCK", DbType.String, info.Dock);
            db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
            db.AddInParameter(dbCommand, "@RUNSHEET_TYPE", DbType.Int32, info.RunsheetType);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
            db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
            db.AddInParameter(dbCommand, "@PRINT_STATE", DbType.Int32, info.PrintState);
            db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
            db.AddInParameter(dbCommand, "@TRIGGER_TYPE", DbType.Int32, info.TriggerType);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
            db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
            db.AddInParameter(dbCommand, "@ACTUAL_INBOUND_PACKAGE_QTY", DbType.Int32, info.ActualInboundPackageQty);
            db.AddInParameter(dbCommand, "@MODEL_NO", DbType.String, info.ModelNo);
            db.AddInParameter(dbCommand, "@ACTUAL_ARRIVAL_TIME", DbType.DateTime, info.ActualArrivalTime);
            db.AddInParameter(dbCommand, "@REQUIRED_INBOUND_PACKAGE_QTY", DbType.Int32, info.RequiredInboundPackageQty);
            db.AddInParameter(dbCommand, "@SEND_STATUS", DbType.Int32, info.SendStatus);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }


        #endregion

        #region Helpers

        private static ModelqueryInfo CreateModelqueryInfo(IDataReader rdr)
        {
            ModelqueryInfo info = new ModelqueryInfo();
            info.SpsRunsheetNo = DBConvert.GetString(rdr, rdr.GetOrdinal("SPS_RUNSHEET_NO"));
            info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));
            info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));
            info.SheetStatus = DBConvert.GetInt32(rdr, rdr.GetOrdinal("SHEET_STATUS"));
            info.Dock = DBConvert.GetString(rdr, rdr.GetOrdinal("DOCK"));
            info.Knr = DBConvert.GetString(rdr, rdr.GetOrdinal("KNR"));
            info.RunsheetType = DBConvert.GetInt32(rdr, rdr.GetOrdinal("RUNSHEET_TYPE"));
            info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));
            info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));
            info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));
            info.PrintState = DBConvert.GetInt32(rdr, rdr.GetOrdinal("PRINT_STATE"));
            info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));
            info.TriggerType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRIGGER_TYPE"));
            info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));
            info.Vin = DBConvert.GetString(rdr, rdr.GetOrdinal("VIN"));
            info.ActualInboundPackageQty = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ACTUAL_INBOUND_PACKAGE_QTY"));
            info.ModelNo = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL_NO"));
            info.ActualArrivalTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("ACTUAL_ARRIVAL_TIME"));
            info.RequiredInboundPackageQty = DBConvert.GetInt32(rdr, rdr.GetOrdinal("REQUIRED_INBOUND_PACKAGE_QTY"));
            info.SendStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SEND_STATUS"));
            return info;
        }

        #endregion
    }
}
