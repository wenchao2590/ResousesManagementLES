#region Declaim
//---------------------------------------------------------------------------
// Name:		BusinessExpenseInDAL
// Function: 	Expose data in table TT_FIM_BUSINESS_EXPENSE_IN from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年6月28日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// BusinessExpenseInDAL对应表[TT_FIM_BUSINESS_EXPENSE_IN]
    /// </summary>
    public partial class BusinessExpenseInDAL : BusinessObjectProvider<BusinessExpenseInInfo>
	{
		#region Sql Statements
		private const string TT_FIM_BUSINESS_EXPENSE_IN_SELECT_BY_ID =
			@"SELECT SUPPLIER_NUM,
				SUPPLIER_NAME,
				ORDER_NO,
				REIMBURSE_USER,
				REIMBURSE_ORGAN_FID,
				EXPENSE_CODE,
				EXPENSE_NAME,
				EXPENSE_TYPE,
				UNIT_PRICE,
				QUANTITY,
				AMOUNT,
				CURRENCY,
				EXCHANGE_RATE,
				EXCHANGE_CURRENCY,
				EXCHANGED_AMOUNT,
				INVOICE_NO,
				INVOICE_TITLE,
				CHECK_FLAG,
				CHECK_DATE,
				CHECK_USER,
				ACTUAL_AMOUNT,
				PAYMENT_FLAG,
				PAYMENT_DATE,
				PAYMENT_USER,
				FI_DOC_NO,
				NO_INVOICE_FLAG,
				APPROVAL_NO,
				APPROVAL_FLAG,
				APPROVAL_USER,
				APPROVE_DATE,
				SOURCE_BUSINESS_FID,
				SOURCE_BUSINESS_NO,
				CUST_TRUST_NO,
				ORGANIZATION_FID,
				COMMENTS,
				VALID_FLAG,
				ID,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				FID,
				CREATE_DATE				  
				FROM [LES].[TT_FIM_BUSINESS_EXPENSE_IN] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TT_FIM_BUSINESS_EXPENSE_IN_SELECT = 
			@"SELECT SUPPLIER_NUM,
				SUPPLIER_NAME,
				ORDER_NO,
				REIMBURSE_USER,
				REIMBURSE_ORGAN_FID,
				EXPENSE_CODE,
				EXPENSE_NAME,
				EXPENSE_TYPE,
				UNIT_PRICE,
				QUANTITY,
				AMOUNT,
				CURRENCY,
				EXCHANGE_RATE,
				EXCHANGE_CURRENCY,
				EXCHANGED_AMOUNT,
				INVOICE_NO,
				INVOICE_TITLE,
				CHECK_FLAG,
				CHECK_DATE,
				CHECK_USER,
				ACTUAL_AMOUNT,
				PAYMENT_FLAG,
				PAYMENT_DATE,
				PAYMENT_USER,
				FI_DOC_NO,
				NO_INVOICE_FLAG,
				APPROVAL_NO,
				APPROVAL_FLAG,
				APPROVAL_USER,
				APPROVE_DATE,
				SOURCE_BUSINESS_FID,
				SOURCE_BUSINESS_NO,
				CUST_TRUST_NO,
				ORGANIZATION_FID,
				COMMENTS,
				VALID_FLAG,
				ID,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				FID,
				CREATE_DATE				 
				FROM [LES].[TT_FIM_BUSINESS_EXPENSE_IN] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_FIM_BUSINESS_EXPENSE_IN_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_FIM_BUSINESS_EXPENSE_IN]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_FIM_BUSINESS_EXPENSE_IN_INSERT =
			@"INSERT INTO [LES].[TT_FIM_BUSINESS_EXPENSE_IN] (
				SUPPLIER_NUM,
				SUPPLIER_NAME,
				ORDER_NO,
				REIMBURSE_USER,
				REIMBURSE_ORGAN_FID,
				EXPENSE_CODE,
				EXPENSE_NAME,
				EXPENSE_TYPE,
				UNIT_PRICE,
				QUANTITY,
				AMOUNT,
				CURRENCY,
				EXCHANGE_RATE,
				EXCHANGE_CURRENCY,
				EXCHANGED_AMOUNT,
				INVOICE_NO,
				INVOICE_TITLE,
				CHECK_FLAG,
				CHECK_DATE,
				CHECK_USER,
				ACTUAL_AMOUNT,
				PAYMENT_FLAG,
				PAYMENT_DATE,
				PAYMENT_USER,
				FI_DOC_NO,
				NO_INVOICE_FLAG,
				APPROVAL_NO,
				APPROVAL_FLAG,
				APPROVAL_USER,
				APPROVE_DATE,
				SOURCE_BUSINESS_FID,
				SOURCE_BUSINESS_NO,
				CUST_TRUST_NO,
				ORGANIZATION_FID,
				COMMENTS,
				VALID_FLAG,
				MODIFY_USER,
				CREATE_USER,
				MODIFY_DATE,
				FID,
				CREATE_DATE				 
			) VALUES (
				@SUPPLIER_NUM,
				@SUPPLIER_NAME,
				@ORDER_NO,
				@REIMBURSE_USER,
				@REIMBURSE_ORGAN_FID,
				@EXPENSE_CODE,
				@EXPENSE_NAME,
				@EXPENSE_TYPE,
				@UNIT_PRICE,
				@QUANTITY,
				@AMOUNT,
				@CURRENCY,
				@EXCHANGE_RATE,
				@EXCHANGE_CURRENCY,
				@EXCHANGED_AMOUNT,
				@INVOICE_NO,
				@INVOICE_TITLE,
				@CHECK_FLAG,
				@CHECK_DATE,
				@CHECK_USER,
				@ACTUAL_AMOUNT,
				@PAYMENT_FLAG,
				@PAYMENT_DATE,
				@PAYMENT_USER,
				@FI_DOC_NO,
				@NO_INVOICE_FLAG,
				@APPROVAL_NO,
				@APPROVAL_FLAG,
				@APPROVAL_USER,
				@APPROVE_DATE,
				@SOURCE_BUSINESS_FID,
				@SOURCE_BUSINESS_NO,
				@CUST_TRUST_NO,
				@ORGANIZATION_FID,
				@COMMENTS,
				@VALID_FLAG,
				@MODIFY_USER,
				@CREATE_USER,
				@MODIFY_DATE,
				@FID,
				GETDATE()				 
			);SELECT @@IDENTITY;";
		private const string TT_FIM_BUSINESS_EXPENSE_IN_UPDATE =
			@"UPDATE [LES].[TT_FIM_BUSINESS_EXPENSE_IN] WITH(ROWLOCK) 
				SET SUPPLIER_NUM=@SUPPLIER_NUM,
				SUPPLIER_NAME=@SUPPLIER_NAME,
				ORDER_NO=@ORDER_NO,
				REIMBURSE_USER=@REIMBURSE_USER,
				REIMBURSE_ORGAN_FID=@REIMBURSE_ORGAN_FID,
				EXPENSE_CODE=@EXPENSE_CODE,
				EXPENSE_NAME=@EXPENSE_NAME,
				EXPENSE_TYPE=@EXPENSE_TYPE,
				UNIT_PRICE=@UNIT_PRICE,
				QUANTITY=@QUANTITY,
				AMOUNT=@AMOUNT,
				CURRENCY=@CURRENCY,
				EXCHANGE_RATE=@EXCHANGE_RATE,
				EXCHANGE_CURRENCY=@EXCHANGE_CURRENCY,
				EXCHANGED_AMOUNT=@EXCHANGED_AMOUNT,
				INVOICE_NO=@INVOICE_NO,
				INVOICE_TITLE=@INVOICE_TITLE,
				CHECK_FLAG=@CHECK_FLAG,
				CHECK_DATE=@CHECK_DATE,
				CHECK_USER=@CHECK_USER,
				ACTUAL_AMOUNT=@ACTUAL_AMOUNT,
				PAYMENT_FLAG=@PAYMENT_FLAG,
				PAYMENT_DATE=@PAYMENT_DATE,
				PAYMENT_USER=@PAYMENT_USER,
				FI_DOC_NO=@FI_DOC_NO,
				NO_INVOICE_FLAG=@NO_INVOICE_FLAG,
				APPROVAL_NO=@APPROVAL_NO,
				APPROVAL_FLAG=@APPROVAL_FLAG,
				APPROVAL_USER=@APPROVAL_USER,
				APPROVE_DATE=@APPROVE_DATE,
				SOURCE_BUSINESS_FID=@SOURCE_BUSINESS_FID,
				SOURCE_BUSINESS_NO=@SOURCE_BUSINESS_NO,
				CUST_TRUST_NO=@CUST_TRUST_NO,
				ORGANIZATION_FID=@ORGANIZATION_FID,
				COMMENTS=@COMMENTS,
				VALID_FLAG=@VALID_FLAG,
				MODIFY_USER=@MODIFY_USER,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				FID=@FID,
				CREATE_DATE=@CREATE_DATE				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TT_FIM_BUSINESS_EXPENSE_IN_DELETE =
			@"DELETE FROM [LES].[TT_FIM_BUSINESS_EXPENSE_IN] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get BusinessExpenseInInfo
		/// </summary>
		/// <param name="ID">BusinessExpenseInInfo Primary key </param>
		/// <returns></returns> 
		public BusinessExpenseInInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_FIM_BUSINESS_EXPENSE_IN_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateBusinessExpenseInInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>BusinessExpenseInInfo Collection </returns>
		public List<BusinessExpenseInInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_FIM_BUSINESS_EXPENSE_IN_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>BusinessExpenseInInfo Collection </returns>
		public List<BusinessExpenseInInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<BusinessExpenseInInfo> list = new List<BusinessExpenseInInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateBusinessExpenseInInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<BusinessExpenseInInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_FIM_BUSINESS_EXPENSE_IN]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<BusinessExpenseInInfo> list = new List<BusinessExpenseInInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateBusinessExpenseInInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_FIM_BUSINESS_EXPENSE_IN_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(BusinessExpenseInInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_FIM_BUSINESS_EXPENSE_IN_INSERT);			
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@ORDER_NO", DbType.String, info.OrderNo);
			db.AddInParameter(dbCommand, "@REIMBURSE_USER", DbType.String, info.ReimburseUser);
			db.AddInParameter(dbCommand, "@REIMBURSE_ORGAN_FID", DbType.Guid, info.ReimburseOrganFid);
			db.AddInParameter(dbCommand, "@EXPENSE_CODE", DbType.String, info.ExpenseCode);
			db.AddInParameter(dbCommand, "@EXPENSE_NAME", DbType.String, info.ExpenseName);
			db.AddInParameter(dbCommand, "@EXPENSE_TYPE", DbType.Int32, info.ExpenseType);
			db.AddInParameter(dbCommand, "@UNIT_PRICE", DbType.Decimal, info.UnitPrice);
			db.AddInParameter(dbCommand, "@QUANTITY", DbType.Decimal, info.Quantity);
			db.AddInParameter(dbCommand, "@AMOUNT", DbType.Decimal, info.Amount);
			db.AddInParameter(dbCommand, "@CURRENCY", DbType.String, info.Currency);
			db.AddInParameter(dbCommand, "@EXCHANGE_RATE", DbType.Decimal, info.ExchangeRate);
			db.AddInParameter(dbCommand, "@EXCHANGE_CURRENCY", DbType.String, info.ExchangeCurrency);
			db.AddInParameter(dbCommand, "@EXCHANGED_AMOUNT", DbType.Decimal, info.ExchangedAmount);
			db.AddInParameter(dbCommand, "@INVOICE_NO", DbType.String, info.InvoiceNo);
			db.AddInParameter(dbCommand, "@INVOICE_TITLE", DbType.String, info.InvoiceTitle);
			db.AddInParameter(dbCommand, "@CHECK_FLAG", DbType.Boolean, info.CheckFlag);
			db.AddInParameter(dbCommand, "@CHECK_DATE", DbType.DateTime, info.CheckDate);
			db.AddInParameter(dbCommand, "@CHECK_USER", DbType.String, info.CheckUser);
			db.AddInParameter(dbCommand, "@ACTUAL_AMOUNT", DbType.Decimal, info.ActualAmount);
			db.AddInParameter(dbCommand, "@PAYMENT_FLAG", DbType.Boolean, info.PaymentFlag);
			db.AddInParameter(dbCommand, "@PAYMENT_DATE", DbType.DateTime, info.PaymentDate);
			db.AddInParameter(dbCommand, "@PAYMENT_USER", DbType.String, info.PaymentUser);
			db.AddInParameter(dbCommand, "@FI_DOC_NO", DbType.String, info.FiDocNo);
			db.AddInParameter(dbCommand, "@NO_INVOICE_FLAG", DbType.Boolean, info.NoInvoiceFlag);
			db.AddInParameter(dbCommand, "@APPROVAL_NO", DbType.String, info.ApprovalNo);
			db.AddInParameter(dbCommand, "@APPROVAL_FLAG", DbType.Boolean, info.ApprovalFlag);
			db.AddInParameter(dbCommand, "@APPROVAL_USER", DbType.String, info.ApprovalUser);
			db.AddInParameter(dbCommand, "@APPROVE_DATE", DbType.DateTime, info.ApproveDate);
			db.AddInParameter(dbCommand, "@SOURCE_BUSINESS_FID", DbType.Guid, info.SourceBusinessFid);
			db.AddInParameter(dbCommand, "@SOURCE_BUSINESS_NO", DbType.String, info.SourceBusinessNo);
			db.AddInParameter(dbCommand, "@CUST_TRUST_NO", DbType.String, info.CustTrustNo);
			db.AddInParameter(dbCommand, "@ORGANIZATION_FID", DbType.Guid, info.OrganizationFid);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(BusinessExpenseInInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_FIM_BUSINESS_EXPENSE_IN_UPDATE);				
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@ORDER_NO", DbType.String, info.OrderNo);
			db.AddInParameter(dbCommand, "@REIMBURSE_USER", DbType.String, info.ReimburseUser);
			db.AddInParameter(dbCommand, "@REIMBURSE_ORGAN_FID", DbType.Guid, info.ReimburseOrganFid);
			db.AddInParameter(dbCommand, "@EXPENSE_CODE", DbType.String, info.ExpenseCode);
			db.AddInParameter(dbCommand, "@EXPENSE_NAME", DbType.String, info.ExpenseName);
			db.AddInParameter(dbCommand, "@EXPENSE_TYPE", DbType.Int32, info.ExpenseType);
			db.AddInParameter(dbCommand, "@UNIT_PRICE", DbType.Decimal, info.UnitPrice);
			db.AddInParameter(dbCommand, "@QUANTITY", DbType.Decimal, info.Quantity);
			db.AddInParameter(dbCommand, "@AMOUNT", DbType.Decimal, info.Amount);
			db.AddInParameter(dbCommand, "@CURRENCY", DbType.String, info.Currency);
			db.AddInParameter(dbCommand, "@EXCHANGE_RATE", DbType.Decimal, info.ExchangeRate);
			db.AddInParameter(dbCommand, "@EXCHANGE_CURRENCY", DbType.String, info.ExchangeCurrency);
			db.AddInParameter(dbCommand, "@EXCHANGED_AMOUNT", DbType.Decimal, info.ExchangedAmount);
			db.AddInParameter(dbCommand, "@INVOICE_NO", DbType.String, info.InvoiceNo);
			db.AddInParameter(dbCommand, "@INVOICE_TITLE", DbType.String, info.InvoiceTitle);
			db.AddInParameter(dbCommand, "@CHECK_FLAG", DbType.Boolean, info.CheckFlag);
			db.AddInParameter(dbCommand, "@CHECK_DATE", DbType.DateTime, info.CheckDate);
			db.AddInParameter(dbCommand, "@CHECK_USER", DbType.String, info.CheckUser);
			db.AddInParameter(dbCommand, "@ACTUAL_AMOUNT", DbType.Decimal, info.ActualAmount);
			db.AddInParameter(dbCommand, "@PAYMENT_FLAG", DbType.Boolean, info.PaymentFlag);
			db.AddInParameter(dbCommand, "@PAYMENT_DATE", DbType.DateTime, info.PaymentDate);
			db.AddInParameter(dbCommand, "@PAYMENT_USER", DbType.String, info.PaymentUser);
			db.AddInParameter(dbCommand, "@FI_DOC_NO", DbType.String, info.FiDocNo);
			db.AddInParameter(dbCommand, "@NO_INVOICE_FLAG", DbType.Boolean, info.NoInvoiceFlag);
			db.AddInParameter(dbCommand, "@APPROVAL_NO", DbType.String, info.ApprovalNo);
			db.AddInParameter(dbCommand, "@APPROVAL_FLAG", DbType.Boolean, info.ApprovalFlag);
			db.AddInParameter(dbCommand, "@APPROVAL_USER", DbType.String, info.ApprovalUser);
			db.AddInParameter(dbCommand, "@APPROVE_DATE", DbType.DateTime, info.ApproveDate);
			db.AddInParameter(dbCommand, "@SOURCE_BUSINESS_FID", DbType.Guid, info.SourceBusinessFid);
			db.AddInParameter(dbCommand, "@SOURCE_BUSINESS_NO", DbType.String, info.SourceBusinessNo);
			db.AddInParameter(dbCommand, "@CUST_TRUST_NO", DbType.String, info.CustTrustNo);
			db.AddInParameter(dbCommand, "@ORGANIZATION_FID", DbType.Guid, info.OrganizationFid);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">BusinessExpenseInInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_FIM_BUSINESS_EXPENSE_IN_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">BusinessExpenseInInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TT_FIM_BUSINESS_EXPENSE_IN] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
                                     			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
     db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">BusinessExpenseInInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TT_FIM_BUSINESS_EXPENSE_IN] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static BusinessExpenseInInfo CreateBusinessExpenseInInfo(IDataReader rdr)
		{
			BusinessExpenseInInfo info = new BusinessExpenseInInfo();
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.SupplierName = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NAME"));			
			info.OrderNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ORDER_NO"));			
			info.ReimburseUser = DBConvert.GetString(rdr, rdr.GetOrdinal("REIMBURSE_USER"));			
			info.ReimburseOrganFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("REIMBURSE_ORGAN_FID"));			
			info.ExpenseCode = DBConvert.GetString(rdr, rdr.GetOrdinal("EXPENSE_CODE"));			
			info.ExpenseName = DBConvert.GetString(rdr, rdr.GetOrdinal("EXPENSE_NAME"));			
			info.ExpenseType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("EXPENSE_TYPE"));			
			info.UnitPrice = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("UNIT_PRICE"));			
			info.Quantity = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("QUANTITY"));			
			info.Amount = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("AMOUNT"));			
			info.Currency = DBConvert.GetString(rdr, rdr.GetOrdinal("CURRENCY"));			
			info.ExchangeRate = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("EXCHANGE_RATE"));			
			info.ExchangeCurrency = DBConvert.GetString(rdr, rdr.GetOrdinal("EXCHANGE_CURRENCY"));			
			info.ExchangedAmount = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("EXCHANGED_AMOUNT"));			
			info.InvoiceNo = DBConvert.GetString(rdr, rdr.GetOrdinal("INVOICE_NO"));			
			info.InvoiceTitle = DBConvert.GetString(rdr, rdr.GetOrdinal("INVOICE_TITLE"));			
			info.CheckFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("CHECK_FLAG"));			
			info.CheckDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CHECK_DATE"));			
			info.CheckUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CHECK_USER"));			
			info.ActualAmount = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("ACTUAL_AMOUNT"));			
			info.PaymentFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("PAYMENT_FLAG"));			
			info.PaymentDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PAYMENT_DATE"));			
			info.PaymentUser = DBConvert.GetString(rdr, rdr.GetOrdinal("PAYMENT_USER"));			
			info.FiDocNo = DBConvert.GetString(rdr, rdr.GetOrdinal("FI_DOC_NO"));			
			info.NoInvoiceFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("NO_INVOICE_FLAG"));			
			info.ApprovalNo = DBConvert.GetString(rdr, rdr.GetOrdinal("APPROVAL_NO"));			
			info.ApprovalFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("APPROVAL_FLAG"));			
			info.ApprovalUser = DBConvert.GetString(rdr, rdr.GetOrdinal("APPROVAL_USER"));			
			info.ApproveDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("APPROVE_DATE"));			
			info.SourceBusinessFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("SOURCE_BUSINESS_FID"));			
			info.SourceBusinessNo = DBConvert.GetString(rdr, rdr.GetOrdinal("SOURCE_BUSINESS_NO"));			
			info.CustTrustNo = DBConvert.GetString(rdr, rdr.GetOrdinal("CUST_TRUST_NO"));			
			info.OrganizationFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("ORGANIZATION_FID"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.ValidFlag = DBConvert.GetBool(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			return info;
		}
		
		#endregion
	}
}
