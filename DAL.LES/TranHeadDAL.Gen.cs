#region Declaim
//---------------------------------------------------------------------------
// Name:		TranHeadDAL
// Function: 	Expose data in table TT_WMM_TRAN_HEAD from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月22日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// TranHeadDAL对应表[TT_WMM_TRAN_HEAD]
    /// </summary>
    public partial class TranHeadDAL : BusinessObjectProvider<TranHeadInfo>
	{
		#region Sql Statements
		private const string TT_WMM_TRAN_HEAD_SELECT_BY_ID =
			@"SELECT TRAN_ID,
				TRAN_NO,
				PLANT,
				S_WM_NO,
				S_ZONE_NO,
				O_WM_NO,
				O_ZONE_NO,
				TRAN_TYPE,
				TRAN_TIME,
				BATCH_NO,
				FINANCIAL_CODE,
				COST_CODE,
				INTERNAL_CODE,
				WBS_CODE,
				TRAN_STATUS,
				PUBLISH_TIME,
				TRAN_KEEPER,
				PUBLISH_KEEPER,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ERP_FLAG				  
				FROM [LES].[TT_WMM_TRAN_HEAD] WITH(NOLOCK) WHERE 1=1  AND TRAN_ID =@TRAN_ID;";
			
		private const string TT_WMM_TRAN_HEAD_SELECT = 
			@"SELECT TRAN_ID,
				TRAN_NO,
				PLANT,
				S_WM_NO,
				S_ZONE_NO,
				O_WM_NO,
				O_ZONE_NO,
				TRAN_TYPE,
				TRAN_TIME,
				BATCH_NO,
				FINANCIAL_CODE,
				COST_CODE,
				INTERNAL_CODE,
				WBS_CODE,
				TRAN_STATUS,
				PUBLISH_TIME,
				TRAN_KEEPER,
				PUBLISH_KEEPER,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ERP_FLAG				 
				FROM [LES].[TT_WMM_TRAN_HEAD] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TT_WMM_TRAN_HEAD_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_WMM_TRAN_HEAD]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TT_WMM_TRAN_HEAD_INSERT =
			@"INSERT INTO [LES].[TT_WMM_TRAN_HEAD] (
				TRAN_NO,
				PLANT,
				S_WM_NO,
				S_ZONE_NO,
				O_WM_NO,
				O_ZONE_NO,
				TRAN_TYPE,
				TRAN_TIME,
				BATCH_NO,
				FINANCIAL_CODE,
				COST_CODE,
				INTERNAL_CODE,
				WBS_CODE,
				TRAN_STATUS,
				PUBLISH_TIME,
				TRAN_KEEPER,
				PUBLISH_KEEPER,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ERP_FLAG				 
			) VALUES (
				@TRAN_NO,
				@PLANT,
				@S_WM_NO,
				@S_ZONE_NO,
				@O_WM_NO,
				@O_ZONE_NO,
				@TRAN_TYPE,
				@TRAN_TIME,
				@BATCH_NO,
				@FINANCIAL_CODE,
				@COST_CODE,
				@INTERNAL_CODE,
				@WBS_CODE,
				@TRAN_STATUS,
				@PUBLISH_TIME,
				@TRAN_KEEPER,
				@PUBLISH_KEEPER,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE,
				@ERP_FLAG				 
			);SELECT @@IDENTITY;";
		private const string TT_WMM_TRAN_HEAD_UPDATE =
			@"UPDATE [LES].[TT_WMM_TRAN_HEAD] WITH(ROWLOCK) 
				SET TRAN_NO=@TRAN_NO,
				PLANT=@PLANT,
				S_WM_NO=@S_WM_NO,
				S_ZONE_NO=@S_ZONE_NO,
				O_WM_NO=@O_WM_NO,
				O_ZONE_NO=@O_ZONE_NO,
				TRAN_TYPE=@TRAN_TYPE,
				TRAN_TIME=@TRAN_TIME,
				BATCH_NO=@BATCH_NO,
				FINANCIAL_CODE=@FINANCIAL_CODE,
				COST_CODE=@COST_CODE,
				INTERNAL_CODE=@INTERNAL_CODE,
				WBS_CODE=@WBS_CODE,
				TRAN_STATUS=@TRAN_STATUS,
				PUBLISH_TIME=@PUBLISH_TIME,
				TRAN_KEEPER=@TRAN_KEEPER,
				PUBLISH_KEEPER=@PUBLISH_KEEPER,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE,
				ERP_FLAG=@ERP_FLAG				 
				WHERE 1=1  AND TRAN_ID =@TRAN_ID;";

		private const string TT_WMM_TRAN_HEAD_DELETE =
			@"DELETE FROM [LES].[TT_WMM_TRAN_HEAD] WITH(ROWLOCK)  
				WHERE 1=1  AND TRAN_ID =@TRAN_ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get TranHeadInfo
		/// </summary>
		/// <param name="TRAN_ID">TranHeadInfo Primary key </param>
		/// <returns></returns> 
		public TranHeadInfo GetInfo(int aTranId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_HEAD_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@TRAN_ID", DbType.Int32, aTranId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateTranHeadInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>TranHeadInfo Collection </returns>
		public List<TranHeadInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_WMM_TRAN_HEAD_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>TranHeadInfo Collection </returns>
		public List<TranHeadInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<TranHeadInfo> list = new List<TranHeadInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateTranHeadInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<TranHeadInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[TRAN_ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_WMM_TRAN_HEAD]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<TranHeadInfo> list = new List<TranHeadInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateTranHeadInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_WMM_TRAN_HEAD_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(TranHeadInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_HEAD_INSERT);			
			db.AddInParameter(dbCommand, "@TRAN_NO", DbType.String, info.TranNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@O_WM_NO", DbType.String, info.OWmNo);
			db.AddInParameter(dbCommand, "@O_ZONE_NO", DbType.String, info.OZoneNo);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.Int32, info.TranType);
			db.AddInParameter(dbCommand, "@TRAN_TIME", DbType.DateTime, info.TranTime);
			db.AddInParameter(dbCommand, "@BATCH_NO", DbType.String, info.BatchNo);
			db.AddInParameter(dbCommand, "@FINANCIAL_CODE", DbType.String, info.FinancialCode);
			db.AddInParameter(dbCommand, "@COST_CODE", DbType.String, info.CostCode);
			db.AddInParameter(dbCommand, "@INTERNAL_CODE", DbType.String, info.InternalCode);
			db.AddInParameter(dbCommand, "@WBS_CODE", DbType.String, info.WbsCode);
			db.AddInParameter(dbCommand, "@TRAN_STATUS", DbType.Int32, info.TranStatus);
			db.AddInParameter(dbCommand, "@PUBLISH_TIME", DbType.DateTime, info.PublishTime);
			db.AddInParameter(dbCommand, "@TRAN_KEEPER", DbType.String, info.TranKeeper);
			db.AddInParameter(dbCommand, "@PUBLISH_KEEPER", DbType.String, info.PublishKeeper);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@ERP_FLAG", DbType.Int32, info.ErpFlag);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(TranHeadInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_HEAD_UPDATE);				
			db.AddInParameter(dbCommand, "@TRAN_ID", DbType.Int32, info.TranId);
			db.AddInParameter(dbCommand, "@TRAN_NO", DbType.String, info.TranNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@O_WM_NO", DbType.String, info.OWmNo);
			db.AddInParameter(dbCommand, "@O_ZONE_NO", DbType.String, info.OZoneNo);
			db.AddInParameter(dbCommand, "@TRAN_TYPE", DbType.Int32, info.TranType);
			db.AddInParameter(dbCommand, "@TRAN_TIME", DbType.DateTime, info.TranTime);
			db.AddInParameter(dbCommand, "@BATCH_NO", DbType.String, info.BatchNo);
			db.AddInParameter(dbCommand, "@FINANCIAL_CODE", DbType.String, info.FinancialCode);
			db.AddInParameter(dbCommand, "@COST_CODE", DbType.String, info.CostCode);
			db.AddInParameter(dbCommand, "@INTERNAL_CODE", DbType.String, info.InternalCode);
			db.AddInParameter(dbCommand, "@WBS_CODE", DbType.String, info.WbsCode);
			db.AddInParameter(dbCommand, "@TRAN_STATUS", DbType.Int32, info.TranStatus);
			db.AddInParameter(dbCommand, "@PUBLISH_TIME", DbType.DateTime, info.PublishTime);
			db.AddInParameter(dbCommand, "@TRAN_KEEPER", DbType.String, info.TranKeeper);
			db.AddInParameter(dbCommand, "@PUBLISH_KEEPER", DbType.String, info.PublishKeeper);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			db.AddInParameter(dbCommand, "@ERP_FLAG", DbType.Int32, info.ErpFlag);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="TRAN_ID">TranHeadInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aTranId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_WMM_TRAN_HEAD_DELETE);
		    db.AddInParameter(dbCommand, "@TRAN_ID", DbType.Int32, aTranId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="TRAN_ID">TranHeadInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aTranId)
		{
		    string sql = "update [LES].[TT_WMM_TRAN_HEAD] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND TRAN_ID =@TRAN_ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@TRAN_ID", DbType.Int32, aTranId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static TranHeadInfo CreateTranHeadInfo(IDataReader rdr)
		{
			TranHeadInfo info = new TranHeadInfo();
			info.TranId = DBConvert.GetInt32(rdr, rdr.GetOrdinal("TRAN_ID"));			
			info.TranNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.SWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_WM_NO"));			
			info.SZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_ZONE_NO"));			
			info.OWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("O_WM_NO"));			
			info.OZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("O_ZONE_NO"));			
			info.TranType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAN_TYPE"));			
			info.TranTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("TRAN_TIME"));			
			info.BatchNo = DBConvert.GetString(rdr, rdr.GetOrdinal("BATCH_NO"));			
			info.FinancialCode = DBConvert.GetString(rdr, rdr.GetOrdinal("FINANCIAL_CODE"));			
			info.CostCode = DBConvert.GetString(rdr, rdr.GetOrdinal("COST_CODE"));			
			info.InternalCode = DBConvert.GetString(rdr, rdr.GetOrdinal("INTERNAL_CODE"));			
			info.WbsCode = DBConvert.GetString(rdr, rdr.GetOrdinal("WBS_CODE"));			
			info.TranStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAN_STATUS"));			
			info.PublishTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PUBLISH_TIME"));			
			info.TranKeeper = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAN_KEEPER"));			
			info.PublishKeeper = DBConvert.GetString(rdr, rdr.GetOrdinal("PUBLISH_KEEPER"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			info.ErpFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ERP_FLAG"));			
			return info;
		}
		
		#endregion
	}
}
