#region Declaim
//---------------------------------------------------------------------------
// Name:		SapPurchaseOrderDAL
// Function: 	Expose data in table TT_MPM_SAP_PURCHASE_ORDER from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月10日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// SapPurchaseOrderDAL对应表[TT_MPM_SAP_PURCHASE_ORDER]
    /// </summary>
    public partial class SapPurchaseOrderDAL : BusinessObjectProvider<SapPurchaseOrderInfo>
	{
		#region Sql Statements
		private const string TT_MPM_SAP_PURCHASE_ORDER_SELECT_BY_ID =
			@"SELECT ID,
				FID,
				ORDER_CODE,
				S_WM_NO,
				S_ZONE_NO,
				T_WM_NO,
				T_ZONE_NO,
				REQUIRE_DATE,
				SUPPLIER_NUM,
				SUPPLIER_SNAME,
				SUPPLIER_NAME,
				CUST_CODE,
				CUST_SNAME,
				CUST_NAME,
				SAP_BWART,
				SAP_KOSTL,
				SAP_LGORT,
				SAP_UMLGO,
				SAP_WEMPF,
				SAP_LIFNR,
				SAP_RSNUM,
				SAP_EBELN,
				STATUS,
				COMMENTS,
				VALID_FLAG,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				  
				FROM [LES].[TT_MPM_SAP_PURCHASE_ORDER] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TT_MPM_SAP_PURCHASE_ORDER_SELECT = 
			@"SELECT ID,
				FID,
				ORDER_CODE,
				S_WM_NO,
				S_ZONE_NO,
				T_WM_NO,
				T_ZONE_NO,
				REQUIRE_DATE,
				SUPPLIER_NUM,
				SUPPLIER_SNAME,
				SUPPLIER_NAME,
				CUST_CODE,
				CUST_SNAME,
				CUST_NAME,
				SAP_BWART,
				SAP_KOSTL,
				SAP_LGORT,
				SAP_UMLGO,
				SAP_WEMPF,
				SAP_LIFNR,
				SAP_RSNUM,
				SAP_EBELN,
				STATUS,
				COMMENTS,
				VALID_FLAG,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
				FROM [LES].[TT_MPM_SAP_PURCHASE_ORDER] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TT_MPM_SAP_PURCHASE_ORDER_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_MPM_SAP_PURCHASE_ORDER]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TT_MPM_SAP_PURCHASE_ORDER_INSERT =
			@"INSERT INTO [LES].[TT_MPM_SAP_PURCHASE_ORDER] (
				FID,
				ORDER_CODE,
				S_WM_NO,
				S_ZONE_NO,
				T_WM_NO,
				T_ZONE_NO,
				REQUIRE_DATE,
				SUPPLIER_NUM,
				SUPPLIER_SNAME,
				SUPPLIER_NAME,
				CUST_CODE,
				CUST_SNAME,
				CUST_NAME,
				SAP_BWART,
				SAP_KOSTL,
				SAP_LGORT,
				SAP_UMLGO,
				SAP_WEMPF,
				SAP_LIFNR,
				SAP_RSNUM,
				SAP_EBELN,
				STATUS,
				COMMENTS,
				VALID_FLAG,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
			) VALUES (
				@FID,
				@ORDER_CODE,
				@S_WM_NO,
				@S_ZONE_NO,
				@T_WM_NO,
				@T_ZONE_NO,
				@REQUIRE_DATE,
				@SUPPLIER_NUM,
				@SUPPLIER_SNAME,
				@SUPPLIER_NAME,
				@CUST_CODE,
				@CUST_SNAME,
				@CUST_NAME,
				@SAP_BWART,
				@SAP_KOSTL,
				@SAP_LGORT,
				@SAP_UMLGO,
				@SAP_WEMPF,
				@SAP_LIFNR,
				@SAP_RSNUM,
				@SAP_EBELN,
				@STATUS,
				@COMMENTS,
				@VALID_FLAG,
				GETDATE(),
				@CREATE_USER,
				@MODIFY_DATE,
				@MODIFY_USER				 
			);SELECT @@IDENTITY;";
		private const string TT_MPM_SAP_PURCHASE_ORDER_UPDATE =
			@"UPDATE [LES].[TT_MPM_SAP_PURCHASE_ORDER] WITH(ROWLOCK) 
				SET FID=@FID,
				ORDER_CODE=@ORDER_CODE,
				S_WM_NO=@S_WM_NO,
				S_ZONE_NO=@S_ZONE_NO,
				T_WM_NO=@T_WM_NO,
				T_ZONE_NO=@T_ZONE_NO,
				REQUIRE_DATE=@REQUIRE_DATE,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				SUPPLIER_SNAME=@SUPPLIER_SNAME,
				SUPPLIER_NAME=@SUPPLIER_NAME,
				CUST_CODE=@CUST_CODE,
				CUST_SNAME=@CUST_SNAME,
				CUST_NAME=@CUST_NAME,
				SAP_BWART=@SAP_BWART,
				SAP_KOSTL=@SAP_KOSTL,
				SAP_LGORT=@SAP_LGORT,
				SAP_UMLGO=@SAP_UMLGO,
				SAP_WEMPF=@SAP_WEMPF,
				SAP_LIFNR=@SAP_LIFNR,
				SAP_RSNUM=@SAP_RSNUM,
				SAP_EBELN=@SAP_EBELN,
				STATUS=@STATUS,
				COMMENTS=@COMMENTS,
				VALID_FLAG=@VALID_FLAG,
				CREATE_DATE=@CREATE_DATE,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				MODIFY_USER=@MODIFY_USER				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TT_MPM_SAP_PURCHASE_ORDER_DELETE =
			@"DELETE FROM [LES].[TT_MPM_SAP_PURCHASE_ORDER] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get SapPurchaseOrderInfo
		/// </summary>
		/// <param name="ID">SapPurchaseOrderInfo Primary key </param>
		/// <returns></returns> 
		public SapPurchaseOrderInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_MPM_SAP_PURCHASE_ORDER_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateSapPurchaseOrderInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>SapPurchaseOrderInfo Collection </returns>
		public List<SapPurchaseOrderInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_MPM_SAP_PURCHASE_ORDER_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>SapPurchaseOrderInfo Collection </returns>
		public List<SapPurchaseOrderInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<SapPurchaseOrderInfo> list = new List<SapPurchaseOrderInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateSapPurchaseOrderInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<SapPurchaseOrderInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_MPM_SAP_PURCHASE_ORDER]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<SapPurchaseOrderInfo> list = new List<SapPurchaseOrderInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateSapPurchaseOrderInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_MPM_SAP_PURCHASE_ORDER_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(SapPurchaseOrderInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_MPM_SAP_PURCHASE_ORDER_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@ORDER_CODE", DbType.String, info.OrderCode);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@T_WM_NO", DbType.String, info.TWmNo);
			db.AddInParameter(dbCommand, "@T_ZONE_NO", DbType.String, info.TZoneNo);
			db.AddInParameter(dbCommand, "@REQUIRE_DATE", DbType.DateTime, info.RequireDate);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@CUST_CODE", DbType.String, info.CustCode);
			db.AddInParameter(dbCommand, "@CUST_SNAME", DbType.String, info.CustSname);
			db.AddInParameter(dbCommand, "@CUST_NAME", DbType.String, info.CustName);
			db.AddInParameter(dbCommand, "@SAP_BWART", DbType.String, info.SapBwart);
			db.AddInParameter(dbCommand, "@SAP_KOSTL", DbType.String, info.SapKostl);
			db.AddInParameter(dbCommand, "@SAP_LGORT", DbType.String, info.SapLgort);
			db.AddInParameter(dbCommand, "@SAP_UMLGO", DbType.String, info.SapUmlgo);
			db.AddInParameter(dbCommand, "@SAP_WEMPF", DbType.String, info.SapWempf);
			db.AddInParameter(dbCommand, "@SAP_LIFNR", DbType.String, info.SapLifnr);
			db.AddInParameter(dbCommand, "@SAP_RSNUM", DbType.String, info.SapRsnum);
			db.AddInParameter(dbCommand, "@SAP_EBELN", DbType.String, info.SapEbeln);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(SapPurchaseOrderInfo info)
		{
			return  
			@"insert into [LES].[TT_MPM_SAP_PURCHASE_ORDER] (
				FID,
				ORDER_CODE,
				S_WM_NO,
				S_ZONE_NO,
				T_WM_NO,
				T_ZONE_NO,
				REQUIRE_DATE,
				SUPPLIER_NUM,
				SUPPLIER_SNAME,
				SUPPLIER_NAME,
				CUST_CODE,
				CUST_SNAME,
				CUST_NAME,
				SAP_BWART,
				SAP_KOSTL,
				SAP_LGORT,
				SAP_UMLGO,
				SAP_WEMPF,
				SAP_LIFNR,
				SAP_RSNUM,
				SAP_EBELN,
				STATUS,
				COMMENTS,
				VALID_FLAG,
				CREATE_DATE,
				CREATE_USER,
				MODIFY_DATE,
				MODIFY_USER				 
			) values ("+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.OrderCode) ? "NULL" : "N'" + info.OrderCode + "'") + ","+
				(string.IsNullOrEmpty(info.SWmNo) ? "NULL" : "N'" + info.SWmNo + "'") + ","+
				(string.IsNullOrEmpty(info.SZoneNo) ? "NULL" : "N'" + info.SZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.TWmNo) ? "NULL" : "N'" + info.TWmNo + "'") + ","+
				(string.IsNullOrEmpty(info.TZoneNo) ? "NULL" : "N'" + info.TZoneNo + "'") + ","+
				(info.RequireDate == null ? "NULL" : "N'" + info.RequireDate.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierSname) ? "NULL" : "N'" + info.SupplierSname + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierName) ? "NULL" : "N'" + info.SupplierName + "'") + ","+
				(string.IsNullOrEmpty(info.CustCode) ? "NULL" : "N'" + info.CustCode + "'") + ","+
				(string.IsNullOrEmpty(info.CustSname) ? "NULL" : "N'" + info.CustSname + "'") + ","+
				(string.IsNullOrEmpty(info.CustName) ? "NULL" : "N'" + info.CustName + "'") + ","+
				(string.IsNullOrEmpty(info.SapBwart) ? "NULL" : "N'" + info.SapBwart + "'") + ","+
				(string.IsNullOrEmpty(info.SapKostl) ? "NULL" : "N'" + info.SapKostl + "'") + ","+
				(string.IsNullOrEmpty(info.SapLgort) ? "NULL" : "N'" + info.SapLgort + "'") + ","+
				(string.IsNullOrEmpty(info.SapUmlgo) ? "NULL" : "N'" + info.SapUmlgo + "'") + ","+
				(string.IsNullOrEmpty(info.SapWempf) ? "NULL" : "N'" + info.SapWempf + "'") + ","+
				(string.IsNullOrEmpty(info.SapLifnr) ? "NULL" : "N'" + info.SapLifnr + "'") + ","+
				(string.IsNullOrEmpty(info.SapRsnum) ? "NULL" : "N'" + info.SapRsnum + "'") + ","+
				(string.IsNullOrEmpty(info.SapEbeln) ? "NULL" : "N'" + info.SapEbeln + "'") + ","+
				(info.Status == null ? "NULL" : "" + info.Status.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				"1" + ","+		
				"GETDATE()" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				"NULL" + ","+			
				"NULL" + ");";			
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(SapPurchaseOrderInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_MPM_SAP_PURCHASE_ORDER_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@ORDER_CODE", DbType.String, info.OrderCode);
			db.AddInParameter(dbCommand, "@S_WM_NO", DbType.String, info.SWmNo);
			db.AddInParameter(dbCommand, "@S_ZONE_NO", DbType.String, info.SZoneNo);
			db.AddInParameter(dbCommand, "@T_WM_NO", DbType.String, info.TWmNo);
			db.AddInParameter(dbCommand, "@T_ZONE_NO", DbType.String, info.TZoneNo);
			db.AddInParameter(dbCommand, "@REQUIRE_DATE", DbType.DateTime, info.RequireDate);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@CUST_CODE", DbType.String, info.CustCode);
			db.AddInParameter(dbCommand, "@CUST_SNAME", DbType.String, info.CustSname);
			db.AddInParameter(dbCommand, "@CUST_NAME", DbType.String, info.CustName);
			db.AddInParameter(dbCommand, "@SAP_BWART", DbType.String, info.SapBwart);
			db.AddInParameter(dbCommand, "@SAP_KOSTL", DbType.String, info.SapKostl);
			db.AddInParameter(dbCommand, "@SAP_LGORT", DbType.String, info.SapLgort);
			db.AddInParameter(dbCommand, "@SAP_UMLGO", DbType.String, info.SapUmlgo);
			db.AddInParameter(dbCommand, "@SAP_WEMPF", DbType.String, info.SapWempf);
			db.AddInParameter(dbCommand, "@SAP_LIFNR", DbType.String, info.SapLifnr);
			db.AddInParameter(dbCommand, "@SAP_RSNUM", DbType.String, info.SapRsnum);
			db.AddInParameter(dbCommand, "@SAP_EBELN", DbType.String, info.SapEbeln);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">SapPurchaseOrderInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_MPM_SAP_PURCHASE_ORDER_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">SapPurchaseOrderInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TT_MPM_SAP_PURCHASE_ORDER] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                            db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">SapPurchaseOrderInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TT_MPM_SAP_PURCHASE_ORDER] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static SapPurchaseOrderInfo CreateSapPurchaseOrderInfo(IDataReader rdr)
		{
			SapPurchaseOrderInfo info = new SapPurchaseOrderInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.OrderCode = DBConvert.GetString(rdr, rdr.GetOrdinal("ORDER_CODE"));			
			info.SWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_WM_NO"));			
			info.SZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("S_ZONE_NO"));			
			info.TWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("T_WM_NO"));			
			info.TZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("T_ZONE_NO"));			
			info.RequireDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("REQUIRE_DATE"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.SupplierSname = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_SNAME"));			
			info.SupplierName = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NAME"));			
			info.CustCode = DBConvert.GetString(rdr, rdr.GetOrdinal("CUST_CODE"));			
			info.CustSname = DBConvert.GetString(rdr, rdr.GetOrdinal("CUST_SNAME"));			
			info.CustName = DBConvert.GetString(rdr, rdr.GetOrdinal("CUST_NAME"));			
			info.SapBwart = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_BWART"));			
			info.SapKostl = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_KOSTL"));			
			info.SapLgort = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_LGORT"));			
			info.SapUmlgo = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_UMLGO"));			
			info.SapWempf = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_WEMPF"));			
			info.SapLifnr = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_LIFNR"));			
			info.SapRsnum = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_RSNUM"));			
			info.SapEbeln = DBConvert.GetString(rdr, rdr.GetOrdinal("SAP_EBELN"));			
			info.Status = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("STATUS"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.ValidFlag = DBConvert.GetBool(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			return info;
		}
		
		#endregion
	}
}
