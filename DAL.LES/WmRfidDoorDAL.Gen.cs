#region Declaim
//---------------------------------------------------------------------------
// Name:		WmRfidDoorDAL
// Function: 	Expose data in table TT_CMM_WM_RFID_DOOR from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月27日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// WmRfidDoorDAL对应表[TT_CMM_WM_RFID_DOOR]
    /// </summary>
    public partial class WmRfidDoorDAL : BusinessObjectProvider<WmRfidDoorInfo>
	{
		#region Sql Statements
		private const string TT_CMM_WM_RFID_DOOR_SELECT_BY_ID =
			@"SELECT WM_NO,
				ZONE_NO,
				RFID_DOOR_NO,
				COMMENTS,
				ID,
				PLANT				  
				FROM [LES].[TT_CMM_WM_RFID_DOOR] WITH(NOLOCK) WHERE 1=1  AND ID =@ID;";
			
		private const string TT_CMM_WM_RFID_DOOR_SELECT = 
			@"SELECT WM_NO,
				ZONE_NO,
				RFID_DOOR_NO,
				COMMENTS,
				ID,
				PLANT				 
				FROM [LES].[TT_CMM_WM_RFID_DOOR] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TT_CMM_WM_RFID_DOOR_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TT_CMM_WM_RFID_DOOR]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TT_CMM_WM_RFID_DOOR_INSERT =
			@"INSERT INTO [LES].[TT_CMM_WM_RFID_DOOR] (
				WM_NO,
				ZONE_NO,
				RFID_DOOR_NO,
				COMMENTS,
				PLANT				 
			) VALUES (
				@WM_NO,
				@ZONE_NO,
				@RFID_DOOR_NO,
				@COMMENTS,
				@PLANT				 
			);SELECT @@IDENTITY;";
		private const string TT_CMM_WM_RFID_DOOR_UPDATE =
			@"UPDATE [LES].[TT_CMM_WM_RFID_DOOR] WITH(ROWLOCK) 
				SET WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				RFID_DOOR_NO=@RFID_DOOR_NO,
				COMMENTS=@COMMENTS,
				PLANT=@PLANT				 
				WHERE 1=1  AND ID =@ID;";

		private const string TT_CMM_WM_RFID_DOOR_DELETE =
			@"DELETE FROM [LES].[TT_CMM_WM_RFID_DOOR] WITH(ROWLOCK)  
				WHERE 1=1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get WmRfidDoorInfo
		/// </summary>
		/// <param name="ID">WmRfidDoorInfo Primary key </param>
		/// <returns></returns> 
		public WmRfidDoorInfo GetInfo(int aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_CMM_WM_RFID_DOOR_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int32, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateWmRfidDoorInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>WmRfidDoorInfo Collection </returns>
		public List<WmRfidDoorInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TT_CMM_WM_RFID_DOOR_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>WmRfidDoorInfo Collection </returns>
		public List<WmRfidDoorInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<WmRfidDoorInfo> list = new List<WmRfidDoorInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateWmRfidDoorInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<WmRfidDoorInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TT_CMM_WM_RFID_DOOR]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<WmRfidDoorInfo> list = new List<WmRfidDoorInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateWmRfidDoorInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TT_CMM_WM_RFID_DOOR_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public int Add(WmRfidDoorInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TT_CMM_WM_RFID_DOOR_INSERT);			
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@RFID_DOOR_NO", DbType.String, info.RfidDoorNo);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			return int.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(WmRfidDoorInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_CMM_WM_RFID_DOOR_UPDATE);				
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@RFID_DOOR_NO", DbType.String, info.RfidDoorNo);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@ID", DbType.Int32, info.Id);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">WmRfidDoorInfo Primary key </param>
		/// <returns></returns>
		public int Delete(int aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TT_CMM_WM_RFID_DOOR_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int32, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">WmRfidDoorInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,int aId)
		{
		    string sql = "update [LES].[TT_CMM_WM_RFID_DOOR] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int32, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static WmRfidDoorInfo CreateWmRfidDoorInfo(IDataReader rdr)
		{
			WmRfidDoorInfo info = new WmRfidDoorInfo();
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.RfidDoorNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RFID_DOOR_NO"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.Id = DBConvert.GetInt32(rdr, rdr.GetOrdinal("ID"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			return info;
		}
		
		#endregion
	}
}
