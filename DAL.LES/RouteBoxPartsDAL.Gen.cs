#region Declaim
//---------------------------------------------------------------------------
// Name:		RouteBoxPartsDAL
// Function: 	Expose data in table TM_PCS_ROUTE_BOX_PARTS from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年11月7日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;

#endregion

namespace DAL.LES
{
    //// <summary>
    /// RouteBoxPartsDAL对应表[TM_PCS_ROUTE_BOX_PARTS]
    /// </summary>
    public partial class RouteBoxPartsDAL : BusinessObjectProvider<RouteBoxPartsInfo>
    {
        #region Sql Statements
        private const string TM_PCS_ROUTE_BOX_PARTS_SELECT_BY_ID =
            @"SELECT PLANT,
				ASSEMBLY_LINE,
				BOX_PARTS,
				BOX_PARTS_NAME,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				ADVANCE_CONSUME_FOOTPRINT,
				DELAY_TIME,
				TRANSPORT_TIME,
				ONLINE_TIME,
				IS_ORGANIZE_SHEET,
				REGION_IDENTITY,
				BOX_PARTS_STATE,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ROUTE,
				IS_CREATE_TASK				  
				FROM [LES].[TM_PCS_ROUTE_BOX_PARTS] WITH(NOLOCK) WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND BOX_PARTS =@BOX_PARTS;";

        private const string TM_PCS_ROUTE_BOX_PARTS_SELECT =
            @"SELECT PLANT,
				ASSEMBLY_LINE,
				BOX_PARTS,
				BOX_PARTS_NAME,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				ADVANCE_CONSUME_FOOTPRINT,
				DELAY_TIME,
				TRANSPORT_TIME,
				ONLINE_TIME,
				IS_ORGANIZE_SHEET,
				REGION_IDENTITY,
				BOX_PARTS_STATE,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ROUTE,
				IS_CREATE_TASK				 
				FROM [LES].[TM_PCS_ROUTE_BOX_PARTS] WITH (NOLOCK) WHERE 1=1 {0};";

        private const string TM_PCS_ROUTE_BOX_PARTS_SELECT_COUNTS =
            @"SELECT count(*) FROM [LES].[TM_PCS_ROUTE_BOX_PARTS]  WITH(NOLOCK) WHERE 1=1 {0};";

        private const string TM_PCS_ROUTE_BOX_PARTS_INSERT =
            @"INSERT INTO [LES].[TM_PCS_ROUTE_BOX_PARTS] (
				PLANT,
				ASSEMBLY_LINE,
				BOX_PARTS,
				BOX_PARTS_NAME,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM,
				ADVANCE_CONSUME_FOOTPRINT,
				DELAY_TIME,
				TRANSPORT_TIME,
				ONLINE_TIME,
				IS_ORGANIZE_SHEET,
				REGION_IDENTITY,
				BOX_PARTS_STATE,
				COMMENTS,
				CREATE_USER,
				CREATE_DATE,
				UPDATE_USER,
				UPDATE_DATE,
				ROUTE,
				IS_CREATE_TASK				 
			) VALUES (
				@PLANT,
				@ASSEMBLY_LINE,
				@BOX_PARTS,
				@BOX_PARTS_NAME,
				@PLANT_ZONE,
				@WORKSHOP,
				@SUPPLIER_NUM,
				@TRANS_SUPPLIER_NUM,
				@ADVANCE_CONSUME_FOOTPRINT,
				@DELAY_TIME,
				@TRANSPORT_TIME,
				@ONLINE_TIME,
				@IS_ORGANIZE_SHEET,
				@REGION_IDENTITY,
				@BOX_PARTS_STATE,
				@COMMENTS,
				@CREATE_USER,
				@CREATE_DATE,
				@UPDATE_USER,
				@UPDATE_DATE,
				@ROUTE,
				@IS_CREATE_TASK				 
			);";
        private const string TM_PCS_ROUTE_BOX_PARTS_UPDATE =
            @"UPDATE [LES].[TM_PCS_ROUTE_BOX_PARTS] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				BOX_PARTS=@BOX_PARTS,
				BOX_PARTS_NAME=@BOX_PARTS_NAME,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				TRANS_SUPPLIER_NUM=@TRANS_SUPPLIER_NUM,
				ADVANCE_CONSUME_FOOTPRINT=@ADVANCE_CONSUME_FOOTPRINT,
				DELAY_TIME=@DELAY_TIME,
				TRANSPORT_TIME=@TRANSPORT_TIME,
				ONLINE_TIME=@ONLINE_TIME,
				IS_ORGANIZE_SHEET=@IS_ORGANIZE_SHEET,
				REGION_IDENTITY=@REGION_IDENTITY,
				BOX_PARTS_STATE=@BOX_PARTS_STATE,
				COMMENTS=@COMMENTS,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				UPDATE_USER=@UPDATE_USER,
				UPDATE_DATE=@UPDATE_DATE,
				ROUTE=@ROUTE,
				IS_CREATE_TASK=@IS_CREATE_TASK				 
				WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND BOX_PARTS =@BOX_PARTS;";

        private const string TM_PCS_ROUTE_BOX_PARTS_DELETE =
            @"DELETE FROM [LES].[TM_PCS_ROUTE_BOX_PARTS] WITH(ROWLOCK)  
				WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND BOX_PARTS =@BOX_PARTS;";
        #endregion

        #region Access Methods

        /// <summary>
        /// Get RouteBoxPartsInfo
        /// </summary>
        /// <param name="BOX_PARTS">RouteBoxPartsInfo Primary key </param>
        /// <returns></returns> 
        public RouteBoxPartsInfo GetInfo(string aPlant,
                string aAssemblyLine,
                string aBoxParts)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(TM_PCS_ROUTE_BOX_PARTS_SELECT_BY_ID);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, aPlant);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, aAssemblyLine);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, aBoxParts);
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                if (dr.Read())
                    return CreateRouteBoxPartsInfo(dr);
            }
            return null;
        }
        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="textWhere">Conditon</param>
        /// <param name="orderText">Sort</param>
        /// <returns>RouteBoxPartsInfo Collection </returns>
        public List<RouteBoxPartsInfo> GetList(string textWhere, string orderText)
        {
            string query = string.Empty;
            if (string.IsNullOrEmpty(textWhere))
                query = string.Empty;
            else
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    query = textWhere;
                else
                    query = " and " + textWhere;
            }
            if (!string.IsNullOrEmpty(orderText))
                query += " order by " + orderText;

            return GetList(string.Format(TM_PCS_ROUTE_BOX_PARTS_SELECT, query));
        }
        /// <summary>
        /// Get data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>RouteBoxPartsInfo Collection </returns>
        public List<RouteBoxPartsInfo> GetList(string sql)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<RouteBoxPartsInfo> list = new List<RouteBoxPartsInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateRouteBoxPartsInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
        public List<RouteBoxPartsInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
        {
            if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
            string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
            else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[BOX_PARTS] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_PCS_ROUTE_BOX_PARTS]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<RouteBoxPartsInfo> list = new List<RouteBoxPartsInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateRouteBoxPartsInfo(dr));
                }
            }
            return list;
        }
        /// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            if (string.IsNullOrEmpty(textWhere))
                textWhere = string.Empty;
            else
            {
                if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    textWhere = " and " + textWhere;
            }
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_PCS_ROUTE_BOX_PARTS_SELECT_COUNTS, textWhere));
            return Convert.ToInt32(db.ExecuteScalar(cmd));
        }
        /// <summary>
        /// Add
        /// </summary>
        /// <param name="info"> info</param>
        public bool Add(RouteBoxPartsInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(TM_PCS_ROUTE_BOX_PARTS_INSERT);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
            db.AddInParameter(dbCommand, "@BOX_PARTS_NAME", DbType.String, info.BoxPartsName);
            db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
            db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@TRANS_SUPPLIER_NUM", DbType.String, info.TransSupplierNum);
            db.AddInParameter(dbCommand, "@ADVANCE_CONSUME_FOOTPRINT", DbType.Int32, info.AdvanceConsumeFootprint);
            db.AddInParameter(dbCommand, "@DELAY_TIME", DbType.Int32, info.DelayTime);
            db.AddInParameter(dbCommand, "@TRANSPORT_TIME", DbType.Int32, info.TransportTime);
            db.AddInParameter(dbCommand, "@ONLINE_TIME", DbType.Int32, info.OnlineTime);
            db.AddInParameter(dbCommand, "@IS_ORGANIZE_SHEET", DbType.Int32, info.IsOrganizeSheet);
            db.AddInParameter(dbCommand, "@REGION_IDENTITY", DbType.Int32, info.RegionIdentity);
            db.AddInParameter(dbCommand, "@BOX_PARTS_STATE", DbType.Int32, info.BoxPartsState);
            db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
            db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
            db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
            db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
            db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
            db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
            db.AddInParameter(dbCommand, "@IS_CREATE_TASK", DbType.Int32, info.IsCreateTask);
            return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;
        }
        /// <summary>
        /// Update
        /// </summary>
        /// <param name="info">info</param>
        public int Update(RouteBoxPartsInfo info)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(TM_PCS_ROUTE_BOX_PARTS_UPDATE);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, info.BoxParts);
            db.AddInParameter(dbCommand, "@BOX_PARTS_NAME", DbType.String, info.BoxPartsName);
            db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
            db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
            db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
            db.AddInParameter(dbCommand, "@TRANS_SUPPLIER_NUM", DbType.String, info.TransSupplierNum);
            db.AddInParameter(dbCommand, "@ADVANCE_CONSUME_FOOTPRINT", DbType.Int32, info.AdvanceConsumeFootprint);
            db.AddInParameter(dbCommand, "@DELAY_TIME", DbType.Int32, info.DelayTime);
            db.AddInParameter(dbCommand, "@TRANSPORT_TIME", DbType.Int32, info.TransportTime);
            db.AddInParameter(dbCommand, "@ONLINE_TIME", DbType.Int32, info.OnlineTime);
            db.AddInParameter(dbCommand, "@IS_ORGANIZE_SHEET", DbType.Int32, info.IsOrganizeSheet);
            db.AddInParameter(dbCommand, "@REGION_IDENTITY", DbType.Int32, info.RegionIdentity);
            db.AddInParameter(dbCommand, "@BOX_PARTS_STATE", DbType.Int32, info.BoxPartsState);
            db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
            db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
            db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
            db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
            db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
            db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
            db.AddInParameter(dbCommand, "@IS_CREATE_TASK", DbType.Int32, info.IsCreateTask);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }
        /// <summary>
        /// Delete
        /// </summary>
        /// <param name="BOX_PARTS">RouteBoxPartsInfo Primary key </param>
        /// <returns></returns>
        public int Delete(string aPlant,
                string aAssemblyLine,
                string aBoxParts)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(TM_PCS_ROUTE_BOX_PARTS_DELETE);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, aPlant);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, aAssemblyLine);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, aBoxParts);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }
        /// <summary>
        /// UpdateInfo
        /// </summary>
        /// <param name="BOX_PARTS">RouteBoxPartsInfo Primary key </param>
        /// <returns></returns>
        public int UpdateInfo(string fields, string aPlant,
                string aAssemblyLine,
                string aBoxParts)
        {
            string sql = "update [LES].[TM_PCS_ROUTE_BOX_PARTS] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND PLANT =@PLANT AND ASSEMBLY_LINE =@ASSEMBLY_LINE AND BOX_PARTS =@BOX_PARTS;";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            db.AddInParameter(dbCommand, "@PLANT", DbType.String, aPlant);
            db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, aAssemblyLine);
            db.AddInParameter(dbCommand, "@BOX_PARTS", DbType.String, aBoxParts);
            return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
        }
        #endregion

        #region Helpers

        private static RouteBoxPartsInfo CreateRouteBoxPartsInfo(IDataReader rdr)
        {
            RouteBoxPartsInfo info = new RouteBoxPartsInfo();
            info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));
            info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));
            info.BoxParts = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS"));
            info.BoxPartsName = DBConvert.GetString(rdr, rdr.GetOrdinal("BOX_PARTS_NAME"));
            info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));
            info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));
            info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));
            info.TransSupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANS_SUPPLIER_NUM"));
            info.AdvanceConsumeFootprint = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ADVANCE_CONSUME_FOOTPRINT"));
            info.DelayTime = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("DELAY_TIME"));
            info.TransportTime = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRANSPORT_TIME"));
            info.OnlineTime = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ONLINE_TIME"));
            info.IsOrganizeSheet = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_ORGANIZE_SHEET"));
            info.RegionIdentity = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("REGION_IDENTITY"));
            info.BoxPartsState = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BOX_PARTS_STATE"));
            info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));
            info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));
            info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));
            info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));
            info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));
            info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));
            info.IsCreateTask = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_CREATE_TASK"));
            return info;
        }

        #endregion
    }
}
