#region Declaim
//---------------------------------------------------------------------------
// Name:		PartsStockDAL
// Function: 	Expose data in table TM_BAS_PARTS_STOCK from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// PartsStockDAL对应表[TM_BAS_PARTS_STOCK]
    /// </summary>
    public partial class PartsStockDAL : BusinessObjectProvider<PartsStockInfo>
	{
		#region Sql Statements
		private const string TM_BAS_PARTS_STOCK_SELECT_BY_ID =
			@"SELECT PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				ROUTE,
				WM_NO,
				ZONE_NO,
				OCCUPY_AREA,
				DLOC,
				MAX,
				MIN,
				ROW_NUMBER,
				LINE_NUMBER,
				HIGH_NUMBER,
				MATERIAL_GROUP,
				KEEPER,
				TRANSER,
				INFORMATIONER,
				ELOC,
				SAFE_STOCK,
				STOCKS,
				FROZEN_STOCKS,
				AVAILBLE_STOCKS,
				IS_BATCH,
				WMS_RULE,
				COUNTER,
				PART_WEIGHT,
				PART_CLS,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				TRIGGER_WM_NO,
				TRIGGER_ZONE_NO,
				TRIGGER_DLOC,
				EMG_TIME,
				SUPPER_ZONE_DLOC,
				CHECK_TYPE,
				BUSINESS_PK,
				REPACKAGE_AMOUNT,
				PICKUP_ROUTE,
				SHELF_ROUTE,
				COMMENTS,
				TRAY_OUT_ISALL,
				IS_CREATE_TASK,
				TRAY_PACKAGE_MODEL,
				TRAY_MODEL,
				BATCH_COMMEND_WAY,
				BACK_STOCK_RULE,
				PART_CLASSIFY_AREA_NO,
				LINE_SITE_DLOC,
				SCAN_BARCODE_FLAG,
				ID,
				MODIFY_USER,
				VALID_FLAG,
				IS_OUTPUT,
				CREATE_USER,
				MODIFY_DATE,
				FRAGMENT_NUM,
				FID,
				CREATE_DATE				  
				FROM [LES].[TM_BAS_PARTS_STOCK] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TM_BAS_PARTS_STOCK_SELECT = 
			@"SELECT PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				ROUTE,
				WM_NO,
				ZONE_NO,
				OCCUPY_AREA,
				DLOC,
				MAX,
				MIN,
				ROW_NUMBER,
				LINE_NUMBER,
				HIGH_NUMBER,
				MATERIAL_GROUP,
				KEEPER,
				TRANSER,
				INFORMATIONER,
				ELOC,
				SAFE_STOCK,
				STOCKS,
				FROZEN_STOCKS,
				AVAILBLE_STOCKS,
				IS_BATCH,
				WMS_RULE,
				COUNTER,
				PART_WEIGHT,
				PART_CLS,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				TRIGGER_WM_NO,
				TRIGGER_ZONE_NO,
				TRIGGER_DLOC,
				EMG_TIME,
				SUPPER_ZONE_DLOC,
				CHECK_TYPE,
				BUSINESS_PK,
				REPACKAGE_AMOUNT,
				PICKUP_ROUTE,
				SHELF_ROUTE,
				COMMENTS,
				TRAY_OUT_ISALL,
				IS_CREATE_TASK,
				TRAY_PACKAGE_MODEL,
				TRAY_MODEL,
				BATCH_COMMEND_WAY,
				BACK_STOCK_RULE,
				PART_CLASSIFY_AREA_NO,
				LINE_SITE_DLOC,
				SCAN_BARCODE_FLAG,
				ID,
				MODIFY_USER,
				VALID_FLAG,
				IS_OUTPUT,
				CREATE_USER,
				MODIFY_DATE,
				FRAGMENT_NUM,
				FID,
				CREATE_DATE				 
				FROM [LES].[TM_BAS_PARTS_STOCK] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TM_BAS_PARTS_STOCK_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_BAS_PARTS_STOCK]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TM_BAS_PARTS_STOCK_INSERT =
			@"INSERT INTO [LES].[TM_BAS_PARTS_STOCK] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				ROUTE,
				WM_NO,
				ZONE_NO,
				OCCUPY_AREA,
				DLOC,
				MAX,
				MIN,
				ROW_NUMBER,
				LINE_NUMBER,
				HIGH_NUMBER,
				MATERIAL_GROUP,
				KEEPER,
				TRANSER,
				INFORMATIONER,
				ELOC,
				SAFE_STOCK,
				STOCKS,
				FROZEN_STOCKS,
				AVAILBLE_STOCKS,
				IS_BATCH,
				WMS_RULE,
				COUNTER,
				PART_WEIGHT,
				PART_CLS,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				TRIGGER_WM_NO,
				TRIGGER_ZONE_NO,
				TRIGGER_DLOC,
				EMG_TIME,
				SUPPER_ZONE_DLOC,
				CHECK_TYPE,
				BUSINESS_PK,
				REPACKAGE_AMOUNT,
				PICKUP_ROUTE,
				SHELF_ROUTE,
				COMMENTS,
				TRAY_OUT_ISALL,
				IS_CREATE_TASK,
				TRAY_PACKAGE_MODEL,
				TRAY_MODEL,
				BATCH_COMMEND_WAY,
				BACK_STOCK_RULE,
				PART_CLASSIFY_AREA_NO,
				LINE_SITE_DLOC,
				SCAN_BARCODE_FLAG,
				MODIFY_USER,
				VALID_FLAG,
				IS_OUTPUT,
				CREATE_USER,
				MODIFY_DATE,
				FRAGMENT_NUM,
				FID,
				CREATE_DATE				 
			) VALUES (
				@PLANT,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@SUPPLIER_NUM,
				@PART_NO,
				@PART_CNAME,
				@PART_ENAME,
				@PART_NICKNAME,
				@PART_UNITS,
				@INHOUSE_PACKAGE_MODEL,
				@INHOUSE_PACKAGE,
				@INBOUND_PACKAGE_MODEL,
				@INBOUND_PACKAGE,
				@PACKAGE_MODEL,
				@PACKAGE,
				@LOGICAL_PK,
				@ROUTE,
				@WM_NO,
				@ZONE_NO,
				@OCCUPY_AREA,
				@DLOC,
				@MAX,
				@MIN,
				@ROW_NUMBER,
				@LINE_NUMBER,
				@HIGH_NUMBER,
				@MATERIAL_GROUP,
				@KEEPER,
				@TRANSER,
				@INFORMATIONER,
				@ELOC,
				@SAFE_STOCK,
				@STOCKS,
				@FROZEN_STOCKS,
				@AVAILBLE_STOCKS,
				@IS_BATCH,
				@WMS_RULE,
				@COUNTER,
				@PART_WEIGHT,
				@PART_CLS,
				@IS_REPACK,
				@REPACK_ROUTE,
				@IS_TRIGGER_PULL,
				@TRIGGER_WM_NO,
				@TRIGGER_ZONE_NO,
				@TRIGGER_DLOC,
				@EMG_TIME,
				@SUPPER_ZONE_DLOC,
				@CHECK_TYPE,
				@BUSINESS_PK,
				@REPACKAGE_AMOUNT,
				@PICKUP_ROUTE,
				@SHELF_ROUTE,
				@COMMENTS,
				@TRAY_OUT_ISALL,
				@IS_CREATE_TASK,
				@TRAY_PACKAGE_MODEL,
				@TRAY_MODEL,
				@BATCH_COMMEND_WAY,
				@BACK_STOCK_RULE,
				@PART_CLASSIFY_AREA_NO,
				@LINE_SITE_DLOC,
				@SCAN_BARCODE_FLAG,
				@MODIFY_USER,
				@VALID_FLAG,
				@IS_OUTPUT,
				@CREATE_USER,
				@MODIFY_DATE,
				@FRAGMENT_NUM,
				@FID,
				GETDATE()				 
			);SELECT @@IDENTITY;";
		private const string TM_BAS_PARTS_STOCK_UPDATE =
			@"UPDATE [LES].[TM_BAS_PARTS_STOCK] WITH(ROWLOCK) 
				SET PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				PART_NO=@PART_NO,
				PART_CNAME=@PART_CNAME,
				PART_ENAME=@PART_ENAME,
				PART_NICKNAME=@PART_NICKNAME,
				PART_UNITS=@PART_UNITS,
				INHOUSE_PACKAGE_MODEL=@INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE=@INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL=@INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE=@INBOUND_PACKAGE,
				PACKAGE_MODEL=@PACKAGE_MODEL,
				PACKAGE=@PACKAGE,
				LOGICAL_PK=@LOGICAL_PK,
				ROUTE=@ROUTE,
				WM_NO=@WM_NO,
				ZONE_NO=@ZONE_NO,
				OCCUPY_AREA=@OCCUPY_AREA,
				DLOC=@DLOC,
				MAX=@MAX,
				MIN=@MIN,
				ROW_NUMBER=@ROW_NUMBER,
				LINE_NUMBER=@LINE_NUMBER,
				HIGH_NUMBER=@HIGH_NUMBER,
				MATERIAL_GROUP=@MATERIAL_GROUP,
				KEEPER=@KEEPER,
				TRANSER=@TRANSER,
				INFORMATIONER=@INFORMATIONER,
				ELOC=@ELOC,
				SAFE_STOCK=@SAFE_STOCK,
				STOCKS=@STOCKS,
				FROZEN_STOCKS=@FROZEN_STOCKS,
				AVAILBLE_STOCKS=@AVAILBLE_STOCKS,
				IS_BATCH=@IS_BATCH,
				WMS_RULE=@WMS_RULE,
				COUNTER=@COUNTER,
				PART_WEIGHT=@PART_WEIGHT,
				PART_CLS=@PART_CLS,
				IS_REPACK=@IS_REPACK,
				REPACK_ROUTE=@REPACK_ROUTE,
				IS_TRIGGER_PULL=@IS_TRIGGER_PULL,
				TRIGGER_WM_NO=@TRIGGER_WM_NO,
				TRIGGER_ZONE_NO=@TRIGGER_ZONE_NO,
				TRIGGER_DLOC=@TRIGGER_DLOC,
				EMG_TIME=@EMG_TIME,
				SUPPER_ZONE_DLOC=@SUPPER_ZONE_DLOC,
				CHECK_TYPE=@CHECK_TYPE,
				BUSINESS_PK=@BUSINESS_PK,
				REPACKAGE_AMOUNT=@REPACKAGE_AMOUNT,
				PICKUP_ROUTE=@PICKUP_ROUTE,
				SHELF_ROUTE=@SHELF_ROUTE,
				COMMENTS=@COMMENTS,
				TRAY_OUT_ISALL=@TRAY_OUT_ISALL,
				IS_CREATE_TASK=@IS_CREATE_TASK,
				TRAY_PACKAGE_MODEL=@TRAY_PACKAGE_MODEL,
				TRAY_MODEL=@TRAY_MODEL,
				BATCH_COMMEND_WAY=@BATCH_COMMEND_WAY,
				BACK_STOCK_RULE=@BACK_STOCK_RULE,
				PART_CLASSIFY_AREA_NO=@PART_CLASSIFY_AREA_NO,
				LINE_SITE_DLOC=@LINE_SITE_DLOC,
				SCAN_BARCODE_FLAG=@SCAN_BARCODE_FLAG,
				MODIFY_USER=@MODIFY_USER,
				VALID_FLAG=@VALID_FLAG,
				IS_OUTPUT=@IS_OUTPUT,
				CREATE_USER=@CREATE_USER,
				MODIFY_DATE=@MODIFY_DATE,
				FRAGMENT_NUM=@FRAGMENT_NUM,
				FID=@FID,
				CREATE_DATE=@CREATE_DATE				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TM_BAS_PARTS_STOCK_DELETE =
			@"DELETE FROM [LES].[TM_BAS_PARTS_STOCK] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get PartsStockInfo
		/// </summary>
		/// <param name="ID">PartsStockInfo Primary key </param>
		/// <returns></returns> 
		public PartsStockInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_PARTS_STOCK_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreatePartsStockInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>PartsStockInfo Collection </returns>
		public List<PartsStockInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_BAS_PARTS_STOCK_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>PartsStockInfo Collection </returns>
		public List<PartsStockInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<PartsStockInfo> list = new List<PartsStockInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreatePartsStockInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<PartsStockInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_BAS_PARTS_STOCK]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<PartsStockInfo> list = new List<PartsStockInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreatePartsStockInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_BAS_PARTS_STOCK_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(PartsStockInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_PARTS_STOCK_INSERT);			
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@PART_UNITS", DbType.String, info.PartUnits);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE_MODEL", DbType.String, info.InboundPackageModel);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE", DbType.Int32, info.InboundPackage);
			db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Int32, info.Package);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@OCCUPY_AREA", DbType.Decimal, info.OccupyArea);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@MAX", DbType.Decimal, info.Max);
			db.AddInParameter(dbCommand, "@MIN", DbType.Decimal, info.Min);
			db.AddInParameter(dbCommand, "@ROW_NUMBER", DbType.Int32, info.RowNumber);
			db.AddInParameter(dbCommand, "@LINE_NUMBER", DbType.Int32, info.LineNumber);
			db.AddInParameter(dbCommand, "@HIGH_NUMBER", DbType.Int32, info.HighNumber);
			db.AddInParameter(dbCommand, "@MATERIAL_GROUP", DbType.String, info.MaterialGroup);
			db.AddInParameter(dbCommand, "@KEEPER", DbType.String, info.Keeper);
			db.AddInParameter(dbCommand, "@TRANSER", DbType.String, info.Transer);
			db.AddInParameter(dbCommand, "@INFORMATIONER", DbType.String, info.Informationer);
			db.AddInParameter(dbCommand, "@ELOC", DbType.String, info.Eloc);
			db.AddInParameter(dbCommand, "@SAFE_STOCK", DbType.Int32, info.SafeStock);
			db.AddInParameter(dbCommand, "@STOCKS", DbType.Decimal, info.Stocks);
			db.AddInParameter(dbCommand, "@FROZEN_STOCKS", DbType.Decimal, info.FrozenStocks);
			db.AddInParameter(dbCommand, "@AVAILBLE_STOCKS", DbType.Decimal, info.AvailbleStocks);
			db.AddInParameter(dbCommand, "@IS_BATCH", DbType.Int32, info.IsBatch);
			db.AddInParameter(dbCommand, "@WMS_RULE", DbType.String, info.WmsRule);
			db.AddInParameter(dbCommand, "@COUNTER", DbType.Decimal, info.Counter);
			db.AddInParameter(dbCommand, "@PART_WEIGHT", DbType.Decimal, info.PartWeight);
			db.AddInParameter(dbCommand, "@PART_CLS", DbType.String, info.PartCls);
			db.AddInParameter(dbCommand, "@IS_REPACK", DbType.Int32, info.IsRepack);
			db.AddInParameter(dbCommand, "@REPACK_ROUTE", DbType.String, info.RepackRoute);
			db.AddInParameter(dbCommand, "@IS_TRIGGER_PULL", DbType.Int32, info.IsTriggerPull);
			db.AddInParameter(dbCommand, "@TRIGGER_WM_NO", DbType.String, info.TriggerWmNo);
			db.AddInParameter(dbCommand, "@TRIGGER_ZONE_NO", DbType.String, info.TriggerZoneNo);
			db.AddInParameter(dbCommand, "@TRIGGER_DLOC", DbType.String, info.TriggerDloc);
			db.AddInParameter(dbCommand, "@EMG_TIME", DbType.Int32, info.EmgTime);
			db.AddInParameter(dbCommand, "@SUPPER_ZONE_DLOC", DbType.String, info.SupperZoneDloc);
			db.AddInParameter(dbCommand, "@CHECK_TYPE", DbType.Int32, info.CheckType);
			db.AddInParameter(dbCommand, "@BUSINESS_PK", DbType.String, info.BusinessPk);
			db.AddInParameter(dbCommand, "@REPACKAGE_AMOUNT", DbType.Int32, info.RepackageAmount);
			db.AddInParameter(dbCommand, "@PICKUP_ROUTE", DbType.String, info.PickupRoute);
			db.AddInParameter(dbCommand, "@SHELF_ROUTE", DbType.String, info.ShelfRoute);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@TRAY_OUT_ISALL", DbType.Int32, info.TrayOutIsall);
			db.AddInParameter(dbCommand, "@IS_CREATE_TASK", DbType.Int32, info.IsCreateTask);
			db.AddInParameter(dbCommand, "@TRAY_PACKAGE_MODEL", DbType.Int32, info.TrayPackageModel);
			db.AddInParameter(dbCommand, "@TRAY_MODEL", DbType.String, info.TrayModel);
			db.AddInParameter(dbCommand, "@BATCH_COMMEND_WAY", DbType.Int32, info.BatchCommendWay);
			db.AddInParameter(dbCommand, "@BACK_STOCK_RULE", DbType.Int32, info.BackStockRule);
			db.AddInParameter(dbCommand, "@PART_CLASSIFY_AREA_NO", DbType.String, info.PartClassifyAreaNo);
			db.AddInParameter(dbCommand, "@LINE_SITE_DLOC", DbType.String, info.LineSiteDloc);
			db.AddInParameter(dbCommand, "@SCAN_BARCODE_FLAG", DbType.Int32, info.ScanBarcodeFlag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@IS_OUTPUT", DbType.Boolean, info.IsOutput);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@FRAGMENT_NUM", DbType.Decimal, info.FragmentNum);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(PartsStockInfo info)
		{
			return  
			@"insert into [LES].[TM_BAS_PARTS_STOCK] (
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				SUPPLIER_NUM,
				PART_NO,
				PART_CNAME,
				PART_ENAME,
				PART_NICKNAME,
				PART_UNITS,
				INHOUSE_PACKAGE_MODEL,
				INHOUSE_PACKAGE,
				INBOUND_PACKAGE_MODEL,
				INBOUND_PACKAGE,
				PACKAGE_MODEL,
				PACKAGE,
				LOGICAL_PK,
				ROUTE,
				WM_NO,
				ZONE_NO,
				OCCUPY_AREA,
				DLOC,
				MAX,
				MIN,
				ROW_NUMBER,
				LINE_NUMBER,
				HIGH_NUMBER,
				MATERIAL_GROUP,
				KEEPER,
				TRANSER,
				INFORMATIONER,
				ELOC,
				SAFE_STOCK,
				STOCKS,
				FROZEN_STOCKS,
				AVAILBLE_STOCKS,
				IS_BATCH,
				WMS_RULE,
				COUNTER,
				PART_WEIGHT,
				PART_CLS,
				IS_REPACK,
				REPACK_ROUTE,
				IS_TRIGGER_PULL,
				TRIGGER_WM_NO,
				TRIGGER_ZONE_NO,
				TRIGGER_DLOC,
				EMG_TIME,
				SUPPER_ZONE_DLOC,
				CHECK_TYPE,
				BUSINESS_PK,
				REPACKAGE_AMOUNT,
				PICKUP_ROUTE,
				SHELF_ROUTE,
				COMMENTS,
				TRAY_OUT_ISALL,
				IS_CREATE_TASK,
				TRAY_PACKAGE_MODEL,
				TRAY_MODEL,
				BATCH_COMMEND_WAY,
				BACK_STOCK_RULE,
				PART_CLASSIFY_AREA_NO,
				LINE_SITE_DLOC,
				SCAN_BARCODE_FLAG,
				MODIFY_USER,
				VALID_FLAG,
				IS_OUTPUT,
				CREATE_USER,
				MODIFY_DATE,
				FRAGMENT_NUM,
				FID,
				CREATE_DATE				 
			) values ("+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLine) ? "NULL" : "N'" + info.AssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.PlantZone) ? "NULL" : "N'" + info.PlantZone + "'") + ","+
				(string.IsNullOrEmpty(info.Workshop) ? "NULL" : "N'" + info.Workshop + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.PartNo) ? "NULL" : "N'" + info.PartNo + "'") + ","+
				(string.IsNullOrEmpty(info.PartCname) ? "NULL" : "N'" + info.PartCname + "'") + ","+
				(string.IsNullOrEmpty(info.PartEname) ? "NULL" : "N'" + info.PartEname + "'") + ","+
				(string.IsNullOrEmpty(info.PartNickname) ? "NULL" : "N'" + info.PartNickname + "'") + ","+
				(string.IsNullOrEmpty(info.PartUnits) ? "NULL" : "N'" + info.PartUnits + "'") + ","+
				(string.IsNullOrEmpty(info.InhousePackageModel) ? "NULL" : "N'" + info.InhousePackageModel + "'") + ","+
				(info.InhousePackage == null ? "NULL" : "" + info.InhousePackage.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.InboundPackageModel) ? "NULL" : "N'" + info.InboundPackageModel + "'") + ","+
				(info.InboundPackage == null ? "NULL" : "" + info.InboundPackage.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PackageModel) ? "NULL" : "N'" + info.PackageModel + "'") + ","+
				(info.Package == null ? "NULL" : "" + info.Package.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.LogicalPk) ? "NULL" : "N'" + info.LogicalPk + "'") + ","+
				(string.IsNullOrEmpty(info.Route) ? "NULL" : "N'" + info.Route + "'") + ","+
				(string.IsNullOrEmpty(info.WmNo) ? "NULL" : "N'" + info.WmNo + "'") + ","+
				(string.IsNullOrEmpty(info.ZoneNo) ? "NULL" : "N'" + info.ZoneNo + "'") + ","+
				(info.OccupyArea == null ? "NULL" : "" + info.OccupyArea.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Dloc) ? "NULL" : "N'" + info.Dloc + "'") + ","+
				(info.Max == null ? "NULL" : "" + info.Max.GetValueOrDefault() + "") + ","+
				(info.Min == null ? "NULL" : "" + info.Min.GetValueOrDefault() + "") + ","+
				(info.RowNumber == null ? "NULL" : "" + info.RowNumber.GetValueOrDefault() + "") + ","+
				(info.LineNumber == null ? "NULL" : "" + info.LineNumber.GetValueOrDefault() + "") + ","+
				(info.HighNumber == null ? "NULL" : "" + info.HighNumber.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.MaterialGroup) ? "NULL" : "N'" + info.MaterialGroup + "'") + ","+
				(string.IsNullOrEmpty(info.Keeper) ? "NULL" : "N'" + info.Keeper + "'") + ","+
				(string.IsNullOrEmpty(info.Transer) ? "NULL" : "N'" + info.Transer + "'") + ","+
				(string.IsNullOrEmpty(info.Informationer) ? "NULL" : "N'" + info.Informationer + "'") + ","+
				(string.IsNullOrEmpty(info.Eloc) ? "NULL" : "N'" + info.Eloc + "'") + ","+
				(info.SafeStock == null ? "NULL" : "" + info.SafeStock.GetValueOrDefault() + "") + ","+
				(info.Stocks == null ? "NULL" : "" + info.Stocks.GetValueOrDefault() + "") + ","+
				(info.FrozenStocks == null ? "NULL" : "" + info.FrozenStocks.GetValueOrDefault() + "") + ","+
				(info.AvailbleStocks == null ? "NULL" : "" + info.AvailbleStocks.GetValueOrDefault() + "") + ","+
				(info.IsBatch == null ? "NULL" : "" + info.IsBatch.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.WmsRule) ? "NULL" : "N'" + info.WmsRule + "'") + ","+
				(info.Counter == null ? "NULL" : "" + info.Counter.GetValueOrDefault() + "") + ","+
				(info.PartWeight == null ? "NULL" : "" + info.PartWeight.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PartCls) ? "NULL" : "N'" + info.PartCls + "'") + ","+
				(info.IsRepack == null ? "NULL" : "" + info.IsRepack.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.RepackRoute) ? "NULL" : "N'" + info.RepackRoute + "'") + ","+
				(info.IsTriggerPull == null ? "NULL" : "" + info.IsTriggerPull.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.TriggerWmNo) ? "NULL" : "N'" + info.TriggerWmNo + "'") + ","+
				(string.IsNullOrEmpty(info.TriggerZoneNo) ? "NULL" : "N'" + info.TriggerZoneNo + "'") + ","+
				(string.IsNullOrEmpty(info.TriggerDloc) ? "NULL" : "N'" + info.TriggerDloc + "'") + ","+
				(info.EmgTime == null ? "NULL" : "" + info.EmgTime.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.SupperZoneDloc) ? "NULL" : "N'" + info.SupperZoneDloc + "'") + ","+
				(info.CheckType == null ? "NULL" : "" + info.CheckType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.BusinessPk) ? "NULL" : "N'" + info.BusinessPk + "'") + ","+
				(info.RepackageAmount == null ? "NULL" : "" + info.RepackageAmount.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PickupRoute) ? "NULL" : "N'" + info.PickupRoute + "'") + ","+
				(string.IsNullOrEmpty(info.ShelfRoute) ? "NULL" : "N'" + info.ShelfRoute + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				(info.TrayOutIsall == null ? "NULL" : "" + info.TrayOutIsall.GetValueOrDefault() + "") + ","+
				(info.IsCreateTask == null ? "NULL" : "" + info.IsCreateTask.GetValueOrDefault() + "") + ","+
				(info.TrayPackageModel == null ? "NULL" : "" + info.TrayPackageModel.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.TrayModel) ? "NULL" : "N'" + info.TrayModel + "'") + ","+
				(info.BatchCommendWay == null ? "NULL" : "" + info.BatchCommendWay.GetValueOrDefault() + "") + ","+
				(info.BackStockRule == null ? "NULL" : "" + info.BackStockRule.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.PartClassifyAreaNo) ? "NULL" : "N'" + info.PartClassifyAreaNo + "'") + ","+
				(string.IsNullOrEmpty(info.LineSiteDloc) ? "NULL" : "N'" + info.LineSiteDloc + "'") + ","+
				(info.ScanBarcodeFlag == null ? "NULL" : "" + info.ScanBarcodeFlag.GetValueOrDefault() + "") + ","+
				"NULL" + ","+			
				"1" + ","+		
				(info.IsOutput == null ? "NULL" : "" + (info.IsOutput.GetValueOrDefault() ? "1" : "0") + "") + ","+
				"N'" + info.CreateUser + "'" + ","+		
				"NULL" + ","+			
				(info.FragmentNum == null ? "NULL" : "" + info.FragmentNum.GetValueOrDefault() + "") + ","+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				"GETDATE()" + ");";			
				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(PartsStockInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_PARTS_STOCK_UPDATE);				
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.String, info.SupplierNum);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@PART_ENAME", DbType.String, info.PartEname);
			db.AddInParameter(dbCommand, "@PART_NICKNAME", DbType.String, info.PartNickname);
			db.AddInParameter(dbCommand, "@PART_UNITS", DbType.String, info.PartUnits);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE_MODEL", DbType.String, info.InhousePackageModel);
			db.AddInParameter(dbCommand, "@INHOUSE_PACKAGE", DbType.Int32, info.InhousePackage);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE_MODEL", DbType.String, info.InboundPackageModel);
			db.AddInParameter(dbCommand, "@INBOUND_PACKAGE", DbType.Int32, info.InboundPackage);
			db.AddInParameter(dbCommand, "@PACKAGE_MODEL", DbType.String, info.PackageModel);
			db.AddInParameter(dbCommand, "@PACKAGE", DbType.Int32, info.Package);
			db.AddInParameter(dbCommand, "@LOGICAL_PK", DbType.String, info.LogicalPk);
			db.AddInParameter(dbCommand, "@ROUTE", DbType.String, info.Route);
			db.AddInParameter(dbCommand, "@WM_NO", DbType.String, info.WmNo);
			db.AddInParameter(dbCommand, "@ZONE_NO", DbType.String, info.ZoneNo);
			db.AddInParameter(dbCommand, "@OCCUPY_AREA", DbType.Decimal, info.OccupyArea);
			db.AddInParameter(dbCommand, "@DLOC", DbType.String, info.Dloc);
			db.AddInParameter(dbCommand, "@MAX", DbType.Decimal, info.Max);
			db.AddInParameter(dbCommand, "@MIN", DbType.Decimal, info.Min);
			db.AddInParameter(dbCommand, "@ROW_NUMBER", DbType.Int32, info.RowNumber);
			db.AddInParameter(dbCommand, "@LINE_NUMBER", DbType.Int32, info.LineNumber);
			db.AddInParameter(dbCommand, "@HIGH_NUMBER", DbType.Int32, info.HighNumber);
			db.AddInParameter(dbCommand, "@MATERIAL_GROUP", DbType.String, info.MaterialGroup);
			db.AddInParameter(dbCommand, "@KEEPER", DbType.String, info.Keeper);
			db.AddInParameter(dbCommand, "@TRANSER", DbType.String, info.Transer);
			db.AddInParameter(dbCommand, "@INFORMATIONER", DbType.String, info.Informationer);
			db.AddInParameter(dbCommand, "@ELOC", DbType.String, info.Eloc);
			db.AddInParameter(dbCommand, "@SAFE_STOCK", DbType.Int32, info.SafeStock);
			db.AddInParameter(dbCommand, "@STOCKS", DbType.Decimal, info.Stocks);
			db.AddInParameter(dbCommand, "@FROZEN_STOCKS", DbType.Decimal, info.FrozenStocks);
			db.AddInParameter(dbCommand, "@AVAILBLE_STOCKS", DbType.Decimal, info.AvailbleStocks);
			db.AddInParameter(dbCommand, "@IS_BATCH", DbType.Int32, info.IsBatch);
			db.AddInParameter(dbCommand, "@WMS_RULE", DbType.String, info.WmsRule);
			db.AddInParameter(dbCommand, "@COUNTER", DbType.Decimal, info.Counter);
			db.AddInParameter(dbCommand, "@PART_WEIGHT", DbType.Decimal, info.PartWeight);
			db.AddInParameter(dbCommand, "@PART_CLS", DbType.String, info.PartCls);
			db.AddInParameter(dbCommand, "@IS_REPACK", DbType.Int32, info.IsRepack);
			db.AddInParameter(dbCommand, "@REPACK_ROUTE", DbType.String, info.RepackRoute);
			db.AddInParameter(dbCommand, "@IS_TRIGGER_PULL", DbType.Int32, info.IsTriggerPull);
			db.AddInParameter(dbCommand, "@TRIGGER_WM_NO", DbType.String, info.TriggerWmNo);
			db.AddInParameter(dbCommand, "@TRIGGER_ZONE_NO", DbType.String, info.TriggerZoneNo);
			db.AddInParameter(dbCommand, "@TRIGGER_DLOC", DbType.String, info.TriggerDloc);
			db.AddInParameter(dbCommand, "@EMG_TIME", DbType.Int32, info.EmgTime);
			db.AddInParameter(dbCommand, "@SUPPER_ZONE_DLOC", DbType.String, info.SupperZoneDloc);
			db.AddInParameter(dbCommand, "@CHECK_TYPE", DbType.Int32, info.CheckType);
			db.AddInParameter(dbCommand, "@BUSINESS_PK", DbType.String, info.BusinessPk);
			db.AddInParameter(dbCommand, "@REPACKAGE_AMOUNT", DbType.Int32, info.RepackageAmount);
			db.AddInParameter(dbCommand, "@PICKUP_ROUTE", DbType.String, info.PickupRoute);
			db.AddInParameter(dbCommand, "@SHELF_ROUTE", DbType.String, info.ShelfRoute);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@TRAY_OUT_ISALL", DbType.Int32, info.TrayOutIsall);
			db.AddInParameter(dbCommand, "@IS_CREATE_TASK", DbType.Int32, info.IsCreateTask);
			db.AddInParameter(dbCommand, "@TRAY_PACKAGE_MODEL", DbType.Int32, info.TrayPackageModel);
			db.AddInParameter(dbCommand, "@TRAY_MODEL", DbType.String, info.TrayModel);
			db.AddInParameter(dbCommand, "@BATCH_COMMEND_WAY", DbType.Int32, info.BatchCommendWay);
			db.AddInParameter(dbCommand, "@BACK_STOCK_RULE", DbType.Int32, info.BackStockRule);
			db.AddInParameter(dbCommand, "@PART_CLASSIFY_AREA_NO", DbType.String, info.PartClassifyAreaNo);
			db.AddInParameter(dbCommand, "@LINE_SITE_DLOC", DbType.String, info.LineSiteDloc);
			db.AddInParameter(dbCommand, "@SCAN_BARCODE_FLAG", DbType.Int32, info.ScanBarcodeFlag);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@IS_OUTPUT", DbType.Boolean, info.IsOutput);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@FRAGMENT_NUM", DbType.Decimal, info.FragmentNum);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">PartsStockInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_PARTS_STOCK_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">PartsStockInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TM_BAS_PARTS_STOCK] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
                                                                 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
        db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">PartsStockInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TM_BAS_PARTS_STOCK] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static PartsStockInfo CreatePartsStockInfo(IDataReader rdr)
		{
			PartsStockInfo info = new PartsStockInfo();
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.PartEname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_ENAME"));			
			info.PartNickname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NICKNAME"));			
			info.PartUnits = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_UNITS"));			
			info.InhousePackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE_MODEL"));			
			info.InhousePackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INHOUSE_PACKAGE"));			
			info.InboundPackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("INBOUND_PACKAGE_MODEL"));			
			info.InboundPackage = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INBOUND_PACKAGE"));			
			info.PackageModel = DBConvert.GetString(rdr, rdr.GetOrdinal("PACKAGE_MODEL"));			
			info.Package = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PACKAGE"));			
			info.LogicalPk = DBConvert.GetString(rdr, rdr.GetOrdinal("LOGICAL_PK"));			
			info.Route = DBConvert.GetString(rdr, rdr.GetOrdinal("ROUTE"));			
			info.WmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("WM_NO"));			
			info.ZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("ZONE_NO"));			
			info.OccupyArea = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("OCCUPY_AREA"));			
			info.Dloc = DBConvert.GetString(rdr, rdr.GetOrdinal("DLOC"));			
			info.Max = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("MAX"));			
			info.Min = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("MIN"));			
			info.RowNumber = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ROW_NUMBER"));			
			info.LineNumber = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("LINE_NUMBER"));			
			info.HighNumber = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("HIGH_NUMBER"));			
			info.MaterialGroup = DBConvert.GetString(rdr, rdr.GetOrdinal("MATERIAL_GROUP"));			
			info.Keeper = DBConvert.GetString(rdr, rdr.GetOrdinal("KEEPER"));			
			info.Transer = DBConvert.GetString(rdr, rdr.GetOrdinal("TRANSER"));			
			info.Informationer = DBConvert.GetString(rdr, rdr.GetOrdinal("INFORMATIONER"));			
			info.Eloc = DBConvert.GetString(rdr, rdr.GetOrdinal("ELOC"));			
			info.SafeStock = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SAFE_STOCK"));			
			info.Stocks = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("STOCKS"));			
			info.FrozenStocks = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("FROZEN_STOCKS"));			
			info.AvailbleStocks = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("AVAILBLE_STOCKS"));			
			info.IsBatch = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_BATCH"));			
			info.WmsRule = DBConvert.GetString(rdr, rdr.GetOrdinal("WMS_RULE"));			
			info.Counter = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("COUNTER"));			
			info.PartWeight = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("PART_WEIGHT"));			
			info.PartCls = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CLS"));			
			info.IsRepack = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_REPACK"));			
			info.RepackRoute = DBConvert.GetString(rdr, rdr.GetOrdinal("REPACK_ROUTE"));			
			info.IsTriggerPull = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_TRIGGER_PULL"));			
			info.TriggerWmNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TRIGGER_WM_NO"));			
			info.TriggerZoneNo = DBConvert.GetString(rdr, rdr.GetOrdinal("TRIGGER_ZONE_NO"));			
			info.TriggerDloc = DBConvert.GetString(rdr, rdr.GetOrdinal("TRIGGER_DLOC"));			
			info.EmgTime = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("EMG_TIME"));			
			info.SupperZoneDloc = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPER_ZONE_DLOC"));			
			info.CheckType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("CHECK_TYPE"));			
			info.BusinessPk = DBConvert.GetString(rdr, rdr.GetOrdinal("BUSINESS_PK"));			
			info.RepackageAmount = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("REPACKAGE_AMOUNT"));			
			info.PickupRoute = DBConvert.GetString(rdr, rdr.GetOrdinal("PICKUP_ROUTE"));			
			info.ShelfRoute = DBConvert.GetString(rdr, rdr.GetOrdinal("SHELF_ROUTE"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.TrayOutIsall = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAY_OUT_ISALL"));			
			info.IsCreateTask = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("IS_CREATE_TASK"));			
			info.TrayPackageModel = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("TRAY_PACKAGE_MODEL"));			
			info.TrayModel = DBConvert.GetString(rdr, rdr.GetOrdinal("TRAY_MODEL"));			
			info.BatchCommendWay = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BATCH_COMMEND_WAY"));			
			info.BackStockRule = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BACK_STOCK_RULE"));			
			info.PartClassifyAreaNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CLASSIFY_AREA_NO"));			
			info.LineSiteDloc = DBConvert.GetString(rdr, rdr.GetOrdinal("LINE_SITE_DLOC"));			
			info.ScanBarcodeFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SCAN_BARCODE_FLAG"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.IsOutput = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("IS_OUTPUT"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.FragmentNum = DBConvert.GetDecimalNullable(rdr, rdr.GetOrdinal("FRAGMENT_NUM"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			return info;
		}
		
		#endregion
	}
}
