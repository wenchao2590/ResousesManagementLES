#region Declaim
//---------------------------------------------------------------------------
// Name:		InhouseBreakpointPartDAL
// Function: 	Expose data in table TM_BAS_INHOUSE_BREAKPOINT_PART from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// InhouseBreakpointPartDAL对应表[TM_BAS_INHOUSE_BREAKPOINT_PART]
    /// </summary>
    public partial class InhouseBreakpointPartDAL : BusinessObjectProvider<InhouseBreakpointPartInfo>
	{
		#region Sql Statements
		private const string TM_BAS_INHOUSE_BREAKPOINT_PART_SELECT_BY_ID =
			@"SELECT INHOUSE_BREAKPOINT_NO,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				PART_NO,
				PART_CNAME,
				KNR,
				RUNNING_NO,
				INHOUSE_IDENTITY,
				VIN,
				IN_PLANT_SYSTEM_MODE,
				INHOUSE_SYSTEM_MODE,
				MODEL,
				MODEL_NO,
				STATUS,
				BREAKPOINT_STATUS,
				BREAKPOINT_TYPE,
				REMAIN_COUNT,
				ENFORE_SAVE,
				ACTUAL_REMAIN_COUNT,
				DIFFERENT_COUNT,
				MODIFY_REMAIN_COUNT,
				BREAK_TIME,
				INHOUSEID_STRING,
				EWO,
				NEW_PART_NO,
				NEW_PART_CNAME,
				NEW_PART_NICK_NAME,
				COMMENTS,
				UPDATE_USER,
				CREATE_DATE,
				CREATE_USER,
				UPDATE_DATE				  
				FROM [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] WITH(NOLOCK) WHERE 1=1  AND INHOUSE_BREAKPOINT_NO =@INHOUSE_BREAKPOINT_NO;";
			
		private const string TM_BAS_INHOUSE_BREAKPOINT_PART_SELECT = 
			@"SELECT INHOUSE_BREAKPOINT_NO,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				PART_NO,
				PART_CNAME,
				KNR,
				RUNNING_NO,
				INHOUSE_IDENTITY,
				VIN,
				IN_PLANT_SYSTEM_MODE,
				INHOUSE_SYSTEM_MODE,
				MODEL,
				MODEL_NO,
				STATUS,
				BREAKPOINT_STATUS,
				BREAKPOINT_TYPE,
				REMAIN_COUNT,
				ENFORE_SAVE,
				ACTUAL_REMAIN_COUNT,
				DIFFERENT_COUNT,
				MODIFY_REMAIN_COUNT,
				BREAK_TIME,
				INHOUSEID_STRING,
				EWO,
				NEW_PART_NO,
				NEW_PART_CNAME,
				NEW_PART_NICK_NAME,
				COMMENTS,
				UPDATE_USER,
				CREATE_DATE,
				CREATE_USER,
				UPDATE_DATE				 
				FROM [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] WITH (NOLOCK) WHERE 1=1 {0};";
		
		private const string TM_BAS_INHOUSE_BREAKPOINT_PART_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART]  WITH(NOLOCK) WHERE 1=1 {0};";

		private const string TM_BAS_INHOUSE_BREAKPOINT_PART_INSERT =
			@"INSERT INTO [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] (
				INHOUSE_BREAKPOINT_NO,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				PART_NO,
				PART_CNAME,
				KNR,
				RUNNING_NO,
				INHOUSE_IDENTITY,
				VIN,
				IN_PLANT_SYSTEM_MODE,
				INHOUSE_SYSTEM_MODE,
				MODEL,
				MODEL_NO,
				STATUS,
				BREAKPOINT_STATUS,
				BREAKPOINT_TYPE,
				REMAIN_COUNT,
				ENFORE_SAVE,
				ACTUAL_REMAIN_COUNT,
				DIFFERENT_COUNT,
				MODIFY_REMAIN_COUNT,
				BREAK_TIME,
				INHOUSEID_STRING,
				EWO,
				NEW_PART_NO,
				NEW_PART_CNAME,
				NEW_PART_NICK_NAME,
				COMMENTS,
				UPDATE_USER,
				CREATE_DATE,
				CREATE_USER,
				UPDATE_DATE				 
			) VALUES (
				@INHOUSE_BREAKPOINT_NO,
				@PLANT,
				@ASSEMBLY_LINE,
				@PLANT_ZONE,
				@WORKSHOP,
				@PART_NO,
				@PART_CNAME,
				@KNR,
				@RUNNING_NO,
				@INHOUSE_IDENTITY,
				@VIN,
				@IN_PLANT_SYSTEM_MODE,
				@INHOUSE_SYSTEM_MODE,
				@MODEL,
				@MODEL_NO,
				@STATUS,
				@BREAKPOINT_STATUS,
				@BREAKPOINT_TYPE,
				@REMAIN_COUNT,
				@ENFORE_SAVE,
				@ACTUAL_REMAIN_COUNT,
				@DIFFERENT_COUNT,
				@MODIFY_REMAIN_COUNT,
				@BREAK_TIME,
				@INHOUSEID_STRING,
				@EWO,
				@NEW_PART_NO,
				@NEW_PART_CNAME,
				@NEW_PART_NICK_NAME,
				@COMMENTS,
				@UPDATE_USER,
				GETDATE(),
				@CREATE_USER,
				@UPDATE_DATE				 
			);";
		private const string TM_BAS_INHOUSE_BREAKPOINT_PART_UPDATE =
			@"UPDATE [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] WITH(ROWLOCK) 
				SET INHOUSE_BREAKPOINT_NO=@INHOUSE_BREAKPOINT_NO,
				PLANT=@PLANT,
				ASSEMBLY_LINE=@ASSEMBLY_LINE,
				PLANT_ZONE=@PLANT_ZONE,
				WORKSHOP=@WORKSHOP,
				PART_NO=@PART_NO,
				PART_CNAME=@PART_CNAME,
				KNR=@KNR,
				RUNNING_NO=@RUNNING_NO,
				INHOUSE_IDENTITY=@INHOUSE_IDENTITY,
				VIN=@VIN,
				IN_PLANT_SYSTEM_MODE=@IN_PLANT_SYSTEM_MODE,
				INHOUSE_SYSTEM_MODE=@INHOUSE_SYSTEM_MODE,
				MODEL=@MODEL,
				MODEL_NO=@MODEL_NO,
				STATUS=@STATUS,
				BREAKPOINT_STATUS=@BREAKPOINT_STATUS,
				BREAKPOINT_TYPE=@BREAKPOINT_TYPE,
				REMAIN_COUNT=@REMAIN_COUNT,
				ENFORE_SAVE=@ENFORE_SAVE,
				ACTUAL_REMAIN_COUNT=@ACTUAL_REMAIN_COUNT,
				DIFFERENT_COUNT=@DIFFERENT_COUNT,
				MODIFY_REMAIN_COUNT=@MODIFY_REMAIN_COUNT,
				BREAK_TIME=@BREAK_TIME,
				INHOUSEID_STRING=@INHOUSEID_STRING,
				EWO=@EWO,
				NEW_PART_NO=@NEW_PART_NO,
				NEW_PART_CNAME=@NEW_PART_CNAME,
				NEW_PART_NICK_NAME=@NEW_PART_NICK_NAME,
				COMMENTS=@COMMENTS,
				UPDATE_USER=@UPDATE_USER,
				CREATE_DATE=@CREATE_DATE,
				CREATE_USER=@CREATE_USER,
				UPDATE_DATE=@UPDATE_DATE				 
				WHERE 1=1  AND INHOUSE_BREAKPOINT_NO =@INHOUSE_BREAKPOINT_NO;";

		private const string TM_BAS_INHOUSE_BREAKPOINT_PART_DELETE =
			@"DELETE FROM [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] WITH(ROWLOCK)  
				WHERE 1=1  AND INHOUSE_BREAKPOINT_NO =@INHOUSE_BREAKPOINT_NO;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get InhouseBreakpointPartInfo
		/// </summary>
		/// <param name="INHOUSE_BREAKPOINT_NO">InhouseBreakpointPartInfo Primary key </param>
		/// <returns></returns> 
		public InhouseBreakpointPartInfo GetInfo(string aInhouseBreakpointNo)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_INHOUSE_BREAKPOINT_PART_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@INHOUSE_BREAKPOINT_NO", DbType.String, aInhouseBreakpointNo);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateInhouseBreakpointPartInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>InhouseBreakpointPartInfo Collection </returns>
		public List<InhouseBreakpointPartInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_BAS_INHOUSE_BREAKPOINT_PART_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>InhouseBreakpointPartInfo Collection </returns>
		public List<InhouseBreakpointPartInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<InhouseBreakpointPartInfo> list = new List<InhouseBreakpointPartInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateInhouseBreakpointPartInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<InhouseBreakpointPartInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where 1=1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and 1=1";
            }
			else
                whereText += " where 1=1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[INHOUSE_BREAKPOINT_NO] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<InhouseBreakpointPartInfo> list = new List<InhouseBreakpointPartInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateInhouseBreakpointPartInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_BAS_INHOUSE_BREAKPOINT_PART_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public bool Add(InhouseBreakpointPartInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_INHOUSE_BREAKPOINT_PART_INSERT);			
			db.AddInParameter(dbCommand, "@INHOUSE_BREAKPOINT_NO", DbType.String, info.InhouseBreakpointNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@RUNNING_NO", DbType.String, info.RunningNo);
			db.AddInParameter(dbCommand, "@INHOUSE_IDENTITY", DbType.Int32, info.InhouseIdentity);
			db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
			db.AddInParameter(dbCommand, "@IN_PLANT_SYSTEM_MODE", DbType.String, info.InPlantSystemMode);
			db.AddInParameter(dbCommand, "@INHOUSE_SYSTEM_MODE", DbType.String, info.InhouseSystemMode);
			db.AddInParameter(dbCommand, "@MODEL", DbType.String, info.Model);
			db.AddInParameter(dbCommand, "@MODEL_NO", DbType.String, info.ModelNo);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@BREAKPOINT_STATUS", DbType.Int32, info.BreakpointStatus);
			db.AddInParameter(dbCommand, "@BREAKPOINT_TYPE", DbType.Int32, info.BreakpointType);
			db.AddInParameter(dbCommand, "@REMAIN_COUNT", DbType.Int32, info.RemainCount);
			db.AddInParameter(dbCommand, "@ENFORE_SAVE", DbType.Int32, info.EnforeSave);
			db.AddInParameter(dbCommand, "@ACTUAL_REMAIN_COUNT", DbType.Int32, info.ActualRemainCount);
			db.AddInParameter(dbCommand, "@DIFFERENT_COUNT", DbType.Int32, info.DifferentCount);
			db.AddInParameter(dbCommand, "@MODIFY_REMAIN_COUNT", DbType.Int32, info.ModifyRemainCount);
			db.AddInParameter(dbCommand, "@BREAK_TIME", DbType.DateTime, info.BreakTime);
			db.AddInParameter(dbCommand, "@INHOUSEID_STRING", DbType.String, info.InhouseidString);
			db.AddInParameter(dbCommand, "@EWO", DbType.String, info.Ewo);
			db.AddInParameter(dbCommand, "@NEW_PART_NO", DbType.String, info.NewPartNo);
			db.AddInParameter(dbCommand, "@NEW_PART_CNAME", DbType.String, info.NewPartCname);
			db.AddInParameter(dbCommand, "@NEW_PART_NICK_NAME", DbType.String, info.NewPartNickName);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			return db.ExecuteNonQuery(dbCommand) > 0 ? true : false;		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(InhouseBreakpointPartInfo info)
		{
			return  
			@"insert into [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] (
				INHOUSE_BREAKPOINT_NO,
				PLANT,
				ASSEMBLY_LINE,
				PLANT_ZONE,
				WORKSHOP,
				PART_NO,
				PART_CNAME,
				KNR,
				RUNNING_NO,
				INHOUSE_IDENTITY,
				VIN,
				IN_PLANT_SYSTEM_MODE,
				INHOUSE_SYSTEM_MODE,
				MODEL,
				MODEL_NO,
				STATUS,
				BREAKPOINT_STATUS,
				BREAKPOINT_TYPE,
				REMAIN_COUNT,
				ENFORE_SAVE,
				ACTUAL_REMAIN_COUNT,
				DIFFERENT_COUNT,
				MODIFY_REMAIN_COUNT,
				BREAK_TIME,
				INHOUSEID_STRING,
				EWO,
				NEW_PART_NO,
				NEW_PART_CNAME,
				NEW_PART_NICK_NAME,
				COMMENTS,
				UPDATE_USER,
				CREATE_DATE,
				CREATE_USER,
				UPDATE_DATE				 
			) values ("+
				(string.IsNullOrEmpty(info.InhouseBreakpointNo) ? "NULL" : "N'" + info.InhouseBreakpointNo + "'") + ","+
				(string.IsNullOrEmpty(info.Plant) ? "NULL" : "N'" + info.Plant + "'") + ","+
				(string.IsNullOrEmpty(info.AssemblyLine) ? "NULL" : "N'" + info.AssemblyLine + "'") + ","+
				(string.IsNullOrEmpty(info.PlantZone) ? "NULL" : "N'" + info.PlantZone + "'") + ","+
				(string.IsNullOrEmpty(info.Workshop) ? "NULL" : "N'" + info.Workshop + "'") + ","+
				(string.IsNullOrEmpty(info.PartNo) ? "NULL" : "N'" + info.PartNo + "'") + ","+
				(string.IsNullOrEmpty(info.PartCname) ? "NULL" : "N'" + info.PartCname + "'") + ","+
				(string.IsNullOrEmpty(info.Knr) ? "NULL" : "N'" + info.Knr + "'") + ","+
				(string.IsNullOrEmpty(info.RunningNo) ? "NULL" : "N'" + info.RunningNo + "'") + ","+
				(info.InhouseIdentity == null ? "NULL" : "" + info.InhouseIdentity.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.Vin) ? "NULL" : "N'" + info.Vin + "'") + ","+
				(string.IsNullOrEmpty(info.InPlantSystemMode) ? "NULL" : "N'" + info.InPlantSystemMode + "'") + ","+
				(string.IsNullOrEmpty(info.InhouseSystemMode) ? "NULL" : "N'" + info.InhouseSystemMode + "'") + ","+
				(string.IsNullOrEmpty(info.Model) ? "NULL" : "N'" + info.Model + "'") + ","+
				(string.IsNullOrEmpty(info.ModelNo) ? "NULL" : "N'" + info.ModelNo + "'") + ","+
				(info.Status == null ? "NULL" : "" + info.Status.GetValueOrDefault() + "") + ","+
				(info.BreakpointStatus == null ? "NULL" : "" + info.BreakpointStatus.GetValueOrDefault() + "") + ","+
				(info.BreakpointType == null ? "NULL" : "" + info.BreakpointType.GetValueOrDefault() + "") + ","+
				(info.RemainCount == null ? "NULL" : "" + info.RemainCount.GetValueOrDefault() + "") + ","+
				(info.EnforeSave == null ? "NULL" : "" + info.EnforeSave.GetValueOrDefault() + "") + ","+
				(info.ActualRemainCount == null ? "NULL" : "" + info.ActualRemainCount.GetValueOrDefault() + "") + ","+
				(info.DifferentCount == null ? "NULL" : "" + info.DifferentCount.GetValueOrDefault() + "") + ","+
				(info.ModifyRemainCount == null ? "NULL" : "" + info.ModifyRemainCount.GetValueOrDefault() + "") + ","+
				(info.BreakTime == null ? "NULL" : "N'" + info.BreakTime.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.InhouseidString) ? "NULL" : "N'" + info.InhouseidString + "'") + ","+
				(string.IsNullOrEmpty(info.Ewo) ? "NULL" : "N'" + info.Ewo + "'") + ","+
				(string.IsNullOrEmpty(info.NewPartNo) ? "NULL" : "N'" + info.NewPartNo + "'") + ","+
				(string.IsNullOrEmpty(info.NewPartCname) ? "NULL" : "N'" + info.NewPartCname + "'") + ","+
				(string.IsNullOrEmpty(info.NewPartNickName) ? "NULL" : "N'" + info.NewPartNickName + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				(string.IsNullOrEmpty(info.UpdateUser) ? "NULL" : "N'" + info.UpdateUser + "'") + ","+
				"GETDATE()" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				(info.UpdateDate == null ? "NULL" : "N'" + info.UpdateDate.GetValueOrDefault() + "'") + ");";				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(InhouseBreakpointPartInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_INHOUSE_BREAKPOINT_PART_UPDATE);				
			db.AddInParameter(dbCommand, "@INHOUSE_BREAKPOINT_NO", DbType.String, info.InhouseBreakpointNo);
			db.AddInParameter(dbCommand, "@PLANT", DbType.String, info.Plant);
			db.AddInParameter(dbCommand, "@ASSEMBLY_LINE", DbType.String, info.AssemblyLine);
			db.AddInParameter(dbCommand, "@PLANT_ZONE", DbType.String, info.PlantZone);
			db.AddInParameter(dbCommand, "@WORKSHOP", DbType.String, info.Workshop);
			db.AddInParameter(dbCommand, "@PART_NO", DbType.String, info.PartNo);
			db.AddInParameter(dbCommand, "@PART_CNAME", DbType.String, info.PartCname);
			db.AddInParameter(dbCommand, "@KNR", DbType.String, info.Knr);
			db.AddInParameter(dbCommand, "@RUNNING_NO", DbType.String, info.RunningNo);
			db.AddInParameter(dbCommand, "@INHOUSE_IDENTITY", DbType.Int32, info.InhouseIdentity);
			db.AddInParameter(dbCommand, "@VIN", DbType.String, info.Vin);
			db.AddInParameter(dbCommand, "@IN_PLANT_SYSTEM_MODE", DbType.String, info.InPlantSystemMode);
			db.AddInParameter(dbCommand, "@INHOUSE_SYSTEM_MODE", DbType.String, info.InhouseSystemMode);
			db.AddInParameter(dbCommand, "@MODEL", DbType.String, info.Model);
			db.AddInParameter(dbCommand, "@MODEL_NO", DbType.String, info.ModelNo);
			db.AddInParameter(dbCommand, "@STATUS", DbType.Int32, info.Status);
			db.AddInParameter(dbCommand, "@BREAKPOINT_STATUS", DbType.Int32, info.BreakpointStatus);
			db.AddInParameter(dbCommand, "@BREAKPOINT_TYPE", DbType.Int32, info.BreakpointType);
			db.AddInParameter(dbCommand, "@REMAIN_COUNT", DbType.Int32, info.RemainCount);
			db.AddInParameter(dbCommand, "@ENFORE_SAVE", DbType.Int32, info.EnforeSave);
			db.AddInParameter(dbCommand, "@ACTUAL_REMAIN_COUNT", DbType.Int32, info.ActualRemainCount);
			db.AddInParameter(dbCommand, "@DIFFERENT_COUNT", DbType.Int32, info.DifferentCount);
			db.AddInParameter(dbCommand, "@MODIFY_REMAIN_COUNT", DbType.Int32, info.ModifyRemainCount);
			db.AddInParameter(dbCommand, "@BREAK_TIME", DbType.DateTime, info.BreakTime);
			db.AddInParameter(dbCommand, "@INHOUSEID_STRING", DbType.String, info.InhouseidString);
			db.AddInParameter(dbCommand, "@EWO", DbType.String, info.Ewo);
			db.AddInParameter(dbCommand, "@NEW_PART_NO", DbType.String, info.NewPartNo);
			db.AddInParameter(dbCommand, "@NEW_PART_CNAME", DbType.String, info.NewPartCname);
			db.AddInParameter(dbCommand, "@NEW_PART_NICK_NAME", DbType.String, info.NewPartNickName);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@UPDATE_USER", DbType.String, info.UpdateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@UPDATE_DATE", DbType.DateTime, info.UpdateDate);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="INHOUSE_BREAKPOINT_NO">InhouseBreakpointPartInfo Primary key </param>
		/// <returns></returns>
		public int Delete(string aInhouseBreakpointNo)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_INHOUSE_BREAKPOINT_PART_DELETE);
		    db.AddInParameter(dbCommand, "@INHOUSE_BREAKPOINT_NO", DbType.String, aInhouseBreakpointNo);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="INHOUSE_BREAKPOINT_NO">InhouseBreakpointPartInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,string aInhouseBreakpointNo)
		{
		    string sql = "update [LES].[TM_BAS_INHOUSE_BREAKPOINT_PART] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE 1=1  AND INHOUSE_BREAKPOINT_NO =@INHOUSE_BREAKPOINT_NO;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@INHOUSE_BREAKPOINT_NO", DbType.String, aInhouseBreakpointNo);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static InhouseBreakpointPartInfo CreateInhouseBreakpointPartInfo(IDataReader rdr)
		{
			InhouseBreakpointPartInfo info = new InhouseBreakpointPartInfo();
			info.InhouseBreakpointNo = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_BREAKPOINT_NO"));			
			info.Plant = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT"));			
			info.AssemblyLine = DBConvert.GetString(rdr, rdr.GetOrdinal("ASSEMBLY_LINE"));			
			info.PlantZone = DBConvert.GetString(rdr, rdr.GetOrdinal("PLANT_ZONE"));			
			info.Workshop = DBConvert.GetString(rdr, rdr.GetOrdinal("WORKSHOP"));			
			info.PartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_NO"));			
			info.PartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("PART_CNAME"));			
			info.Knr = DBConvert.GetString(rdr, rdr.GetOrdinal("KNR"));			
			info.RunningNo = DBConvert.GetString(rdr, rdr.GetOrdinal("RUNNING_NO"));			
			info.InhouseIdentity = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("INHOUSE_IDENTITY"));			
			info.Vin = DBConvert.GetString(rdr, rdr.GetOrdinal("VIN"));			
			info.InPlantSystemMode = DBConvert.GetString(rdr, rdr.GetOrdinal("IN_PLANT_SYSTEM_MODE"));			
			info.InhouseSystemMode = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSE_SYSTEM_MODE"));			
			info.Model = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL"));			
			info.ModelNo = DBConvert.GetString(rdr, rdr.GetOrdinal("MODEL_NO"));			
			info.Status = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("STATUS"));			
			info.BreakpointStatus = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BREAKPOINT_STATUS"));			
			info.BreakpointType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("BREAKPOINT_TYPE"));			
			info.RemainCount = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("REMAIN_COUNT"));			
			info.EnforeSave = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ENFORE_SAVE"));			
			info.ActualRemainCount = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("ACTUAL_REMAIN_COUNT"));			
			info.DifferentCount = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("DIFFERENT_COUNT"));			
			info.ModifyRemainCount = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("MODIFY_REMAIN_COUNT"));			
			info.BreakTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("BREAK_TIME"));			
			info.InhouseidString = DBConvert.GetString(rdr, rdr.GetOrdinal("INHOUSEID_STRING"));			
			info.Ewo = DBConvert.GetString(rdr, rdr.GetOrdinal("EWO"));			
			info.NewPartNo = DBConvert.GetString(rdr, rdr.GetOrdinal("NEW_PART_NO"));			
			info.NewPartCname = DBConvert.GetString(rdr, rdr.GetOrdinal("NEW_PART_CNAME"));			
			info.NewPartNickName = DBConvert.GetString(rdr, rdr.GetOrdinal("NEW_PART_NICK_NAME"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.UpdateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("UPDATE_USER"));			
			info.CreateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.UpdateDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("UPDATE_DATE"));			
			return info;
		}
		
		#endregion
	}
}
