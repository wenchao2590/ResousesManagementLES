#region Declaim
//---------------------------------------------------------------------------
// Name:		SupplierDAL
// Function: 	Expose data in table TM_BAS_SUPPLIER from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// SupplierDAL对应表[TM_BAS_SUPPLIER]
    /// </summary>
    public partial class SupplierDAL : BusinessObjectProvider<SupplierInfo>
	{
		#region Sql Statements
		private const string TM_BAS_SUPPLIER_SELECT_BY_ID =
			@"SELECT FID,
				SUPPLIER_NUM,
				DUNS,
				SUPPLIER_NAME,
				SUPPLIER_SNAME,
				SUPPLIER_ADDRESS,
				SUPPLIER_TYPE,
				CONTACT_NAME,
				CONTACT_TEL,
				CONTACT_FAX,
				CONTACT_MOBILE,
				CONTACT_EMAIL,
				NIGHTCONTACT_NAME,
				NIGHTCONTACT_TEL,
				NIGHTCONTACT_FAX,
				NIGHTCONTACT_MOBILE,
				NIGHTCONTACT_EMAIL,
				DAYCONTACT_NAME,
				DAYCONTACT_TEL,
				DAYCONTACT_FAX,
				DAYCONTACT_MOBILE,
				DAYCONTACT_EMAIL,
				PROVINCE,
				CITY,
				SUPPLIER_GROUP,
				COMMENTS,
				ASN_FLAG,
				BATCH_FLAG,
				CREATE_DATE,
				VALID_FLAG,
				ID,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				ASN_VMI_FLAG				  
				FROM [LES].[TM_BAS_SUPPLIER] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TM_BAS_SUPPLIER_SELECT = 
			@"SELECT FID,
				SUPPLIER_NUM,
				DUNS,
				SUPPLIER_NAME,
				SUPPLIER_SNAME,
				SUPPLIER_ADDRESS,
				SUPPLIER_TYPE,
				CONTACT_NAME,
				CONTACT_TEL,
				CONTACT_FAX,
				CONTACT_MOBILE,
				CONTACT_EMAIL,
				NIGHTCONTACT_NAME,
				NIGHTCONTACT_TEL,
				NIGHTCONTACT_FAX,
				NIGHTCONTACT_MOBILE,
				NIGHTCONTACT_EMAIL,
				DAYCONTACT_NAME,
				DAYCONTACT_TEL,
				DAYCONTACT_FAX,
				DAYCONTACT_MOBILE,
				DAYCONTACT_EMAIL,
				PROVINCE,
				CITY,
				SUPPLIER_GROUP,
				COMMENTS,
				ASN_FLAG,
				BATCH_FLAG,
				CREATE_DATE,
				VALID_FLAG,
				ID,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				ASN_VMI_FLAG				 
				FROM [LES].[TM_BAS_SUPPLIER] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TM_BAS_SUPPLIER_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TM_BAS_SUPPLIER]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TM_BAS_SUPPLIER_INSERT =
			@"INSERT INTO [LES].[TM_BAS_SUPPLIER] (
				FID,
				SUPPLIER_NUM,
				DUNS,
				SUPPLIER_NAME,
				SUPPLIER_SNAME,
				SUPPLIER_ADDRESS,
				SUPPLIER_TYPE,
				CONTACT_NAME,
				CONTACT_TEL,
				CONTACT_FAX,
				CONTACT_MOBILE,
				CONTACT_EMAIL,
				NIGHTCONTACT_NAME,
				NIGHTCONTACT_TEL,
				NIGHTCONTACT_FAX,
				NIGHTCONTACT_MOBILE,
				NIGHTCONTACT_EMAIL,
				DAYCONTACT_NAME,
				DAYCONTACT_TEL,
				DAYCONTACT_FAX,
				DAYCONTACT_MOBILE,
				DAYCONTACT_EMAIL,
				PROVINCE,
				CITY,
				SUPPLIER_GROUP,
				COMMENTS,
				ASN_FLAG,
				BATCH_FLAG,
				CREATE_DATE,
				VALID_FLAG,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				ASN_VMI_FLAG				 
			) VALUES (
				@FID,
				@SUPPLIER_NUM,
				@DUNS,
				@SUPPLIER_NAME,
				@SUPPLIER_SNAME,
				@SUPPLIER_ADDRESS,
				@SUPPLIER_TYPE,
				@CONTACT_NAME,
				@CONTACT_TEL,
				@CONTACT_FAX,
				@CONTACT_MOBILE,
				@CONTACT_EMAIL,
				@NIGHTCONTACT_NAME,
				@NIGHTCONTACT_TEL,
				@NIGHTCONTACT_FAX,
				@NIGHTCONTACT_MOBILE,
				@NIGHTCONTACT_EMAIL,
				@DAYCONTACT_NAME,
				@DAYCONTACT_TEL,
				@DAYCONTACT_FAX,
				@DAYCONTACT_MOBILE,
				@DAYCONTACT_EMAIL,
				@PROVINCE,
				@CITY,
				@SUPPLIER_GROUP,
				@COMMENTS,
				@ASN_FLAG,
				@BATCH_FLAG,
				GETDATE(),
				@VALID_FLAG,
				@MODIFY_USER,
				@MODIFY_DATE,
				@CREATE_USER,
				@ASN_VMI_FLAG				 
			);SELECT @@IDENTITY;";
		private const string TM_BAS_SUPPLIER_UPDATE =
			@"UPDATE [LES].[TM_BAS_SUPPLIER] WITH(ROWLOCK) 
				SET FID=@FID,
				SUPPLIER_NUM=@SUPPLIER_NUM,
				DUNS=@DUNS,
				SUPPLIER_NAME=@SUPPLIER_NAME,
				SUPPLIER_SNAME=@SUPPLIER_SNAME,
				SUPPLIER_ADDRESS=@SUPPLIER_ADDRESS,
				SUPPLIER_TYPE=@SUPPLIER_TYPE,
				CONTACT_NAME=@CONTACT_NAME,
				CONTACT_TEL=@CONTACT_TEL,
				CONTACT_FAX=@CONTACT_FAX,
				CONTACT_MOBILE=@CONTACT_MOBILE,
				CONTACT_EMAIL=@CONTACT_EMAIL,
				NIGHTCONTACT_NAME=@NIGHTCONTACT_NAME,
				NIGHTCONTACT_TEL=@NIGHTCONTACT_TEL,
				NIGHTCONTACT_FAX=@NIGHTCONTACT_FAX,
				NIGHTCONTACT_MOBILE=@NIGHTCONTACT_MOBILE,
				NIGHTCONTACT_EMAIL=@NIGHTCONTACT_EMAIL,
				DAYCONTACT_NAME=@DAYCONTACT_NAME,
				DAYCONTACT_TEL=@DAYCONTACT_TEL,
				DAYCONTACT_FAX=@DAYCONTACT_FAX,
				DAYCONTACT_MOBILE=@DAYCONTACT_MOBILE,
				DAYCONTACT_EMAIL=@DAYCONTACT_EMAIL,
				PROVINCE=@PROVINCE,
				CITY=@CITY,
				SUPPLIER_GROUP=@SUPPLIER_GROUP,
				COMMENTS=@COMMENTS,
				ASN_FLAG=@ASN_FLAG,
				BATCH_FLAG=@BATCH_FLAG,
				CREATE_DATE=@CREATE_DATE,
				VALID_FLAG=@VALID_FLAG,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE,
				CREATE_USER=@CREATE_USER,
				ASN_VMI_FLAG=@ASN_VMI_FLAG				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TM_BAS_SUPPLIER_DELETE =
			@"DELETE FROM [LES].[TM_BAS_SUPPLIER] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get SupplierInfo
		/// </summary>
		/// <param name="ID">SupplierInfo Primary key </param>
		/// <returns></returns> 
		public SupplierInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_SUPPLIER_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateSupplierInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>SupplierInfo Collection </returns>
		public List<SupplierInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TM_BAS_SUPPLIER_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>SupplierInfo Collection </returns>
		public List<SupplierInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<SupplierInfo> list = new List<SupplierInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateSupplierInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<SupplierInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TM_BAS_SUPPLIER]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<SupplierInfo> list = new List<SupplierInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateSupplierInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TM_BAS_SUPPLIER_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(SupplierInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_SUPPLIER_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.AnsiString, info.SupplierNum);
			db.AddInParameter(dbCommand, "@DUNS", DbType.AnsiString, info.Duns);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@SUPPLIER_ADDRESS", DbType.AnsiString, info.SupplierAddress);
			db.AddInParameter(dbCommand, "@SUPPLIER_TYPE", DbType.Int32, info.SupplierType);
			db.AddInParameter(dbCommand, "@CONTACT_NAME", DbType.AnsiString, info.ContactName);
			db.AddInParameter(dbCommand, "@CONTACT_TEL", DbType.AnsiString, info.ContactTel);
			db.AddInParameter(dbCommand, "@CONTACT_FAX", DbType.AnsiString, info.ContactFax);
			db.AddInParameter(dbCommand, "@CONTACT_MOBILE", DbType.AnsiString, info.ContactMobile);
			db.AddInParameter(dbCommand, "@CONTACT_EMAIL", DbType.AnsiString, info.ContactEmail);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_NAME", DbType.AnsiString, info.NightcontactName);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_TEL", DbType.AnsiString, info.NightcontactTel);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_FAX", DbType.AnsiString, info.NightcontactFax);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_MOBILE", DbType.AnsiString, info.NightcontactMobile);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_EMAIL", DbType.AnsiString, info.NightcontactEmail);
			db.AddInParameter(dbCommand, "@DAYCONTACT_NAME", DbType.AnsiString, info.DaycontactName);
			db.AddInParameter(dbCommand, "@DAYCONTACT_TEL", DbType.AnsiString, info.DaycontactTel);
			db.AddInParameter(dbCommand, "@DAYCONTACT_FAX", DbType.AnsiString, info.DaycontactFax);
			db.AddInParameter(dbCommand, "@DAYCONTACT_MOBILE", DbType.AnsiString, info.DaycontactMobile);
			db.AddInParameter(dbCommand, "@DAYCONTACT_EMAIL", DbType.AnsiString, info.DaycontactEmail);
			db.AddInParameter(dbCommand, "@PROVINCE", DbType.AnsiString, info.Province);
			db.AddInParameter(dbCommand, "@CITY", DbType.AnsiString, info.City);
			db.AddInParameter(dbCommand, "@SUPPLIER_GROUP", DbType.AnsiString, info.SupplierGroup);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@ASN_FLAG", DbType.Boolean, info.AsnFlag);
			db.AddInParameter(dbCommand, "@BATCH_FLAG", DbType.Boolean, info.BatchFlag);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@ASN_VMI_FLAG", DbType.Boolean, info.AsnVmiFlag);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}
		/// <summary>
		/// GetInsertSql
		/// </summary>
		/// <param name="info"> info</param>
		public static string GetInsertSql(SupplierInfo info)
		{
			return  
			@"insert into [LES].[TM_BAS_SUPPLIER] (
				FID,
				SUPPLIER_NUM,
				DUNS,
				SUPPLIER_NAME,
				SUPPLIER_SNAME,
				SUPPLIER_ADDRESS,
				SUPPLIER_TYPE,
				CONTACT_NAME,
				CONTACT_TEL,
				CONTACT_FAX,
				CONTACT_MOBILE,
				CONTACT_EMAIL,
				NIGHTCONTACT_NAME,
				NIGHTCONTACT_TEL,
				NIGHTCONTACT_FAX,
				NIGHTCONTACT_MOBILE,
				NIGHTCONTACT_EMAIL,
				DAYCONTACT_NAME,
				DAYCONTACT_TEL,
				DAYCONTACT_FAX,
				DAYCONTACT_MOBILE,
				DAYCONTACT_EMAIL,
				PROVINCE,
				CITY,
				SUPPLIER_GROUP,
				COMMENTS,
				ASN_FLAG,
				BATCH_FLAG,
				CREATE_DATE,
				VALID_FLAG,
				MODIFY_USER,
				MODIFY_DATE,
				CREATE_USER,
				ASN_VMI_FLAG				 
			) values ("+
				(info.Fid == null ? "NEWID()" : "N'" + info.Fid.GetValueOrDefault() + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierNum) ? "NULL" : "N'" + info.SupplierNum + "'") + ","+
				(string.IsNullOrEmpty(info.Duns) ? "NULL" : "N'" + info.Duns + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierName) ? "NULL" : "N'" + info.SupplierName + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierSname) ? "NULL" : "N'" + info.SupplierSname + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierAddress) ? "NULL" : "N'" + info.SupplierAddress + "'") + ","+
				(info.SupplierType == null ? "NULL" : "" + info.SupplierType.GetValueOrDefault() + "") + ","+
				(string.IsNullOrEmpty(info.ContactName) ? "NULL" : "N'" + info.ContactName + "'") + ","+
				(string.IsNullOrEmpty(info.ContactTel) ? "NULL" : "N'" + info.ContactTel + "'") + ","+
				(string.IsNullOrEmpty(info.ContactFax) ? "NULL" : "N'" + info.ContactFax + "'") + ","+
				(string.IsNullOrEmpty(info.ContactMobile) ? "NULL" : "N'" + info.ContactMobile + "'") + ","+
				(string.IsNullOrEmpty(info.ContactEmail) ? "NULL" : "N'" + info.ContactEmail + "'") + ","+
				(string.IsNullOrEmpty(info.NightcontactName) ? "NULL" : "N'" + info.NightcontactName + "'") + ","+
				(string.IsNullOrEmpty(info.NightcontactTel) ? "NULL" : "N'" + info.NightcontactTel + "'") + ","+
				(string.IsNullOrEmpty(info.NightcontactFax) ? "NULL" : "N'" + info.NightcontactFax + "'") + ","+
				(string.IsNullOrEmpty(info.NightcontactMobile) ? "NULL" : "N'" + info.NightcontactMobile + "'") + ","+
				(string.IsNullOrEmpty(info.NightcontactEmail) ? "NULL" : "N'" + info.NightcontactEmail + "'") + ","+
				(string.IsNullOrEmpty(info.DaycontactName) ? "NULL" : "N'" + info.DaycontactName + "'") + ","+
				(string.IsNullOrEmpty(info.DaycontactTel) ? "NULL" : "N'" + info.DaycontactTel + "'") + ","+
				(string.IsNullOrEmpty(info.DaycontactFax) ? "NULL" : "N'" + info.DaycontactFax + "'") + ","+
				(string.IsNullOrEmpty(info.DaycontactMobile) ? "NULL" : "N'" + info.DaycontactMobile + "'") + ","+
				(string.IsNullOrEmpty(info.DaycontactEmail) ? "NULL" : "N'" + info.DaycontactEmail + "'") + ","+
				(string.IsNullOrEmpty(info.Province) ? "NULL" : "N'" + info.Province + "'") + ","+
				(string.IsNullOrEmpty(info.City) ? "NULL" : "N'" + info.City + "'") + ","+
				(string.IsNullOrEmpty(info.SupplierGroup) ? "NULL" : "N'" + info.SupplierGroup + "'") + ","+
				(string.IsNullOrEmpty(info.Comments) ? "NULL" : "N'" + info.Comments + "'") + ","+
				(info.AsnFlag == null ? "NULL" : "" + (info.AsnFlag.GetValueOrDefault() ? "1" : "0") + "") + ","+
				(info.BatchFlag == null ? "NULL" : "" + (info.BatchFlag.GetValueOrDefault() ? "1" : "0") + "") + ","+
				"GETDATE()" + ","+			
				"1" + ","+		
				"NULL" + ","+			
				"NULL" + ","+			
				"N'" + info.CreateUser + "'" + ","+		
				(info.AsnVmiFlag == null ? "NULL" : "" + (info.AsnVmiFlag.GetValueOrDefault() ? "1" : "0") + "") + ");";				}
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(SupplierInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_SUPPLIER_UPDATE);				
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@SUPPLIER_NUM", DbType.AnsiString, info.SupplierNum);
			db.AddInParameter(dbCommand, "@DUNS", DbType.AnsiString, info.Duns);
			db.AddInParameter(dbCommand, "@SUPPLIER_NAME", DbType.String, info.SupplierName);
			db.AddInParameter(dbCommand, "@SUPPLIER_SNAME", DbType.String, info.SupplierSname);
			db.AddInParameter(dbCommand, "@SUPPLIER_ADDRESS", DbType.AnsiString, info.SupplierAddress);
			db.AddInParameter(dbCommand, "@SUPPLIER_TYPE", DbType.Int32, info.SupplierType);
			db.AddInParameter(dbCommand, "@CONTACT_NAME", DbType.AnsiString, info.ContactName);
			db.AddInParameter(dbCommand, "@CONTACT_TEL", DbType.AnsiString, info.ContactTel);
			db.AddInParameter(dbCommand, "@CONTACT_FAX", DbType.AnsiString, info.ContactFax);
			db.AddInParameter(dbCommand, "@CONTACT_MOBILE", DbType.AnsiString, info.ContactMobile);
			db.AddInParameter(dbCommand, "@CONTACT_EMAIL", DbType.AnsiString, info.ContactEmail);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_NAME", DbType.AnsiString, info.NightcontactName);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_TEL", DbType.AnsiString, info.NightcontactTel);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_FAX", DbType.AnsiString, info.NightcontactFax);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_MOBILE", DbType.AnsiString, info.NightcontactMobile);
			db.AddInParameter(dbCommand, "@NIGHTCONTACT_EMAIL", DbType.AnsiString, info.NightcontactEmail);
			db.AddInParameter(dbCommand, "@DAYCONTACT_NAME", DbType.AnsiString, info.DaycontactName);
			db.AddInParameter(dbCommand, "@DAYCONTACT_TEL", DbType.AnsiString, info.DaycontactTel);
			db.AddInParameter(dbCommand, "@DAYCONTACT_FAX", DbType.AnsiString, info.DaycontactFax);
			db.AddInParameter(dbCommand, "@DAYCONTACT_MOBILE", DbType.AnsiString, info.DaycontactMobile);
			db.AddInParameter(dbCommand, "@DAYCONTACT_EMAIL", DbType.AnsiString, info.DaycontactEmail);
			db.AddInParameter(dbCommand, "@PROVINCE", DbType.AnsiString, info.Province);
			db.AddInParameter(dbCommand, "@CITY", DbType.AnsiString, info.City);
			db.AddInParameter(dbCommand, "@SUPPLIER_GROUP", DbType.AnsiString, info.SupplierGroup);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			db.AddInParameter(dbCommand, "@ASN_FLAG", DbType.Boolean, info.AsnFlag);
			db.AddInParameter(dbCommand, "@BATCH_FLAG", DbType.Boolean, info.BatchFlag);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@ASN_VMI_FLAG", DbType.Boolean, info.AsnVmiFlag);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">SupplierInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TM_BAS_SUPPLIER_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">SupplierInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TM_BAS_SUPPLIER] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
                               			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
    db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">SupplierInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TM_BAS_SUPPLIER] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static SupplierInfo CreateSupplierInfo(IDataReader rdr)
		{
			SupplierInfo info = new SupplierInfo();
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.SupplierNum = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NUM"));			
			info.Duns = DBConvert.GetString(rdr, rdr.GetOrdinal("DUNS"));			
			info.SupplierName = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_NAME"));			
			info.SupplierSname = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_SNAME"));			
			info.SupplierAddress = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_ADDRESS"));			
			info.SupplierType = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("SUPPLIER_TYPE"));			
			info.ContactName = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTACT_NAME"));			
			info.ContactTel = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTACT_TEL"));			
			info.ContactFax = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTACT_FAX"));			
			info.ContactMobile = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTACT_MOBILE"));			
			info.ContactEmail = DBConvert.GetString(rdr, rdr.GetOrdinal("CONTACT_EMAIL"));			
			info.NightcontactName = DBConvert.GetString(rdr, rdr.GetOrdinal("NIGHTCONTACT_NAME"));			
			info.NightcontactTel = DBConvert.GetString(rdr, rdr.GetOrdinal("NIGHTCONTACT_TEL"));			
			info.NightcontactFax = DBConvert.GetString(rdr, rdr.GetOrdinal("NIGHTCONTACT_FAX"));			
			info.NightcontactMobile = DBConvert.GetString(rdr, rdr.GetOrdinal("NIGHTCONTACT_MOBILE"));			
			info.NightcontactEmail = DBConvert.GetString(rdr, rdr.GetOrdinal("NIGHTCONTACT_EMAIL"));			
			info.DaycontactName = DBConvert.GetString(rdr, rdr.GetOrdinal("DAYCONTACT_NAME"));			
			info.DaycontactTel = DBConvert.GetString(rdr, rdr.GetOrdinal("DAYCONTACT_TEL"));			
			info.DaycontactFax = DBConvert.GetString(rdr, rdr.GetOrdinal("DAYCONTACT_FAX"));			
			info.DaycontactMobile = DBConvert.GetString(rdr, rdr.GetOrdinal("DAYCONTACT_MOBILE"));			
			info.DaycontactEmail = DBConvert.GetString(rdr, rdr.GetOrdinal("DAYCONTACT_EMAIL"));			
			info.Province = DBConvert.GetString(rdr, rdr.GetOrdinal("PROVINCE"));			
			info.City = DBConvert.GetString(rdr, rdr.GetOrdinal("CITY"));			
			info.SupplierGroup = DBConvert.GetString(rdr, rdr.GetOrdinal("SUPPLIER_GROUP"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			info.AsnFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("ASN_FLAG"));			
			info.BatchFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("BATCH_FLAG"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ValidFlag = DBConvert.GetBool(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.AsnVmiFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("ASN_VMI_FLAG"));			
			return info;
		}
		
		#endregion
	}
}
