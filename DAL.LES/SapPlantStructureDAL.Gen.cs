#region Declaim
//---------------------------------------------------------------------------
// Name:		SapPlantStructureDAL
// Function: 	Expose data in table TI_IFM_SAP_PLANT_STRUCTURE from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月2日
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.LES;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
          
#endregion

namespace DAL.LES 
{     
	//// <summary>
    /// SapPlantStructureDAL对应表[TI_IFM_SAP_PLANT_STRUCTURE]
    /// </summary>
    public partial class SapPlantStructureDAL : BusinessObjectProvider<SapPlantStructureInfo>
	{
		#region Sql Statements
		private const string TI_IFM_SAP_PLANT_STRUCTURE_SELECT_BY_ID =
			@"SELECT ID,
				FID,
				LOG_FID,
				WERKS,
				NAME1,
				ZBM,
				ZBMMS,
				ZCJ,
				ZCJMS,
				LINE_NO,
				LINE_NOMS,
				VLSCH,
				TXT,
				ZSX,
				VALID_FLAG,
				PROCESS_FLAG,
				PROCESS_TIME,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				COMMENTS				  
				FROM [LES].[TI_IFM_SAP_PLANT_STRUCTURE] WITH(NOLOCK) WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			
		private const string TI_IFM_SAP_PLANT_STRUCTURE_SELECT = 
			@"SELECT ID,
				FID,
				LOG_FID,
				WERKS,
				NAME1,
				ZBM,
				ZBMMS,
				ZCJ,
				ZCJMS,
				LINE_NO,
				LINE_NOMS,
				VLSCH,
				TXT,
				ZSX,
				VALID_FLAG,
				PROCESS_FLAG,
				PROCESS_TIME,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				COMMENTS				 
				FROM [LES].[TI_IFM_SAP_PLANT_STRUCTURE] WITH (NOLOCK) WHERE [VALID_FLAG] = 1 {0};";
		
		private const string TI_IFM_SAP_PLANT_STRUCTURE_SELECT_COUNTS = 
			@"SELECT count(*) FROM [LES].[TI_IFM_SAP_PLANT_STRUCTURE]  WITH(NOLOCK) WHERE [VALID_FLAG] = 1 {0};";

		private const string TI_IFM_SAP_PLANT_STRUCTURE_INSERT =
			@"INSERT INTO [LES].[TI_IFM_SAP_PLANT_STRUCTURE] (
				FID,
				LOG_FID,
				WERKS,
				NAME1,
				ZBM,
				ZBMMS,
				ZCJ,
				ZCJMS,
				LINE_NO,
				LINE_NOMS,
				VLSCH,
				TXT,
				ZSX,
				VALID_FLAG,
				PROCESS_FLAG,
				PROCESS_TIME,
				CREATE_USER,
				CREATE_DATE,
				MODIFY_USER,
				MODIFY_DATE,
				COMMENTS				 
			) VALUES (
				@FID,
				@LOG_FID,
				@WERKS,
				@NAME1,
				@ZBM,
				@ZBMMS,
				@ZCJ,
				@ZCJMS,
				@LINE_NO,
				@LINE_NOMS,
				@VLSCH,
				@TXT,
				@ZSX,
				@VALID_FLAG,
				@PROCESS_FLAG,
				@PROCESS_TIME,
				@CREATE_USER,
				GETDATE(),
				@MODIFY_USER,
				@MODIFY_DATE,
				@COMMENTS				 
			);SELECT @@IDENTITY;";
		private const string TI_IFM_SAP_PLANT_STRUCTURE_UPDATE =
			@"UPDATE [LES].[TI_IFM_SAP_PLANT_STRUCTURE] WITH(ROWLOCK) 
				SET FID=@FID,
				LOG_FID=@LOG_FID,
				WERKS=@WERKS,
				NAME1=@NAME1,
				ZBM=@ZBM,
				ZBMMS=@ZBMMS,
				ZCJ=@ZCJ,
				ZCJMS=@ZCJMS,
				LINE_NO=@LINE_NO,
				LINE_NOMS=@LINE_NOMS,
				VLSCH=@VLSCH,
				TXT=@TXT,
				ZSX=@ZSX,
				VALID_FLAG=@VALID_FLAG,
				PROCESS_FLAG=@PROCESS_FLAG,
				PROCESS_TIME=@PROCESS_TIME,
				CREATE_USER=@CREATE_USER,
				CREATE_DATE=@CREATE_DATE,
				MODIFY_USER=@MODIFY_USER,
				MODIFY_DATE=@MODIFY_DATE,
				COMMENTS=@COMMENTS				 
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";

		private const string TI_IFM_SAP_PLANT_STRUCTURE_DELETE =
			@"DELETE FROM [LES].[TI_IFM_SAP_PLANT_STRUCTURE] WITH(ROWLOCK)  
				WHERE [VALID_FLAG] = 1  AND ID =@ID;";
		#endregion
		 
		#region Access Methods
		 
		/// <summary>
		/// Get SapPlantStructureInfo
		/// </summary>
		/// <param name="ID">SapPlantStructureInfo Primary key </param>
		/// <returns></returns> 
		public SapPlantStructureInfo GetInfo(long aId)
		{	
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PLANT_STRUCTURE_SELECT_BY_ID);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				if (dr.Read())
					return CreateSapPlantStructureInfo(dr);
			}
			return null;
		}
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="textWhere">Conditon</param>
		/// <param name="orderText">Sort</param>
		/// <returns>SapPlantStructureInfo Collection </returns>
		public List<SapPlantStructureInfo> GetList(string textWhere,string orderText)
		{
			string query = string.Empty;
			if (string.IsNullOrEmpty(textWhere))
				query = string.Empty;
			else
			{				
				if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					query = textWhere;
				else
					query = " and " + textWhere;				
			}
			if (!string.IsNullOrEmpty(orderText))
				query += " order by " + orderText;
			
			return GetList(string.Format(TI_IFM_SAP_PLANT_STRUCTURE_SELECT, query));
		}		
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns>SapPlantStructureInfo Collection </returns>
		public List<SapPlantStructureInfo> GetList(string sql)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			List<SapPlantStructureInfo> list = new List<SapPlantStructureInfo>();
			using (IDataReader dr = db.ExecuteReader(dbCommand))
			{
				while (dr.Read())
				{
					list.Add(CreateSapPlantStructureInfo(dr));
				}
			}
			return list;
		}		
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>
        /// <param name="startRowIndex">当前页第一行行号</param>                    
        /// <param name="maximumRows">每页记录数</param>        
        /// <returns></returns>
		public List<SapPlantStructureInfo> GetListByPage(string textWhere, string textOrder, int pageIndex, int pageRow)
		{
		    if (pageIndex <= 0) pageIndex = 1;
            if (pageRow <= 0) pageRow = 10;
			string whereText = string.Empty;
            if (!string.IsNullOrEmpty(textWhere))
            {
                if (textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
                    whereText += " where [VALID_FLAG] = 1 " + textWhere;
                else
                    whereText += " where " + textWhere + " and [VALID_FLAG] = 1";
            }
			else
                whereText += " where [VALID_FLAG] = 1 ";
            if (string.IsNullOrEmpty(textOrder))
                textOrder += "[ID] desc";
            string sql = "select top " + pageRow + " * from "
                + "(select row_number() over(order by " + textOrder + ") as rownumber"
                + ",* from [LES].[TI_IFM_SAP_PLANT_STRUCTURE]  WITH(NOLOCK) " + whereText + ") T "
                + "where rownumber > " + (pageIndex - 1) * pageRow + " ";
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetSqlStringCommand(sql);
            List<SapPlantStructureInfo> list = new List<SapPlantStructureInfo>();
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                while (dr.Read())
                {
                    list.Add(CreateSapPlantStructureInfo(dr));
                }
            }
            return list;
		}
		/// <summary>
        /// 分页查询
        /// </summary>        
        /// <param name="textWhere">查询条件</param>
        /// <param name="orderText">排序字段</param>            
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {			
			if (string.IsNullOrEmpty(textWhere))
				textWhere = string.Empty;
			else
			{				
				if (!textWhere.Trim().StartsWith("and", StringComparison.OrdinalIgnoreCase))
					textWhere = " and " + textWhere;						
			}
			Database db = DatabaseFactory.CreateDatabase();
            DbCommand cmd = db.GetSqlStringCommand(string.Format(TI_IFM_SAP_PLANT_STRUCTURE_SELECT_COUNTS, textWhere));
			return Convert.ToInt32(db.ExecuteScalar(cmd));            
        }
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public long Add(SapPlantStructureInfo info)
		{ 
			Database db = DatabaseFactory.CreateDatabase();	
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PLANT_STRUCTURE_INSERT);			
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@LOG_FID", DbType.Guid, info.LogFid);
			db.AddInParameter(dbCommand, "@WERKS", DbType.String, info.Werks);
			db.AddInParameter(dbCommand, "@NAME1", DbType.String, info.Name1);
			db.AddInParameter(dbCommand, "@ZBM", DbType.String, info.Zbm);
			db.AddInParameter(dbCommand, "@ZBMMS", DbType.String, info.Zbmms);
			db.AddInParameter(dbCommand, "@ZCJ", DbType.String, info.Zcj);
			db.AddInParameter(dbCommand, "@ZCJMS", DbType.String, info.Zcjms);
			db.AddInParameter(dbCommand, "@LINE_NO", DbType.String, info.LineNo);
			db.AddInParameter(dbCommand, "@LINE_NOMS", DbType.String, info.LineNoms);
			db.AddInParameter(dbCommand, "@VLSCH", DbType.String, info.Vlsch);
			db.AddInParameter(dbCommand, "@TXT", DbType.String, info.Txt);
			db.AddInParameter(dbCommand, "@ZSX", DbType.String, info.Zsx);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@PROCESS_FLAG", DbType.Int32, info.ProcessFlag);
			db.AddInParameter(dbCommand, "@PROCESS_TIME", DbType.DateTime, info.ProcessTime);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			return long.Parse("0" + db.ExecuteScalar(dbCommand));		
		}		
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(SapPlantStructureInfo info)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PLANT_STRUCTURE_UPDATE);				
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, info.Id);
			db.AddInParameter(dbCommand, "@FID", DbType.Guid, info.Fid);
			db.AddInParameter(dbCommand, "@LOG_FID", DbType.Guid, info.LogFid);
			db.AddInParameter(dbCommand, "@WERKS", DbType.String, info.Werks);
			db.AddInParameter(dbCommand, "@NAME1", DbType.String, info.Name1);
			db.AddInParameter(dbCommand, "@ZBM", DbType.String, info.Zbm);
			db.AddInParameter(dbCommand, "@ZBMMS", DbType.String, info.Zbmms);
			db.AddInParameter(dbCommand, "@ZCJ", DbType.String, info.Zcj);
			db.AddInParameter(dbCommand, "@ZCJMS", DbType.String, info.Zcjms);
			db.AddInParameter(dbCommand, "@LINE_NO", DbType.String, info.LineNo);
			db.AddInParameter(dbCommand, "@LINE_NOMS", DbType.String, info.LineNoms);
			db.AddInParameter(dbCommand, "@VLSCH", DbType.String, info.Vlsch);
			db.AddInParameter(dbCommand, "@TXT", DbType.String, info.Txt);
			db.AddInParameter(dbCommand, "@ZSX", DbType.String, info.Zsx);
			db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, info.ValidFlag);
			db.AddInParameter(dbCommand, "@PROCESS_FLAG", DbType.Int32, info.ProcessFlag);
			db.AddInParameter(dbCommand, "@PROCESS_TIME", DbType.DateTime, info.ProcessTime);
			db.AddInParameter(dbCommand, "@CREATE_USER", DbType.String, info.CreateUser);
			db.AddInParameter(dbCommand, "@CREATE_DATE", DbType.DateTime, info.CreateDate);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.String, info.ModifyUser);
			db.AddInParameter(dbCommand, "@MODIFY_DATE", DbType.DateTime, info.ModifyDate);
			db.AddInParameter(dbCommand, "@COMMENTS", DbType.String, info.Comments);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		/// <summary>
		/// Delete
		/// </summary>
		/// <param name="ID">SapPlantStructureInfo Primary key </param>
		/// <returns></returns>
		public int Delete(long aId)
		{
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(TI_IFM_SAP_PLANT_STRUCTURE_DELETE);
		    db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="ID">SapPlantStructureInfo Primary key </param>
		/// <returns></returns>
		public int LogicDelete(long aId, string loginUser)
		{
		    string sql = "update [LES].[TI_IFM_SAP_PLANT_STRUCTURE] WITH(ROWLOCK) "
                + "set [VALID_FLAG] = @VALID_FLAG ,[MODIFY_USER] = @MODIFY_USER ,[MODIFY_DATE] = GETDATE() "
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
 			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
                     db.AddInParameter(dbCommand, "@VALID_FLAG", DbType.Boolean, false);
			db.AddInParameter(dbCommand, "@MODIFY_USER", DbType.AnsiString, loginUser);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}
		/// <summary>
		/// UpdateInfo
		/// </summary>
		/// <param name="ID">SapPlantStructureInfo Primary key </param>
		/// <returns></returns>
		public int UpdateInfo(string fields ,long aId)
		{
		    string sql = "update [LES].[TI_IFM_SAP_PLANT_STRUCTURE] WITH(ROWLOCK) "
                + "set " + fields
                + "WHERE [VALID_FLAG] = 1  AND ID =@ID;";
			Database db = DatabaseFactory.CreateDatabase();
			DbCommand dbCommand = db.GetSqlStringCommand(sql);
			db.AddInParameter(dbCommand, "@ID", DbType.Int64, aId);
			return int.Parse("0" + db.ExecuteNonQuery(dbCommand));
		}		
		#endregion
		  
		#region Helpers   
	  
		private static SapPlantStructureInfo CreateSapPlantStructureInfo(IDataReader rdr)
		{
			SapPlantStructureInfo info = new SapPlantStructureInfo();
			info.Id = DBConvert.GetInt64(rdr, rdr.GetOrdinal("ID"));			
			info.Fid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("FID"));			
			info.LogFid = DBConvert.GetGuidNullable(rdr, rdr.GetOrdinal("LOG_FID"));			
			info.Werks = DBConvert.GetString(rdr, rdr.GetOrdinal("WERKS"));			
			info.Name1 = DBConvert.GetString(rdr, rdr.GetOrdinal("NAME1"));			
			info.Zbm = DBConvert.GetString(rdr, rdr.GetOrdinal("ZBM"));			
			info.Zbmms = DBConvert.GetString(rdr, rdr.GetOrdinal("ZBMMS"));			
			info.Zcj = DBConvert.GetString(rdr, rdr.GetOrdinal("ZCJ"));			
			info.Zcjms = DBConvert.GetString(rdr, rdr.GetOrdinal("ZCJMS"));			
			info.LineNo = DBConvert.GetString(rdr, rdr.GetOrdinal("LINE_NO"));			
			info.LineNoms = DBConvert.GetString(rdr, rdr.GetOrdinal("LINE_NOMS"));			
			info.Vlsch = DBConvert.GetString(rdr, rdr.GetOrdinal("VLSCH"));			
			info.Txt = DBConvert.GetString(rdr, rdr.GetOrdinal("TXT"));			
			info.Zsx = DBConvert.GetString(rdr, rdr.GetOrdinal("ZSX"));			
			info.ValidFlag = DBConvert.GetBoolNullable(rdr, rdr.GetOrdinal("VALID_FLAG"));			
			info.ProcessFlag = DBConvert.GetInt32Nullable(rdr, rdr.GetOrdinal("PROCESS_FLAG"));			
			info.ProcessTime = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("PROCESS_TIME"));			
			info.CreateUser = DBConvert.GetString(rdr, rdr.GetOrdinal("CREATE_USER"));			
			info.CreateDate = DBConvert.GetDateTime(rdr, rdr.GetOrdinal("CREATE_DATE"));			
			info.ModifyUser = DBConvert.GetString(rdr, rdr.GetOrdinal("MODIFY_USER"));			
			info.ModifyDate = DBConvert.GetDateTimeNullable(rdr, rdr.GetOrdinal("MODIFY_DATE"));			
			info.Comments = DBConvert.GetString(rdr, rdr.GetOrdinal("COMMENTS"));			
			return info;
		}
		
		#endregion
	}
}
