#region Declaim
//---------------------------------------------------------------------------
// Name:		ZonesInfo
// Function: 	Expose data in table Zones from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月16日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// ZonesInfo对应表[TM_WMM_ZONES]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class ZonesInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public ZonesInfo( 
					string aZoneNo,

					string aZoneName,

					string aPlant,

					string aAssemblyLine,

					string aPlantZone,

					string aWorkshop,

					string aWmNo,

					string aStockPlaceNo,

					int aIsManage,

					int aIsIm,

					int aIsMix,

					string aImLocation,

					int aIsStockCheck,

					string aStrategy,

					int aIsNegative,

					string aComments,

					string aRepackageZone,

					int aIsDynamicDloc,

					int aIsOutputSole,

					string aOverflowDloc,

					bool aValidFlag,

					string aModifyUser,

					long aId,

					string aCreateUser,

					DateTime aModifyDate,

					Guid aFid,

					bool aSettlementflag,

					DateTime aCreateDate

				 
		) : this()
		{
			 
			ZoneNo = aZoneNo;
		 
			ZoneName = aZoneName;
		 
			Plant = aPlant;
		 
			AssemblyLine = aAssemblyLine;
		 
			PlantZone = aPlantZone;
		 
			Workshop = aWorkshop;
		 
			WmNo = aWmNo;
		 
			StockPlaceNo = aStockPlaceNo;
		 
			IsManage = aIsManage;
		 
			IsIm = aIsIm;
		 
			IsMix = aIsMix;
		 
			ImLocation = aImLocation;
		 
			IsStockCheck = aIsStockCheck;
		 
			Strategy = aStrategy;
		 
			IsNegative = aIsNegative;
		 
			Comments = aComments;
		 
			RepackageZone = aRepackageZone;
		 
			IsDynamicDloc = aIsDynamicDloc;
		 
			IsOutputSole = aIsOutputSole;
		 
			OverflowDloc = aOverflowDloc;
		 
			ValidFlag = aValidFlag;
		 
			ModifyUser = aModifyUser;
		 
			Id = aId;
		 
			CreateUser = aCreateUser;
		 
			ModifyDate = aModifyDate;
		 
			Fid = aFid;
		 
			Settlementflag = aSettlementflag;
		 
			CreateDate = aCreateDate;
		}
		
		public ZonesInfo():base("TM_WMM_ZONES")
		{
			List<string> keys = new List<string>();
			                       			keys.Add("ID");     _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField ZONE_NOField = new DataSchemaField();
			ZONE_NOField.Name = "ZONE_NO";
			ZONE_NOField.Type = typeof(string).ToString();
			ZONE_NOField.Index = 0;
			fields.Add(ZONE_NOField);
			 
			DataSchemaField ZONE_NAMEField = new DataSchemaField();
			ZONE_NAMEField.Name = "ZONE_NAME";
			ZONE_NAMEField.Type = typeof(string).ToString();
			ZONE_NAMEField.Index = 1;
			fields.Add(ZONE_NAMEField);
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 2;
			fields.Add(PLANTField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 3;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 4;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 5;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField WM_NOField = new DataSchemaField();
			WM_NOField.Name = "WM_NO";
			WM_NOField.Type = typeof(string).ToString();
			WM_NOField.Index = 6;
			fields.Add(WM_NOField);
			 
			DataSchemaField STOCK_PLACE_NOField = new DataSchemaField();
			STOCK_PLACE_NOField.Name = "STOCK_PLACE_NO";
			STOCK_PLACE_NOField.Type = typeof(string).ToString();
			STOCK_PLACE_NOField.Index = 7;
			fields.Add(STOCK_PLACE_NOField);
			 
			DataSchemaField IS_MANAGEField = new DataSchemaField();
			IS_MANAGEField.Name = "IS_MANAGE";
			IS_MANAGEField.Type = typeof(int).ToString();
			IS_MANAGEField.Index = 8;
			fields.Add(IS_MANAGEField);
			 
			DataSchemaField IS_IMField = new DataSchemaField();
			IS_IMField.Name = "IS_IM";
			IS_IMField.Type = typeof(int).ToString();
			IS_IMField.Index = 9;
			fields.Add(IS_IMField);
			 
			DataSchemaField IS_MIXField = new DataSchemaField();
			IS_MIXField.Name = "IS_MIX";
			IS_MIXField.Type = typeof(int).ToString();
			IS_MIXField.Index = 10;
			fields.Add(IS_MIXField);
			 
			DataSchemaField IM_LOCATIONField = new DataSchemaField();
			IM_LOCATIONField.Name = "IM_LOCATION";
			IM_LOCATIONField.Type = typeof(string).ToString();
			IM_LOCATIONField.Index = 11;
			fields.Add(IM_LOCATIONField);
			 
			DataSchemaField IS_STOCK_CHECKField = new DataSchemaField();
			IS_STOCK_CHECKField.Name = "IS_STOCK_CHECK";
			IS_STOCK_CHECKField.Type = typeof(int).ToString();
			IS_STOCK_CHECKField.Index = 12;
			fields.Add(IS_STOCK_CHECKField);
			 
			DataSchemaField STRATEGYField = new DataSchemaField();
			STRATEGYField.Name = "STRATEGY";
			STRATEGYField.Type = typeof(string).ToString();
			STRATEGYField.Index = 13;
			fields.Add(STRATEGYField);
			 
			DataSchemaField IS_NEGATIVEField = new DataSchemaField();
			IS_NEGATIVEField.Name = "IS_NEGATIVE";
			IS_NEGATIVEField.Type = typeof(int).ToString();
			IS_NEGATIVEField.Index = 14;
			fields.Add(IS_NEGATIVEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 15;
			fields.Add(COMMENTSField);
			 
			DataSchemaField REPACKAGE_ZONEField = new DataSchemaField();
			REPACKAGE_ZONEField.Name = "REPACKAGE_ZONE";
			REPACKAGE_ZONEField.Type = typeof(string).ToString();
			REPACKAGE_ZONEField.Index = 16;
			fields.Add(REPACKAGE_ZONEField);
			 
			DataSchemaField IS_DYNAMIC_DLOCField = new DataSchemaField();
			IS_DYNAMIC_DLOCField.Name = "IS_DYNAMIC_DLOC";
			IS_DYNAMIC_DLOCField.Type = typeof(int).ToString();
			IS_DYNAMIC_DLOCField.Index = 17;
			fields.Add(IS_DYNAMIC_DLOCField);
			 
			DataSchemaField IS_OUTPUT_SOLEField = new DataSchemaField();
			IS_OUTPUT_SOLEField.Name = "IS_OUTPUT_SOLE";
			IS_OUTPUT_SOLEField.Type = typeof(int).ToString();
			IS_OUTPUT_SOLEField.Index = 18;
			fields.Add(IS_OUTPUT_SOLEField);
			 
			DataSchemaField OVERFLOW_DLOCField = new DataSchemaField();
			OVERFLOW_DLOCField.Name = "OVERFLOW_DLOC";
			OVERFLOW_DLOCField.Type = typeof(string).ToString();
			OVERFLOW_DLOCField.Index = 19;
			fields.Add(OVERFLOW_DLOCField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 20;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 21;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 22;
			fields.Add(IDField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 23;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 24;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 25;
			fields.Add(FIDField);
			 
			DataSchemaField SETTLEMENTFLAGField = new DataSchemaField();
			SETTLEMENTFLAGField.Name = "SETTLEMENTFLAG";
			SETTLEMENTFLAGField.Type = typeof(bool).ToString();
			SETTLEMENTFLAGField.Index = 26;
			fields.Add(SETTLEMENTFLAGField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 27;
			fields.Add(CREATE_DATEField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string ZoneNo{ get;set; }		
				
		[DataMember]
		public string ZoneName{ get;set; }		
				
		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string WmNo{ get;set; }		
				
		[DataMember]
		public string StockPlaceNo{ get;set; }		
				
		[DataMember]
		public int? IsManage{ get;set; }		
				
		[DataMember]
		public int? IsIm{ get;set; }		
				
		[DataMember]
		public int? IsMix{ get;set; }		
				
		[DataMember]
		public string ImLocation{ get;set; }		
				
		[DataMember]
		public int? IsStockCheck{ get;set; }		
				
		[DataMember]
		public string Strategy{ get;set; }		
				
		[DataMember]
		public int? IsNegative{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public string RepackageZone{ get;set; }		
				
		[DataMember]
		public int? IsDynamicDloc{ get;set; }		
				
		[DataMember]
		public int? IsOutputSole{ get;set; }		
				
		[DataMember]
		public string OverflowDloc{ get;set; }		
				
				
		private bool? _ValidFlag = true;
		
		[DataMember]	
		public bool? ValidFlag
		{
			get
			{
				return _ValidFlag;
			}
			set
			{
				_ValidFlag = value;
			}
		}
				
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public bool? Settlementflag{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			ZonesInfo info = new ZonesInfo();

			info.ZoneNo = this.ZoneNo;
			info.ZoneName = this.ZoneName;
			info.Plant = this.Plant;
			info.AssemblyLine = this.AssemblyLine;
			info.PlantZone = this.PlantZone;
			info.Workshop = this.Workshop;
			info.WmNo = this.WmNo;
			info.StockPlaceNo = this.StockPlaceNo;
			info.IsManage = this.IsManage;
			info.IsIm = this.IsIm;
			info.IsMix = this.IsMix;
			info.ImLocation = this.ImLocation;
			info.IsStockCheck = this.IsStockCheck;
			info.Strategy = this.Strategy;
			info.IsNegative = this.IsNegative;
			info.Comments = this.Comments;
			info.RepackageZone = this.RepackageZone;
			info.IsDynamicDloc = this.IsDynamicDloc;
			info.IsOutputSole = this.IsOutputSole;
			info.OverflowDloc = this.OverflowDloc;
			info.ValidFlag = this.ValidFlag;
			info.ModifyUser = this.ModifyUser;
			info.Id = this.Id;
			info.CreateUser = this.CreateUser;
			info.ModifyDate = this.ModifyDate;
			info.Fid = this.Fid;
			info.Settlementflag = this.Settlementflag;
			info.CreateDate = this.CreateDate;
			return info;			
		}
		 
		public ZonesInfo Clone()
		{
			return ((ICloneable) this).Clone() as ZonesInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// ZonesInfoCollection对应表[TM_WMM_ZONES]
    /// </summary>
	public partial class ZonesInfoCollection : BusinessObjectCollection<ZonesInfo>
	{
		public ZonesInfoCollection():base("TM_WMM_ZONES"){}	
	}
}
