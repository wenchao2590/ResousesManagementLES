#region Declaim
//---------------------------------------------------------------------------
// Name:		FinancialAccountInfo
// Function: 	Expose data in table FinancialAccount from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// FinancialAccountInfo对应表[TM_BAS_FINANCIAL_ACCOUNT]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class FinancialAccountInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public FinancialAccountInfo( 
					long aFinancialId,

					string aPlant,

					string aAssemblyLine,

					string aPlantZone,

					string aWorkshop,

					string aFinancialCode,

					string aFinancialName,

					string aComments,

					DateTime aUpdateDate,

					string aUpdateUser,

					DateTime aCreateDate,

					string aCreateUser

				 
		) : this()
		{
			 
			FinancialId = aFinancialId;
		 
			Plant = aPlant;
		 
			AssemblyLine = aAssemblyLine;
		 
			PlantZone = aPlantZone;
		 
			Workshop = aWorkshop;
		 
			FinancialCode = aFinancialCode;
		 
			FinancialName = aFinancialName;
		 
			Comments = aComments;
		 
			UpdateDate = aUpdateDate;
		 
			UpdateUser = aUpdateUser;
		 
			CreateDate = aCreateDate;
		 
			CreateUser = aCreateUser;
		}
		
		public FinancialAccountInfo():base("TM_BAS_FINANCIAL_ACCOUNT")
		{
			List<string> keys = new List<string>();
			 			keys.Add("FINANCIAL_ID");           _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField FINANCIAL_IDField = new DataSchemaField();
			FINANCIAL_IDField.Name = "FINANCIAL_ID";
			FINANCIAL_IDField.Type = typeof(long).ToString();
			FINANCIAL_IDField.Index = 0;
			fields.Add(FINANCIAL_IDField);
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 1;
			fields.Add(PLANTField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 2;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 3;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 4;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField FINANCIAL_CODEField = new DataSchemaField();
			FINANCIAL_CODEField.Name = "FINANCIAL_CODE";
			FINANCIAL_CODEField.Type = typeof(string).ToString();
			FINANCIAL_CODEField.Index = 5;
			fields.Add(FINANCIAL_CODEField);
			 
			DataSchemaField FINANCIAL_NAMEField = new DataSchemaField();
			FINANCIAL_NAMEField.Name = "FINANCIAL_NAME";
			FINANCIAL_NAMEField.Type = typeof(string).ToString();
			FINANCIAL_NAMEField.Index = 6;
			fields.Add(FINANCIAL_NAMEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 7;
			fields.Add(COMMENTSField);
			 
			DataSchemaField UPDATE_DATEField = new DataSchemaField();
			UPDATE_DATEField.Name = "UPDATE_DATE";
			UPDATE_DATEField.Type = typeof(DateTime).ToString();
			UPDATE_DATEField.Index = 8;
			fields.Add(UPDATE_DATEField);
			 
			DataSchemaField UPDATE_USERField = new DataSchemaField();
			UPDATE_USERField.Name = "UPDATE_USER";
			UPDATE_USERField.Type = typeof(string).ToString();
			UPDATE_USERField.Index = 9;
			fields.Add(UPDATE_USERField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 10;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 11;
			fields.Add(CREATE_USERField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public long FinancialId{ get;set; }		
				
		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string FinancialCode{ get;set; }		
				
		[DataMember]
		public string FinancialName{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public DateTime? UpdateDate{ get;set; }		
				
		[DataMember]
		public string UpdateUser{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			FinancialAccountInfo info = new FinancialAccountInfo();

			info.FinancialId = this.FinancialId;
			info.Plant = this.Plant;
			info.AssemblyLine = this.AssemblyLine;
			info.PlantZone = this.PlantZone;
			info.Workshop = this.Workshop;
			info.FinancialCode = this.FinancialCode;
			info.FinancialName = this.FinancialName;
			info.Comments = this.Comments;
			info.UpdateDate = this.UpdateDate;
			info.UpdateUser = this.UpdateUser;
			info.CreateDate = this.CreateDate;
			info.CreateUser = this.CreateUser;
			return info;			
		}
		 
		public FinancialAccountInfo Clone()
		{
			return ((ICloneable) this).Clone() as FinancialAccountInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// FinancialAccountInfoCollection对应表[TM_BAS_FINANCIAL_ACCOUNT]
    /// </summary>
	public partial class FinancialAccountInfoCollection : BusinessObjectCollection<FinancialAccountInfo>
	{
		public FinancialAccountInfoCollection():base("TM_BAS_FINANCIAL_ACCOUNT"){}	
	}
}
