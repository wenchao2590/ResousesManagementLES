#region Declaim
//---------------------------------------------------------------------------
// Name:		ScanPointInfo
// Function: 	Expose data in table ScanPoint from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月19日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// ScanPointInfo对应表[TM_BAS_SCAN_POINT]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class ScanPointInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public ScanPointInfo( 
					long aId,

					Guid aFid,

					string aScanPointCode,

					string aScanPointName,

					string aMesScanPointCode,

					string aPlant,

					string aWorkshop,

					string aAssemblyLine,

					string aComments,

					bool aValidFlag,

					DateTime aCreateDate,

					string aCreateUser,

					DateTime aModifyDate,

					string aModifyUser

				 
		) : this()
		{
			 
			Id = aId;
		 
			Fid = aFid;
		 
			ScanPointCode = aScanPointCode;
		 
			ScanPointName = aScanPointName;
		 
			MesScanPointCode = aMesScanPointCode;
		 
			Plant = aPlant;
		 
			Workshop = aWorkshop;
		 
			AssemblyLine = aAssemblyLine;
		 
			Comments = aComments;
		 
			ValidFlag = aValidFlag;
		 
			CreateDate = aCreateDate;
		 
			CreateUser = aCreateUser;
		 
			ModifyDate = aModifyDate;
		 
			ModifyUser = aModifyUser;
		}
		
		public ScanPointInfo():base("TM_BAS_SCAN_POINT")
		{
			List<string> keys = new List<string>();
			 			keys.Add("ID");             _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 0;
			fields.Add(IDField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 1;
			fields.Add(FIDField);
			 
			DataSchemaField SCAN_POINT_CODEField = new DataSchemaField();
			SCAN_POINT_CODEField.Name = "SCAN_POINT_CODE";
			SCAN_POINT_CODEField.Type = typeof(string).ToString();
			SCAN_POINT_CODEField.Index = 2;
			fields.Add(SCAN_POINT_CODEField);
			 
			DataSchemaField SCAN_POINT_NAMEField = new DataSchemaField();
			SCAN_POINT_NAMEField.Name = "SCAN_POINT_NAME";
			SCAN_POINT_NAMEField.Type = typeof(string).ToString();
			SCAN_POINT_NAMEField.Index = 3;
			fields.Add(SCAN_POINT_NAMEField);
			 
			DataSchemaField MES_SCAN_POINT_CODEField = new DataSchemaField();
			MES_SCAN_POINT_CODEField.Name = "MES_SCAN_POINT_CODE";
			MES_SCAN_POINT_CODEField.Type = typeof(string).ToString();
			MES_SCAN_POINT_CODEField.Index = 4;
			fields.Add(MES_SCAN_POINT_CODEField);
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 5;
			fields.Add(PLANTField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 6;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 7;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 8;
			fields.Add(COMMENTSField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 9;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 10;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 11;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 12;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 13;
			fields.Add(MODIFY_USERField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public string ScanPointCode{ get;set; }		
				
		[DataMember]
		public string ScanPointName{ get;set; }		
				
		[DataMember]
		public string MesScanPointCode{ get;set; }		
				
		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public bool ValidFlag{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			ScanPointInfo info = new ScanPointInfo();

			info.Id = this.Id;
			info.Fid = this.Fid;
			info.ScanPointCode = this.ScanPointCode;
			info.ScanPointName = this.ScanPointName;
			info.MesScanPointCode = this.MesScanPointCode;
			info.Plant = this.Plant;
			info.Workshop = this.Workshop;
			info.AssemblyLine = this.AssemblyLine;
			info.Comments = this.Comments;
			info.ValidFlag = this.ValidFlag;
			info.CreateDate = this.CreateDate;
			info.CreateUser = this.CreateUser;
			info.ModifyDate = this.ModifyDate;
			info.ModifyUser = this.ModifyUser;
			return info;			
		}
		 
		public ScanPointInfo Clone()
		{
			return ((ICloneable) this).Clone() as ScanPointInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// ScanPointInfoCollection对应表[TM_BAS_SCAN_POINT]
    /// </summary>
	public partial class ScanPointInfoCollection : BusinessObjectCollection<ScanPointInfo>
	{
		public ScanPointInfoCollection():base("TM_BAS_SCAN_POINT"){}	
	}
}
