#region Declaim
//---------------------------------------------------------------------------
// Name:		RackInfo
// Function: 	Expose data in table Rack from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年12月22日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// RackInfo对应表[TM_JIS_RACK]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class RackInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public RackInfo( 
					string aPlant,

					string aAssemblyLine,

					string aPlantZone,

					string aWorkshop,

					string aSupplierNum,

					string aRack,

					int aRackState,

					string aRackCname,

					string aRackEname,

					string aWorkStationNo,

					string aCaculatePoint,

					int aBacklogQuantity,

					int aBacklogTime,

					int aDeliveryTime,

					int aUnloadingTime,

					string aDock,

					int aRackRow,

					int aRackColumn,

					string aUnloadbldg,

					string aLocation,

					string aPreviewPoint,

					string aArrangementPoint,

					string aPrintType,

					int aWorkareaDistance,

					bool aIsDisplayVin,

					bool aIsArrangementEmpty,

					int aCaculateTerm,

					string aReceiveSupplier,

					string aTransportSupplier,

					int aIsSeperateSheet,

					string aSeperateLoc,

					int aBufferQnt,

					int aBridgeQnt,

					string aWarehouse,

					int aIsTransferTransport,

					string aRunningNo,

					string aKnr,

					string aBoxParts,

					string aCaculateCheckPoint,

					string aComments,

					string aCreateUser,

					DateTime aCreateDate,

					string aUpdateUser,

					DateTime aUpdateDate,

					string aRoute,

					int aIsCreateTask

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			AssemblyLine = aAssemblyLine;
		 
			PlantZone = aPlantZone;
		 
			Workshop = aWorkshop;
		 
			SupplierNum = aSupplierNum;
		 
			Rack = aRack;
		 
			RackState = aRackState;
		 
			RackCname = aRackCname;
		 
			RackEname = aRackEname;
		 
			WorkStationNo = aWorkStationNo;
		 
			CaculatePoint = aCaculatePoint;
		 
			BacklogQuantity = aBacklogQuantity;
		 
			BacklogTime = aBacklogTime;
		 
			DeliveryTime = aDeliveryTime;
		 
			UnloadingTime = aUnloadingTime;
		 
			Dock = aDock;
		 
			RackRow = aRackRow;
		 
			RackColumn = aRackColumn;
		 
			Unloadbldg = aUnloadbldg;
		 
			Location = aLocation;
		 
			PreviewPoint = aPreviewPoint;
		 
			ArrangementPoint = aArrangementPoint;
		 
			PrintType = aPrintType;
		 
			WorkareaDistance = aWorkareaDistance;
		 
			IsDisplayVin = aIsDisplayVin;
		 
			IsArrangementEmpty = aIsArrangementEmpty;
		 
			CaculateTerm = aCaculateTerm;
		 
			ReceiveSupplier = aReceiveSupplier;
		 
			TransportSupplier = aTransportSupplier;
		 
			IsSeperateSheet = aIsSeperateSheet;
		 
			SeperateLoc = aSeperateLoc;
		 
			BufferQnt = aBufferQnt;
		 
			BridgeQnt = aBridgeQnt;
		 
			Warehouse = aWarehouse;
		 
			IsTransferTransport = aIsTransferTransport;
		 
			RunningNo = aRunningNo;
		 
			Knr = aKnr;
		 
			BoxParts = aBoxParts;
		 
			CaculateCheckPoint = aCaculateCheckPoint;
		 
			Comments = aComments;
		 
			CreateUser = aCreateUser;
		 
			CreateDate = aCreateDate;
		 
			UpdateUser = aUpdateUser;
		 
			UpdateDate = aUpdateDate;
		 
			Route = aRoute;
		 
			IsCreateTask = aIsCreateTask;
		}
		
		public RackInfo():base("TM_JIS_RACK")
		{
			List<string> keys = new List<string>();
			 			keys.Add("PLANT"); 			keys.Add("ASSEMBLY_LINE");    			keys.Add("RACK");                                        _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 1;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 2;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 3;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField SUPPLIER_NUMField = new DataSchemaField();
			SUPPLIER_NUMField.Name = "SUPPLIER_NUM";
			SUPPLIER_NUMField.Type = typeof(string).ToString();
			SUPPLIER_NUMField.Index = 4;
			fields.Add(SUPPLIER_NUMField);
			 
			DataSchemaField RACKField = new DataSchemaField();
			RACKField.Name = "RACK";
			RACKField.Type = typeof(string).ToString();
			RACKField.Index = 5;
			fields.Add(RACKField);
			 
			DataSchemaField RACK_STATEField = new DataSchemaField();
			RACK_STATEField.Name = "RACK_STATE";
			RACK_STATEField.Type = typeof(int).ToString();
			RACK_STATEField.Index = 6;
			fields.Add(RACK_STATEField);
			 
			DataSchemaField RACK_CNAMEField = new DataSchemaField();
			RACK_CNAMEField.Name = "RACK_CNAME";
			RACK_CNAMEField.Type = typeof(string).ToString();
			RACK_CNAMEField.Index = 7;
			fields.Add(RACK_CNAMEField);
			 
			DataSchemaField RACK_ENAMEField = new DataSchemaField();
			RACK_ENAMEField.Name = "RACK_ENAME";
			RACK_ENAMEField.Type = typeof(string).ToString();
			RACK_ENAMEField.Index = 8;
			fields.Add(RACK_ENAMEField);
			 
			DataSchemaField WORK_STATION_NOField = new DataSchemaField();
			WORK_STATION_NOField.Name = "WORK_STATION_NO";
			WORK_STATION_NOField.Type = typeof(string).ToString();
			WORK_STATION_NOField.Index = 9;
			fields.Add(WORK_STATION_NOField);
			 
			DataSchemaField CACULATE_POINTField = new DataSchemaField();
			CACULATE_POINTField.Name = "CACULATE_POINT";
			CACULATE_POINTField.Type = typeof(string).ToString();
			CACULATE_POINTField.Index = 10;
			fields.Add(CACULATE_POINTField);
			 
			DataSchemaField BACKLOG_QUANTITYField = new DataSchemaField();
			BACKLOG_QUANTITYField.Name = "BACKLOG_QUANTITY";
			BACKLOG_QUANTITYField.Type = typeof(int).ToString();
			BACKLOG_QUANTITYField.Index = 11;
			fields.Add(BACKLOG_QUANTITYField);
			 
			DataSchemaField BACKLOG_TIMEField = new DataSchemaField();
			BACKLOG_TIMEField.Name = "BACKLOG_TIME";
			BACKLOG_TIMEField.Type = typeof(int).ToString();
			BACKLOG_TIMEField.Index = 12;
			fields.Add(BACKLOG_TIMEField);
			 
			DataSchemaField DELIVERY_TIMEField = new DataSchemaField();
			DELIVERY_TIMEField.Name = "DELIVERY_TIME";
			DELIVERY_TIMEField.Type = typeof(int).ToString();
			DELIVERY_TIMEField.Index = 13;
			fields.Add(DELIVERY_TIMEField);
			 
			DataSchemaField UNLOADING_TIMEField = new DataSchemaField();
			UNLOADING_TIMEField.Name = "UNLOADING_TIME";
			UNLOADING_TIMEField.Type = typeof(int).ToString();
			UNLOADING_TIMEField.Index = 14;
			fields.Add(UNLOADING_TIMEField);
			 
			DataSchemaField DOCKField = new DataSchemaField();
			DOCKField.Name = "DOCK";
			DOCKField.Type = typeof(string).ToString();
			DOCKField.Index = 15;
			fields.Add(DOCKField);
			 
			DataSchemaField RACK_ROWField = new DataSchemaField();
			RACK_ROWField.Name = "RACK_ROW";
			RACK_ROWField.Type = typeof(int).ToString();
			RACK_ROWField.Index = 16;
			fields.Add(RACK_ROWField);
			 
			DataSchemaField RACK_COLUMNField = new DataSchemaField();
			RACK_COLUMNField.Name = "RACK_COLUMN";
			RACK_COLUMNField.Type = typeof(int).ToString();
			RACK_COLUMNField.Index = 17;
			fields.Add(RACK_COLUMNField);
			 
			DataSchemaField UNLOADBLDGField = new DataSchemaField();
			UNLOADBLDGField.Name = "UNLOADBLDG";
			UNLOADBLDGField.Type = typeof(string).ToString();
			UNLOADBLDGField.Index = 18;
			fields.Add(UNLOADBLDGField);
			 
			DataSchemaField LOCATIONField = new DataSchemaField();
			LOCATIONField.Name = "LOCATION";
			LOCATIONField.Type = typeof(string).ToString();
			LOCATIONField.Index = 19;
			fields.Add(LOCATIONField);
			 
			DataSchemaField PREVIEW_POINTField = new DataSchemaField();
			PREVIEW_POINTField.Name = "PREVIEW_POINT";
			PREVIEW_POINTField.Type = typeof(string).ToString();
			PREVIEW_POINTField.Index = 20;
			fields.Add(PREVIEW_POINTField);
			 
			DataSchemaField ARRANGEMENT_POINTField = new DataSchemaField();
			ARRANGEMENT_POINTField.Name = "ARRANGEMENT_POINT";
			ARRANGEMENT_POINTField.Type = typeof(string).ToString();
			ARRANGEMENT_POINTField.Index = 21;
			fields.Add(ARRANGEMENT_POINTField);
			 
			DataSchemaField PRINT_TYPEField = new DataSchemaField();
			PRINT_TYPEField.Name = "PRINT_TYPE";
			PRINT_TYPEField.Type = typeof(string).ToString();
			PRINT_TYPEField.Index = 22;
			fields.Add(PRINT_TYPEField);
			 
			DataSchemaField WORKAREA_DISTANCEField = new DataSchemaField();
			WORKAREA_DISTANCEField.Name = "WORKAREA_DISTANCE";
			WORKAREA_DISTANCEField.Type = typeof(int).ToString();
			WORKAREA_DISTANCEField.Index = 23;
			fields.Add(WORKAREA_DISTANCEField);
			 
			DataSchemaField IS_DISPLAY_VINField = new DataSchemaField();
			IS_DISPLAY_VINField.Name = "IS_DISPLAY_VIN";
			IS_DISPLAY_VINField.Type = typeof(bool).ToString();
			IS_DISPLAY_VINField.Index = 24;
			fields.Add(IS_DISPLAY_VINField);
			 
			DataSchemaField IS_ARRANGEMENT_EMPTYField = new DataSchemaField();
			IS_ARRANGEMENT_EMPTYField.Name = "IS_ARRANGEMENT_EMPTY";
			IS_ARRANGEMENT_EMPTYField.Type = typeof(bool).ToString();
			IS_ARRANGEMENT_EMPTYField.Index = 25;
			fields.Add(IS_ARRANGEMENT_EMPTYField);
			 
			DataSchemaField CACULATE_TERMField = new DataSchemaField();
			CACULATE_TERMField.Name = "CACULATE_TERM";
			CACULATE_TERMField.Type = typeof(int).ToString();
			CACULATE_TERMField.Index = 26;
			fields.Add(CACULATE_TERMField);
			 
			DataSchemaField RECEIVE_SUPPLIERField = new DataSchemaField();
			RECEIVE_SUPPLIERField.Name = "RECEIVE_SUPPLIER";
			RECEIVE_SUPPLIERField.Type = typeof(string).ToString();
			RECEIVE_SUPPLIERField.Index = 27;
			fields.Add(RECEIVE_SUPPLIERField);
			 
			DataSchemaField TRANSPORT_SUPPLIERField = new DataSchemaField();
			TRANSPORT_SUPPLIERField.Name = "TRANSPORT_SUPPLIER";
			TRANSPORT_SUPPLIERField.Type = typeof(string).ToString();
			TRANSPORT_SUPPLIERField.Index = 28;
			fields.Add(TRANSPORT_SUPPLIERField);
			 
			DataSchemaField IS_SEPERATE_SHEETField = new DataSchemaField();
			IS_SEPERATE_SHEETField.Name = "IS_SEPERATE_SHEET";
			IS_SEPERATE_SHEETField.Type = typeof(int).ToString();
			IS_SEPERATE_SHEETField.Index = 29;
			fields.Add(IS_SEPERATE_SHEETField);
			 
			DataSchemaField SEPERATE_LOCField = new DataSchemaField();
			SEPERATE_LOCField.Name = "SEPERATE_LOC";
			SEPERATE_LOCField.Type = typeof(string).ToString();
			SEPERATE_LOCField.Index = 30;
			fields.Add(SEPERATE_LOCField);
			 
			DataSchemaField BUFFER_QNTField = new DataSchemaField();
			BUFFER_QNTField.Name = "BUFFER_QNT";
			BUFFER_QNTField.Type = typeof(int).ToString();
			BUFFER_QNTField.Index = 31;
			fields.Add(BUFFER_QNTField);
			 
			DataSchemaField BRIDGE_QNTField = new DataSchemaField();
			BRIDGE_QNTField.Name = "BRIDGE_QNT";
			BRIDGE_QNTField.Type = typeof(int).ToString();
			BRIDGE_QNTField.Index = 32;
			fields.Add(BRIDGE_QNTField);
			 
			DataSchemaField WAREHOUSEField = new DataSchemaField();
			WAREHOUSEField.Name = "WAREHOUSE";
			WAREHOUSEField.Type = typeof(string).ToString();
			WAREHOUSEField.Index = 33;
			fields.Add(WAREHOUSEField);
			 
			DataSchemaField IS_TRANSFER_TRANSPORTField = new DataSchemaField();
			IS_TRANSFER_TRANSPORTField.Name = "IS_TRANSFER_TRANSPORT";
			IS_TRANSFER_TRANSPORTField.Type = typeof(int).ToString();
			IS_TRANSFER_TRANSPORTField.Index = 34;
			fields.Add(IS_TRANSFER_TRANSPORTField);
			 
			DataSchemaField RUNNING_NOField = new DataSchemaField();
			RUNNING_NOField.Name = "RUNNING_NO";
			RUNNING_NOField.Type = typeof(string).ToString();
			RUNNING_NOField.Index = 35;
			fields.Add(RUNNING_NOField);
			 
			DataSchemaField KNRField = new DataSchemaField();
			KNRField.Name = "KNR";
			KNRField.Type = typeof(string).ToString();
			KNRField.Index = 36;
			fields.Add(KNRField);
			 
			DataSchemaField BOX_PARTSField = new DataSchemaField();
			BOX_PARTSField.Name = "BOX_PARTS";
			BOX_PARTSField.Type = typeof(string).ToString();
			BOX_PARTSField.Index = 37;
			fields.Add(BOX_PARTSField);
			 
			DataSchemaField CACULATE_CHECK_POINTField = new DataSchemaField();
			CACULATE_CHECK_POINTField.Name = "CACULATE_CHECK_POINT";
			CACULATE_CHECK_POINTField.Type = typeof(string).ToString();
			CACULATE_CHECK_POINTField.Index = 38;
			fields.Add(CACULATE_CHECK_POINTField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 39;
			fields.Add(COMMENTSField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 40;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 41;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField UPDATE_USERField = new DataSchemaField();
			UPDATE_USERField.Name = "UPDATE_USER";
			UPDATE_USERField.Type = typeof(string).ToString();
			UPDATE_USERField.Index = 42;
			fields.Add(UPDATE_USERField);
			 
			DataSchemaField UPDATE_DATEField = new DataSchemaField();
			UPDATE_DATEField.Name = "UPDATE_DATE";
			UPDATE_DATEField.Type = typeof(DateTime).ToString();
			UPDATE_DATEField.Index = 43;
			fields.Add(UPDATE_DATEField);
			 
			DataSchemaField ROUTEField = new DataSchemaField();
			ROUTEField.Name = "ROUTE";
			ROUTEField.Type = typeof(string).ToString();
			ROUTEField.Index = 44;
			fields.Add(ROUTEField);
			 
			DataSchemaField IS_CREATE_TASKField = new DataSchemaField();
			IS_CREATE_TASKField.Name = "IS_CREATE_TASK";
			IS_CREATE_TASKField.Type = typeof(int).ToString();
			IS_CREATE_TASKField.Index = 45;
			fields.Add(IS_CREATE_TASKField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string SupplierNum{ get;set; }		
				
		[DataMember]
		public string Rack{ get;set; }		
				
		[DataMember]
		public int RackState{ get;set; }		
				
		[DataMember]
		public string RackCname{ get;set; }		
				
		[DataMember]
		public string RackEname{ get;set; }		
				
		[DataMember]
		public string WorkStationNo{ get;set; }		
				
		[DataMember]
		public string CaculatePoint{ get;set; }		
				
		[DataMember]
		public int BacklogQuantity{ get;set; }		
				
		[DataMember]
		public int BacklogTime{ get;set; }		
				
		[DataMember]
		public int DeliveryTime{ get;set; }		
				
		[DataMember]
		public int UnloadingTime{ get;set; }		
				
		[DataMember]
		public string Dock{ get;set; }		
				
		[DataMember]
		public int RackRow{ get;set; }		
				
		[DataMember]
		public int RackColumn{ get;set; }		
				
		[DataMember]
		public string Unloadbldg{ get;set; }		
				
		[DataMember]
		public string Location{ get;set; }		
				
		[DataMember]
		public string PreviewPoint{ get;set; }		
				
		[DataMember]
		public string ArrangementPoint{ get;set; }		
				
		[DataMember]
		public string PrintType{ get;set; }		
				
		[DataMember]
		public int? WorkareaDistance{ get;set; }		
				
		[DataMember]
		public bool? IsDisplayVin{ get;set; }		
				
		[DataMember]
		public bool? IsArrangementEmpty{ get;set; }		
				
		[DataMember]
		public int? CaculateTerm{ get;set; }		
				
		[DataMember]
		public string ReceiveSupplier{ get;set; }		
				
		[DataMember]
		public string TransportSupplier{ get;set; }		
				
		[DataMember]
		public int? IsSeperateSheet{ get;set; }		
				
		[DataMember]
		public string SeperateLoc{ get;set; }		
				
		[DataMember]
		public int? BufferQnt{ get;set; }		
				
		[DataMember]
		public int? BridgeQnt{ get;set; }		
				
		[DataMember]
		public string Warehouse{ get;set; }		
				
		[DataMember]
		public int? IsTransferTransport{ get;set; }		
				
		[DataMember]
		public string RunningNo{ get;set; }		
				
		[DataMember]
		public string Knr{ get;set; }		
				
		[DataMember]
		public string BoxParts{ get;set; }		
				
		[DataMember]
		public string CaculateCheckPoint{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string UpdateUser{ get;set; }		
				
		[DataMember]
		public DateTime? UpdateDate{ get;set; }		
				
		[DataMember]
		public string Route{ get;set; }		
				
		[DataMember]
		public int? IsCreateTask{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			RackInfo info = new RackInfo();

			info.Plant = this.Plant;
			info.AssemblyLine = this.AssemblyLine;
			info.PlantZone = this.PlantZone;
			info.Workshop = this.Workshop;
			info.SupplierNum = this.SupplierNum;
			info.Rack = this.Rack;
			info.RackState = this.RackState;
			info.RackCname = this.RackCname;
			info.RackEname = this.RackEname;
			info.WorkStationNo = this.WorkStationNo;
			info.CaculatePoint = this.CaculatePoint;
			info.BacklogQuantity = this.BacklogQuantity;
			info.BacklogTime = this.BacklogTime;
			info.DeliveryTime = this.DeliveryTime;
			info.UnloadingTime = this.UnloadingTime;
			info.Dock = this.Dock;
			info.RackRow = this.RackRow;
			info.RackColumn = this.RackColumn;
			info.Unloadbldg = this.Unloadbldg;
			info.Location = this.Location;
			info.PreviewPoint = this.PreviewPoint;
			info.ArrangementPoint = this.ArrangementPoint;
			info.PrintType = this.PrintType;
			info.WorkareaDistance = this.WorkareaDistance;
			info.IsDisplayVin = this.IsDisplayVin;
			info.IsArrangementEmpty = this.IsArrangementEmpty;
			info.CaculateTerm = this.CaculateTerm;
			info.ReceiveSupplier = this.ReceiveSupplier;
			info.TransportSupplier = this.TransportSupplier;
			info.IsSeperateSheet = this.IsSeperateSheet;
			info.SeperateLoc = this.SeperateLoc;
			info.BufferQnt = this.BufferQnt;
			info.BridgeQnt = this.BridgeQnt;
			info.Warehouse = this.Warehouse;
			info.IsTransferTransport = this.IsTransferTransport;
			info.RunningNo = this.RunningNo;
			info.Knr = this.Knr;
			info.BoxParts = this.BoxParts;
			info.CaculateCheckPoint = this.CaculateCheckPoint;
			info.Comments = this.Comments;
			info.CreateUser = this.CreateUser;
			info.CreateDate = this.CreateDate;
			info.UpdateUser = this.UpdateUser;
			info.UpdateDate = this.UpdateDate;
			info.Route = this.Route;
			info.IsCreateTask = this.IsCreateTask;
			return info;			
		}
		 
		public RackInfo Clone()
		{
			return ((ICloneable) this).Clone() as RackInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// RackInfoCollection对应表[TM_JIS_RACK]
    /// </summary>
	public partial class RackInfoCollection : BusinessObjectCollection<RackInfo>
	{
		public RackInfoCollection():base("TM_JIS_RACK"){}	
	}
}
