#region Declaim
//---------------------------------------------------------------------------
// Name:		LackOfMaterialInfo
// Function: 	Expose data in table LackOfMaterial from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年6月4日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// LackOfMaterialInfo对应表[TT_ATP_LACK_OF_MATERIAL]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class LackOfMaterialInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public LackOfMaterialInfo( 
					long aId,

					Guid aFid,

					string aLackOrderNo,

					string aPartNo,

					string aSupplierNum,

					string aPlant,

					string aPartPurchaser,

					DateTime aStartDate,

					DateTime aEndDate,

					int aStatus,

					DateTime aExecuteStartTime,

					DateTime aExecuteEndTime,

					bool aValidFlag,

					string aComments,

					string aCreateUser,

					DateTime aCreateDate,

					string aModifyUser,

					DateTime aModifyDate

				 
		) : this()
		{
			 
			Id = aId;
		 
			Fid = aFid;
		 
			LackOrderNo = aLackOrderNo;
		 
			PartNo = aPartNo;
		 
			SupplierNum = aSupplierNum;
		 
			Plant = aPlant;
		 
			PartPurchaser = aPartPurchaser;
		 
			StartDate = aStartDate;
		 
			EndDate = aEndDate;
		 
			Status = aStatus;
		 
			ExecuteStartTime = aExecuteStartTime;
		 
			ExecuteEndTime = aExecuteEndTime;
		 
			ValidFlag = aValidFlag;
		 
			Comments = aComments;
		 
			CreateUser = aCreateUser;
		 
			CreateDate = aCreateDate;
		 
			ModifyUser = aModifyUser;
		 
			ModifyDate = aModifyDate;
		}
		
		public LackOfMaterialInfo():base("TT_ATP_LACK_OF_MATERIAL")
		{
			List<string> keys = new List<string>();
			 			keys.Add("ID");                 _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 0;
			fields.Add(IDField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 1;
			fields.Add(FIDField);
			 
			DataSchemaField LACK_ORDER_NOField = new DataSchemaField();
			LACK_ORDER_NOField.Name = "LACK_ORDER_NO";
			LACK_ORDER_NOField.Type = typeof(string).ToString();
			LACK_ORDER_NOField.Index = 2;
			fields.Add(LACK_ORDER_NOField);
			 
			DataSchemaField PART_NOField = new DataSchemaField();
			PART_NOField.Name = "PART_NO";
			PART_NOField.Type = typeof(string).ToString();
			PART_NOField.Index = 3;
			fields.Add(PART_NOField);
			 
			DataSchemaField SUPPLIER_NUMField = new DataSchemaField();
			SUPPLIER_NUMField.Name = "SUPPLIER_NUM";
			SUPPLIER_NUMField.Type = typeof(string).ToString();
			SUPPLIER_NUMField.Index = 4;
			fields.Add(SUPPLIER_NUMField);
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 5;
			fields.Add(PLANTField);
			 
			DataSchemaField PART_PURCHASERField = new DataSchemaField();
			PART_PURCHASERField.Name = "PART_PURCHASER";
			PART_PURCHASERField.Type = typeof(string).ToString();
			PART_PURCHASERField.Index = 6;
			fields.Add(PART_PURCHASERField);
			 
			DataSchemaField START_DATEField = new DataSchemaField();
			START_DATEField.Name = "START_DATE";
			START_DATEField.Type = typeof(DateTime).ToString();
			START_DATEField.Index = 7;
			fields.Add(START_DATEField);
			 
			DataSchemaField END_DATEField = new DataSchemaField();
			END_DATEField.Name = "END_DATE";
			END_DATEField.Type = typeof(DateTime).ToString();
			END_DATEField.Index = 8;
			fields.Add(END_DATEField);
			 
			DataSchemaField STATUSField = new DataSchemaField();
			STATUSField.Name = "STATUS";
			STATUSField.Type = typeof(int).ToString();
			STATUSField.Index = 9;
			fields.Add(STATUSField);
			 
			DataSchemaField EXECUTE_START_TIMEField = new DataSchemaField();
			EXECUTE_START_TIMEField.Name = "EXECUTE_START_TIME";
			EXECUTE_START_TIMEField.Type = typeof(DateTime).ToString();
			EXECUTE_START_TIMEField.Index = 10;
			fields.Add(EXECUTE_START_TIMEField);
			 
			DataSchemaField EXECUTE_END_TIMEField = new DataSchemaField();
			EXECUTE_END_TIMEField.Name = "EXECUTE_END_TIME";
			EXECUTE_END_TIMEField.Type = typeof(DateTime).ToString();
			EXECUTE_END_TIMEField.Index = 11;
			fields.Add(EXECUTE_END_TIMEField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 12;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 13;
			fields.Add(COMMENTSField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 14;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 15;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 16;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 17;
			fields.Add(MODIFY_DATEField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public string LackOrderNo{ get;set; }		
				
		[DataMember]
		public string PartNo{ get;set; }		
				
		[DataMember]
		public string SupplierNum{ get;set; }		
				
		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string PartPurchaser{ get;set; }		
				
		[DataMember]
		public DateTime? StartDate{ get;set; }		
				
		[DataMember]
		public DateTime? EndDate{ get;set; }		
				
		[DataMember]
		public int? Status{ get;set; }		
				
		[DataMember]
		public DateTime? ExecuteStartTime{ get;set; }		
				
		[DataMember]
		public DateTime? ExecuteEndTime{ get;set; }		
				
		[DataMember]
		public bool ValidFlag{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime? CreateDate{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			LackOfMaterialInfo info = new LackOfMaterialInfo();

			info.Id = this.Id;
			info.Fid = this.Fid;
			info.LackOrderNo = this.LackOrderNo;
			info.PartNo = this.PartNo;
			info.SupplierNum = this.SupplierNum;
			info.Plant = this.Plant;
			info.PartPurchaser = this.PartPurchaser;
			info.StartDate = this.StartDate;
			info.EndDate = this.EndDate;
			info.Status = this.Status;
			info.ExecuteStartTime = this.ExecuteStartTime;
			info.ExecuteEndTime = this.ExecuteEndTime;
			info.ValidFlag = this.ValidFlag;
			info.Comments = this.Comments;
			info.CreateUser = this.CreateUser;
			info.CreateDate = this.CreateDate;
			info.ModifyUser = this.ModifyUser;
			info.ModifyDate = this.ModifyDate;
			return info;			
		}
		 
		public LackOfMaterialInfo Clone()
		{
			return ((ICloneable) this).Clone() as LackOfMaterialInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// LackOfMaterialInfoCollection对应表[TT_ATP_LACK_OF_MATERIAL]
    /// </summary>
	public partial class LackOfMaterialInfoCollection : BusinessObjectCollection<LackOfMaterialInfo>
	{
		public LackOfMaterialInfoCollection():base("TT_ATP_LACK_OF_MATERIAL"){}	
	}
}
