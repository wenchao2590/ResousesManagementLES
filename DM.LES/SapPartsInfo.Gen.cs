#region Declaim
//---------------------------------------------------------------------------
// Name:		SapPartsInfo
// Function: 	Expose data in table SapParts from database as business object to MES system.
// Tool:		T4
// CreateDate:	2018年7月24日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// SapPartsInfo对应表[TI_IFM_SAP_PARTS]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class SapPartsInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public SapPartsInfo( 
					long aId,

					Guid aFid,

					Guid aLogFid,

					string aWerks,

					string aMatnr,

					string aMaktxEn,

					string aMaktxZh,

					string aMeins,

					string aMtart,

					decimal aBrgew,

					string aEkgrp,

					string aZysqjc,

					decimal aBstrf,

					decimal aZysbz,

					string aZxbqjc,

					int aZxbqjq,

					decimal aZxbbz,

					string aDismm,

					string aDispo,

					string aDisgr,

					string aBeskz,

					decimal aBstmi,

					int aPlifz,

					string aZdock,

					decimal aZysfy,

					decimal aLgrad,

					decimal aEisbe,

					decimal aMinbe,

					string aMstae,

					string aLogicalPk,

					string aSpras,

					bool aFlag,

					string aAbc,

					int aProcessFlag,

					DateTime aProcessTime,

					string aComments,

					bool aValidFlag,

					string aCreateUser,

					DateTime aCreateDate,

					string aModifyUser,

					DateTime aModifyDate

				 
		) : this()
		{
			 
			Id = aId;
		 
			Fid = aFid;
		 
			LogFid = aLogFid;
		 
			Werks = aWerks;
		 
			Matnr = aMatnr;
		 
			MaktxEn = aMaktxEn;
		 
			MaktxZh = aMaktxZh;
		 
			Meins = aMeins;
		 
			Mtart = aMtart;
		 
			Brgew = aBrgew;
		 
			Ekgrp = aEkgrp;
		 
			Zysqjc = aZysqjc;
		 
			Bstrf = aBstrf;
		 
			Zysbz = aZysbz;
		 
			Zxbqjc = aZxbqjc;
		 
			Zxbqjq = aZxbqjq;
		 
			Zxbbz = aZxbbz;
		 
			Dismm = aDismm;
		 
			Dispo = aDispo;
		 
			Disgr = aDisgr;
		 
			Beskz = aBeskz;
		 
			Bstmi = aBstmi;
		 
			Plifz = aPlifz;
		 
			Zdock = aZdock;
		 
			Zysfy = aZysfy;
		 
			Lgrad = aLgrad;
		 
			Eisbe = aEisbe;
		 
			Minbe = aMinbe;
		 
			Mstae = aMstae;
		 
			LogicalPk = aLogicalPk;
		 
			Spras = aSpras;
		 
			Flag = aFlag;
		 
			Abc = aAbc;
		 
			ProcessFlag = aProcessFlag;
		 
			ProcessTime = aProcessTime;
		 
			Comments = aComments;
		 
			ValidFlag = aValidFlag;
		 
			CreateUser = aCreateUser;
		 
			CreateDate = aCreateDate;
		 
			ModifyUser = aModifyUser;
		 
			ModifyDate = aModifyDate;
		}
		
		public SapPartsInfo():base("TI_IFM_SAP_PARTS")
		{
			List<string> keys = new List<string>();
			 			keys.Add("ID");                                        _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 0;
			fields.Add(IDField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 1;
			fields.Add(FIDField);
			 
			DataSchemaField LOG_FIDField = new DataSchemaField();
			LOG_FIDField.Name = "LOG_FID";
			LOG_FIDField.Type = typeof(Guid).ToString();
			LOG_FIDField.Index = 2;
			fields.Add(LOG_FIDField);
			 
			DataSchemaField WERKSField = new DataSchemaField();
			WERKSField.Name = "WERKS";
			WERKSField.Type = typeof(string).ToString();
			WERKSField.Index = 3;
			fields.Add(WERKSField);
			 
			DataSchemaField MATNRField = new DataSchemaField();
			MATNRField.Name = "MATNR";
			MATNRField.Type = typeof(string).ToString();
			MATNRField.Index = 4;
			fields.Add(MATNRField);
			 
			DataSchemaField MAKTX_ENField = new DataSchemaField();
			MAKTX_ENField.Name = "MAKTX_EN";
			MAKTX_ENField.Type = typeof(string).ToString();
			MAKTX_ENField.Index = 5;
			fields.Add(MAKTX_ENField);
			 
			DataSchemaField MAKTX_ZHField = new DataSchemaField();
			MAKTX_ZHField.Name = "MAKTX_ZH";
			MAKTX_ZHField.Type = typeof(string).ToString();
			MAKTX_ZHField.Index = 6;
			fields.Add(MAKTX_ZHField);
			 
			DataSchemaField MEINSField = new DataSchemaField();
			MEINSField.Name = "MEINS";
			MEINSField.Type = typeof(string).ToString();
			MEINSField.Index = 7;
			fields.Add(MEINSField);
			 
			DataSchemaField MTARTField = new DataSchemaField();
			MTARTField.Name = "MTART";
			MTARTField.Type = typeof(string).ToString();
			MTARTField.Index = 8;
			fields.Add(MTARTField);
			 
			DataSchemaField BRGEWField = new DataSchemaField();
			BRGEWField.Name = "BRGEW";
			BRGEWField.Type = typeof(decimal).ToString();
			BRGEWField.Index = 9;
			fields.Add(BRGEWField);
			 
			DataSchemaField EKGRPField = new DataSchemaField();
			EKGRPField.Name = "EKGRP";
			EKGRPField.Type = typeof(string).ToString();
			EKGRPField.Index = 10;
			fields.Add(EKGRPField);
			 
			DataSchemaField ZYSQJCField = new DataSchemaField();
			ZYSQJCField.Name = "ZYSQJC";
			ZYSQJCField.Type = typeof(string).ToString();
			ZYSQJCField.Index = 11;
			fields.Add(ZYSQJCField);
			 
			DataSchemaField BSTRFField = new DataSchemaField();
			BSTRFField.Name = "BSTRF";
			BSTRFField.Type = typeof(decimal).ToString();
			BSTRFField.Index = 12;
			fields.Add(BSTRFField);
			 
			DataSchemaField ZYSBZField = new DataSchemaField();
			ZYSBZField.Name = "ZYSBZ";
			ZYSBZField.Type = typeof(decimal).ToString();
			ZYSBZField.Index = 13;
			fields.Add(ZYSBZField);
			 
			DataSchemaField ZXBQJCField = new DataSchemaField();
			ZXBQJCField.Name = "ZXBQJC";
			ZXBQJCField.Type = typeof(string).ToString();
			ZXBQJCField.Index = 14;
			fields.Add(ZXBQJCField);
			 
			DataSchemaField ZXBQJQField = new DataSchemaField();
			ZXBQJQField.Name = "ZXBQJQ";
			ZXBQJQField.Type = typeof(int).ToString();
			ZXBQJQField.Index = 15;
			fields.Add(ZXBQJQField);
			 
			DataSchemaField ZXBBZField = new DataSchemaField();
			ZXBBZField.Name = "ZXBBZ";
			ZXBBZField.Type = typeof(decimal).ToString();
			ZXBBZField.Index = 16;
			fields.Add(ZXBBZField);
			 
			DataSchemaField DISMMField = new DataSchemaField();
			DISMMField.Name = "DISMM";
			DISMMField.Type = typeof(string).ToString();
			DISMMField.Index = 17;
			fields.Add(DISMMField);
			 
			DataSchemaField DISPOField = new DataSchemaField();
			DISPOField.Name = "DISPO";
			DISPOField.Type = typeof(string).ToString();
			DISPOField.Index = 18;
			fields.Add(DISPOField);
			 
			DataSchemaField DISGRField = new DataSchemaField();
			DISGRField.Name = "DISGR";
			DISGRField.Type = typeof(string).ToString();
			DISGRField.Index = 19;
			fields.Add(DISGRField);
			 
			DataSchemaField BESKZField = new DataSchemaField();
			BESKZField.Name = "BESKZ";
			BESKZField.Type = typeof(string).ToString();
			BESKZField.Index = 20;
			fields.Add(BESKZField);
			 
			DataSchemaField BSTMIField = new DataSchemaField();
			BSTMIField.Name = "BSTMI";
			BSTMIField.Type = typeof(decimal).ToString();
			BSTMIField.Index = 21;
			fields.Add(BSTMIField);
			 
			DataSchemaField PLIFZField = new DataSchemaField();
			PLIFZField.Name = "PLIFZ";
			PLIFZField.Type = typeof(int).ToString();
			PLIFZField.Index = 22;
			fields.Add(PLIFZField);
			 
			DataSchemaField ZDOCKField = new DataSchemaField();
			ZDOCKField.Name = "ZDOCK";
			ZDOCKField.Type = typeof(string).ToString();
			ZDOCKField.Index = 23;
			fields.Add(ZDOCKField);
			 
			DataSchemaField ZYSFYField = new DataSchemaField();
			ZYSFYField.Name = "ZYSFY";
			ZYSFYField.Type = typeof(decimal).ToString();
			ZYSFYField.Index = 24;
			fields.Add(ZYSFYField);
			 
			DataSchemaField LGRADField = new DataSchemaField();
			LGRADField.Name = "LGRAD";
			LGRADField.Type = typeof(decimal).ToString();
			LGRADField.Index = 25;
			fields.Add(LGRADField);
			 
			DataSchemaField EISBEField = new DataSchemaField();
			EISBEField.Name = "EISBE";
			EISBEField.Type = typeof(decimal).ToString();
			EISBEField.Index = 26;
			fields.Add(EISBEField);
			 
			DataSchemaField MINBEField = new DataSchemaField();
			MINBEField.Name = "MINBE";
			MINBEField.Type = typeof(decimal).ToString();
			MINBEField.Index = 27;
			fields.Add(MINBEField);
			 
			DataSchemaField MSTAEField = new DataSchemaField();
			MSTAEField.Name = "MSTAE";
			MSTAEField.Type = typeof(string).ToString();
			MSTAEField.Index = 28;
			fields.Add(MSTAEField);
			 
			DataSchemaField LOGICAL_PKField = new DataSchemaField();
			LOGICAL_PKField.Name = "LOGICAL_PK";
			LOGICAL_PKField.Type = typeof(string).ToString();
			LOGICAL_PKField.Index = 29;
			fields.Add(LOGICAL_PKField);
			 
			DataSchemaField SPRASField = new DataSchemaField();
			SPRASField.Name = "SPRAS";
			SPRASField.Type = typeof(string).ToString();
			SPRASField.Index = 30;
			fields.Add(SPRASField);
			 
			DataSchemaField FLAGField = new DataSchemaField();
			FLAGField.Name = "FLAG";
			FLAGField.Type = typeof(bool).ToString();
			FLAGField.Index = 31;
			fields.Add(FLAGField);
			 
			DataSchemaField ABCField = new DataSchemaField();
			ABCField.Name = "ABC";
			ABCField.Type = typeof(string).ToString();
			ABCField.Index = 32;
			fields.Add(ABCField);
			 
			DataSchemaField PROCESS_FLAGField = new DataSchemaField();
			PROCESS_FLAGField.Name = "PROCESS_FLAG";
			PROCESS_FLAGField.Type = typeof(int).ToString();
			PROCESS_FLAGField.Index = 33;
			fields.Add(PROCESS_FLAGField);
			 
			DataSchemaField PROCESS_TIMEField = new DataSchemaField();
			PROCESS_TIMEField.Name = "PROCESS_TIME";
			PROCESS_TIMEField.Type = typeof(DateTime).ToString();
			PROCESS_TIMEField.Index = 34;
			fields.Add(PROCESS_TIMEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 35;
			fields.Add(COMMENTSField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 36;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 37;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 38;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 39;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 40;
			fields.Add(MODIFY_DATEField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public Guid? LogFid{ get;set; }		
				
		[DataMember]
		public string Werks{ get;set; }		
				
		[DataMember]
		public string Matnr{ get;set; }		
				
		[DataMember]
		public string MaktxEn{ get;set; }		
				
		[DataMember]
		public string MaktxZh{ get;set; }		
				
		[DataMember]
		public string Meins{ get;set; }		
				
		[DataMember]
		public string Mtart{ get;set; }		
				
		[DataMember]
		public decimal? Brgew{ get;set; }		
				
		[DataMember]
		public string Ekgrp{ get;set; }		
				
		[DataMember]
		public string Zysqjc{ get;set; }		
				
		[DataMember]
		public decimal? Bstrf{ get;set; }		
				
		[DataMember]
		public decimal? Zysbz{ get;set; }		
				
		[DataMember]
		public string Zxbqjc{ get;set; }		
				
		[DataMember]
		public int? Zxbqjq{ get;set; }		
				
		[DataMember]
		public decimal? Zxbbz{ get;set; }		
				
		[DataMember]
		public string Dismm{ get;set; }		
				
		[DataMember]
		public string Dispo{ get;set; }		
				
		[DataMember]
		public string Disgr{ get;set; }		
				
		[DataMember]
		public string Beskz{ get;set; }		
				
		[DataMember]
		public decimal? Bstmi{ get;set; }		
				
		[DataMember]
		public int? Plifz{ get;set; }		
				
		[DataMember]
		public string Zdock{ get;set; }		
				
		[DataMember]
		public decimal? Zysfy{ get;set; }		
				
		[DataMember]
		public decimal? Lgrad{ get;set; }		
				
		[DataMember]
		public decimal? Eisbe{ get;set; }		
				
		[DataMember]
		public decimal? Minbe{ get;set; }		
				
		[DataMember]
		public string Mstae{ get;set; }		
				
		[DataMember]
		public string LogicalPk{ get;set; }		
				
		[DataMember]
		public string Spras{ get;set; }		
				
				
		private bool? _Flag = false;
		
		[DataMember]	
		public bool? Flag
		{
			get
			{
				return _Flag;
			}
			set
			{
				_Flag = value;
			}
		}
				
				
		[DataMember]
		public string Abc{ get;set; }		
				
		[DataMember]
		public int? ProcessFlag{ get;set; }		
				
		[DataMember]
		public DateTime? ProcessTime{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
				
		private bool _ValidFlag = true;
		
		[DataMember]	
		public bool ValidFlag
		{
			get
			{
				return _ValidFlag;
			}
			set
			{
				_ValidFlag = value;
			}
		}
				
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			SapPartsInfo info = new SapPartsInfo();

			info.Id = this.Id;
			info.Fid = this.Fid;
			info.LogFid = this.LogFid;
			info.Werks = this.Werks;
			info.Matnr = this.Matnr;
			info.MaktxEn = this.MaktxEn;
			info.MaktxZh = this.MaktxZh;
			info.Meins = this.Meins;
			info.Mtart = this.Mtart;
			info.Brgew = this.Brgew;
			info.Ekgrp = this.Ekgrp;
			info.Zysqjc = this.Zysqjc;
			info.Bstrf = this.Bstrf;
			info.Zysbz = this.Zysbz;
			info.Zxbqjc = this.Zxbqjc;
			info.Zxbqjq = this.Zxbqjq;
			info.Zxbbz = this.Zxbbz;
			info.Dismm = this.Dismm;
			info.Dispo = this.Dispo;
			info.Disgr = this.Disgr;
			info.Beskz = this.Beskz;
			info.Bstmi = this.Bstmi;
			info.Plifz = this.Plifz;
			info.Zdock = this.Zdock;
			info.Zysfy = this.Zysfy;
			info.Lgrad = this.Lgrad;
			info.Eisbe = this.Eisbe;
			info.Minbe = this.Minbe;
			info.Mstae = this.Mstae;
			info.LogicalPk = this.LogicalPk;
			info.Spras = this.Spras;
			info.Flag = this.Flag;
			info.Abc = this.Abc;
			info.ProcessFlag = this.ProcessFlag;
			info.ProcessTime = this.ProcessTime;
			info.Comments = this.Comments;
			info.ValidFlag = this.ValidFlag;
			info.CreateUser = this.CreateUser;
			info.CreateDate = this.CreateDate;
			info.ModifyUser = this.ModifyUser;
			info.ModifyDate = this.ModifyDate;
			return info;			
		}
		 
		public SapPartsInfo Clone()
		{
			return ((ICloneable) this).Clone() as SapPartsInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// SapPartsInfoCollection对应表[TI_IFM_SAP_PARTS]
    /// </summary>
	public partial class SapPartsInfoCollection : BusinessObjectCollection<SapPartsInfo>
	{
		public SapPartsInfoCollection():base("TI_IFM_SAP_PARTS"){}	
	}
}
