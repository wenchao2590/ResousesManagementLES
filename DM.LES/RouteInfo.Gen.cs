#region Declaim
//---------------------------------------------------------------------------
// Name:		RouteInfo
// Function: 	Expose data in table Route from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// RouteInfo对应表[TM_BAS_ROUTE]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class RouteInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public RouteInfo( 
					string aRoute,

					string aRouteName,

					int aRouteType,

					string aPlant,

					string aPlantZone,

					string aWorkshop,

					string aAssemblyLine,

					int aRouteCombinationLimit,

					string aZone,

					string aComments,

					bool aValidFlag,

					DateTime aCreateDate,

					long aId,

					string aModifyUser,

					Guid aFid,

					DateTime aModifyDate,

					string aCreateUser

				 
		) : this()
		{
			 
			Route = aRoute;
		 
			RouteName = aRouteName;
		 
			RouteType = aRouteType;
		 
			Plant = aPlant;
		 
			PlantZone = aPlantZone;
		 
			Workshop = aWorkshop;
		 
			AssemblyLine = aAssemblyLine;
		 
			RouteCombinationLimit = aRouteCombinationLimit;
		 
			Zone = aZone;
		 
			Comments = aComments;
		 
			ValidFlag = aValidFlag;
		 
			CreateDate = aCreateDate;
		 
			Id = aId;
		 
			ModifyUser = aModifyUser;
		 
			Fid = aFid;
		 
			ModifyDate = aModifyDate;
		 
			CreateUser = aCreateUser;
		}
		
		public RouteInfo():base("TM_BAS_ROUTE")
		{
			List<string> keys = new List<string>();
			             			keys.Add("ID");    _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField ROUTEField = new DataSchemaField();
			ROUTEField.Name = "ROUTE";
			ROUTEField.Type = typeof(string).ToString();
			ROUTEField.Index = 0;
			fields.Add(ROUTEField);
			 
			DataSchemaField ROUTE_NAMEField = new DataSchemaField();
			ROUTE_NAMEField.Name = "ROUTE_NAME";
			ROUTE_NAMEField.Type = typeof(string).ToString();
			ROUTE_NAMEField.Index = 1;
			fields.Add(ROUTE_NAMEField);
			 
			DataSchemaField ROUTE_TYPEField = new DataSchemaField();
			ROUTE_TYPEField.Name = "ROUTE_TYPE";
			ROUTE_TYPEField.Type = typeof(int).ToString();
			ROUTE_TYPEField.Index = 2;
			fields.Add(ROUTE_TYPEField);
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 3;
			fields.Add(PLANTField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 4;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 5;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 6;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField ROUTE_COMBINATION_LIMITField = new DataSchemaField();
			ROUTE_COMBINATION_LIMITField.Name = "ROUTE_COMBINATION_LIMIT";
			ROUTE_COMBINATION_LIMITField.Type = typeof(int).ToString();
			ROUTE_COMBINATION_LIMITField.Index = 7;
			fields.Add(ROUTE_COMBINATION_LIMITField);
			 
			DataSchemaField ZONEField = new DataSchemaField();
			ZONEField.Name = "ZONE";
			ZONEField.Type = typeof(string).ToString();
			ZONEField.Index = 8;
			fields.Add(ZONEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 9;
			fields.Add(COMMENTSField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 10;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 11;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 12;
			fields.Add(IDField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 13;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 14;
			fields.Add(FIDField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 15;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 16;
			fields.Add(CREATE_USERField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Route{ get;set; }		
				
		[DataMember]
		public string RouteName{ get;set; }		
				
		[DataMember]
		public int? RouteType{ get;set; }		
				
		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public int? RouteCombinationLimit{ get;set; }		
				
		[DataMember]
		public string Zone{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
				
		private bool? _ValidFlag = true;
		
		[DataMember]	
		public bool? ValidFlag
		{
			get
			{
				return _ValidFlag;
			}
			set
			{
				_ValidFlag = value;
			}
		}
				
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			RouteInfo info = new RouteInfo();

			info.Route = this.Route;
			info.RouteName = this.RouteName;
			info.RouteType = this.RouteType;
			info.Plant = this.Plant;
			info.PlantZone = this.PlantZone;
			info.Workshop = this.Workshop;
			info.AssemblyLine = this.AssemblyLine;
			info.RouteCombinationLimit = this.RouteCombinationLimit;
			info.Zone = this.Zone;
			info.Comments = this.Comments;
			info.ValidFlag = this.ValidFlag;
			info.CreateDate = this.CreateDate;
			info.Id = this.Id;
			info.ModifyUser = this.ModifyUser;
			info.Fid = this.Fid;
			info.ModifyDate = this.ModifyDate;
			info.CreateUser = this.CreateUser;
			return info;			
		}
		 
		public RouteInfo Clone()
		{
			return ((ICloneable) this).Clone() as RouteInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// RouteInfoCollection对应表[TM_BAS_ROUTE]
    /// </summary>
	public partial class RouteInfoCollection : BusinessObjectCollection<RouteInfo>
	{
		public RouteInfoCollection():base("TM_BAS_ROUTE"){}	
	}
}
