<#@ include file="$(SolutionDir)\Reference\DBEntity.SQLServer.ttinclude" #> 
<#@ output extension=".txt" #> 
<#	  
	var tableNames = "TM_BAS_QERP_MAINTAIN_PARTS";	
	var MouldName = "LES";
	var tableSchema = "LES";
	var NameSpace = "DAL." + MouldName; 
	var lcTableName_Up = "";  
		if(tableNames.StartsWith("1"))return ""; 
	//Output File Path
	var outputFilePath =  Path.GetDirectoryName(Host.TemplateFile);
	                   
	var manager = Manager.Create(Host, GenerationEnvironment);
	var dbExporter = new DBExporter(); 
    var entities = dbExporter.LoadEntities(tableNames.Split(';')); 

    foreach(Entity tbl in entities){  

		 if(!tableNames.Split(';').Contains(tbl.Name))
			{
					continue;
			}

	 

		//表名按规则转换
		lcTableName_Up = Helper.TableNameToPascal(tbl.Name.ToLower());
		//非指定表明 或表名不符合转换规则 不生成类代码
 
		  if(string.IsNullOrEmpty(lcTableName_Up))
			continue;

 if(string.IsNullOrEmpty(tableNames)) break;
		manager.StartNewFile(lcTableName_Up + "DAL.Gen.cs", outputFilePath);
#>
#region Declaim
//---------------------------------------------------------------------------
// Name:		<#= Helper.TableNameToPascal(tbl.Name) #>DAL
// Function: 	Expose data in table <#= tbl.Name #> from database as business object to LES system.
// Tool:		T4 
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace

using DM.<#= MouldName #>;
using Infrustructure;
using Infrustructure.Data;
using Infrustructure.Utilities;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System;
using Infrustructure.Extensions;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
#endregion

namespace <#= NameSpace #> 
{     
	/// <summary>
    /// <#= lcTableName_Up #>DAL对应表[<#= tbl.Name #>]
    /// </summary>
    public partial class <#=lcTableName_Up #>DAL : BusinessObjectProvider<<#=lcTableName_Up #>Info>
	{
		public <#=lcTableName_Up #>DAL():base("DM.<#=MouldName#>"){}

<# bool logicDeleteFlag = false;var logicValidSql = "1=1"; foreach(Column col in tbl.Columns){ if(col.Name.ToLower()=="valid_flag") {logicDeleteFlag=true;logicValidSql="[VALID_FLAG] = 1";} } #>
<# var isIdentity = false;var identityDataType = "bool"; foreach(Column col in tbl.Columns){ if(col.IsIdentity){ isIdentity=true; identityDataType=Helper.GetSysType(col.DataType);} } #>
<# var keyField =""; foreach(Column col in tbl.Columns){ if(col.IsPrimaryKey) keyField=col.Name; } if(keyField.Length==0) keyField = "nid"; #>
<# var whereStr=""; foreach(Column col in tbl.Columns){ if(col.IsPrimaryKey) whereStr+=" AND "+col.Name+" =@"+col.Name; } if(whereStr.Length>3) whereStr="WHERE "+ logicValidSql + " " + whereStr; #>
<# var selectStr=""; int length=tbl.Columns.ToList().Count; var index=0; 
		foreach(Column col in tbl.Columns){
			if(index!=length-1) 
			selectStr+= (col.Name  +" AS "+ Helper.ConvertToPascal(col.Name.ToLower())) + ",\r\n\t\t\t\t"; 
			else 
			selectStr+=( col.Name +" AS "+  Helper.ConvertToPascal(col.Name.ToLower())) + "\t\t\t\t" ; index++;}  #>
<# var insertStr=""; length=tbl.Columns.ToList().Count; index=0; foreach(Column col in tbl.Columns){ if(!col.IsIdentity)  { if(index!=length-1) insertStr+= col.Name + ",\r\n\t\t\t\t"; else insertStr+= col.Name + "\t\t\t\t" ;} index++;}  #>
<# var valuesStr=""; index=0; foreach(Column col in tbl.Columns){if(!col.IsIdentity) {if(index!=length-1) valuesStr+= (col.Name == "CREATE_DATE"?"GETDATE(),\r\n\t\t\t\t":("@"+col.Name + ",\r\n\t\t\t\t")) ;  else valuesStr+=(col.Name == "CREATE_DATE"?"GETDATE()\t\t\t\t":("@"+col.Name + "\t\t\t\t")); } index++; } #>
<# var setStr=""; index=0; foreach(Column col in tbl.Columns){ if(!col.IsIdentity) { if(index!=length-1) setStr+=col.Name+"=@"+col.Name+",\r\n\t\t\t\t" ; else setStr+=col.Name+"=@"+col.Name + "\t\t\t\t"; } index++;}  #>
<# var paramStr=""; length=0; foreach(Column col in tbl.Columns){  if(col.IsPrimaryKey) length++; }  index=0; foreach(Column col in tbl.Columns){  if(col.IsPrimaryKey) { if(index!=length-1) paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) + ",\r\n\t\t\t\t"; else paramStr+= Helper.GetSysType(col.DataType) + " a" + Helper.ConvertToPascal(col.Name) ; index++; } }  #>
	 
		 
		#region Access Methods
		 
		<# if(paramStr.Length>0){ #>/// <summary>
		/// Get <#=lcTableName_Up #>Info
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns> 
		public <#=lcTableName_Up #>Info GetInfo(<#= paramStr #>)
		{
			return this.GetById(aId);
		}<# } #>
   
		/// <summary>
		/// Get data collection
		/// </summary>
		/// <param name="sql">SQL Statement</param>
		/// <returns><#=lcTableName_Up #>Info Collection </returns>
		public List<<#=lcTableName_Up #>Info> GetList(string sql)
		{
		    return this.EfGetList(sql);
		}		
  
		/// <summary>
		/// Add
		/// </summary>
		/// <param name="info"> info</param>
		public <#=identityDataType #> Add(<#=lcTableName_Up #>Info info)
		{ 
			 return this.Insert(info); 
		}
 
		/// <summary>
		/// Update
		/// </summary>
		/// <param name="info">info</param>
		public int Update(<#=lcTableName_Up #>Info info)
		{
			   return this.EfUpdate(info);
		}		
		<# if(paramStr.Length>0){ #>/// <summary>
		/// Delete
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns>
		public int Delete(<#= paramStr #>)
		{
			 return this.EfDelete(aId);
		}<# } #>
<# if(paramStr.Length>0&&logicDeleteFlag){ #>
		
		/// <summary>
		/// LogciDelete
		/// </summary>
		/// <param name="<#= keyField #>"><#=lcTableName_Up #>Info Primary key </param>
		/// <returns></returns>
		public int LogicDelete(<#if(paramStr.Length>0) #><#= paramStr #>, string loginUser)
		{
			return this.EfLogicDelete(aId, loginUser);
		}<# } #>

 
		#endregion
		  
		#region Helpers   
	  
		private static <#=lcTableName_Up #>Info Create<#=lcTableName_Up #>Info(IDataReader rdr)
		{ 
			return rdr.ToEntity<<#=lcTableName_Up #>Info>();
		}
		
		#endregion
	}
}
<#   
		manager.EndBlock();		
    }

	manager.Process(true); 
#>
