#region Declaim
//---------------------------------------------------------------------------
// Name:		DockInfo
// Function: 	Expose data in table Dock from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// DockInfo对应表[TM_BAS_DOCK]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class DockInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public DockInfo( 
					string aPlant,

					int aAreaId,

					string aAssemblyLine,

					string aDock,

					string aDockName,

					string aWmNo,

					string aPlantZone,

					string aWorkshop,

					int aIsUrgent,

					string aComments,

					string aCreateUser,

					DateTime aCreateDate,

					string aModifyUser,

					DateTime aModifyDate,

					long aId,

					bool aValidFlag,

					Guid aFid

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			AreaId = aAreaId;
		 
			AssemblyLine = aAssemblyLine;
		 
			Dock = aDock;
		 
			DockName = aDockName;
		 
			WmNo = aWmNo;
		 
			PlantZone = aPlantZone;
		 
			Workshop = aWorkshop;
		 
			IsUrgent = aIsUrgent;
		 
			Comments = aComments;
		 
			CreateUser = aCreateUser;
		 
			CreateDate = aCreateDate;
		 
			ModifyUser = aModifyUser;
		 
			ModifyDate = aModifyDate;
		 
			Id = aId;
		 
			ValidFlag = aValidFlag;
		 
			Fid = aFid;
		}
		
		public DockInfo():base("TM_BAS_DOCK")
		{
			List<string> keys = new List<string>();
			               			keys.Add("ID");  _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField AREA_IDField = new DataSchemaField();
			AREA_IDField.Name = "AREA_ID";
			AREA_IDField.Type = typeof(int).ToString();
			AREA_IDField.Index = 1;
			fields.Add(AREA_IDField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 2;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField DOCKField = new DataSchemaField();
			DOCKField.Name = "DOCK";
			DOCKField.Type = typeof(string).ToString();
			DOCKField.Index = 3;
			fields.Add(DOCKField);
			 
			DataSchemaField DOCK_NAMEField = new DataSchemaField();
			DOCK_NAMEField.Name = "DOCK_NAME";
			DOCK_NAMEField.Type = typeof(string).ToString();
			DOCK_NAMEField.Index = 4;
			fields.Add(DOCK_NAMEField);
			 
			DataSchemaField WM_NOField = new DataSchemaField();
			WM_NOField.Name = "WM_NO";
			WM_NOField.Type = typeof(string).ToString();
			WM_NOField.Index = 5;
			fields.Add(WM_NOField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 6;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 7;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField IS_URGENTField = new DataSchemaField();
			IS_URGENTField.Name = "IS_URGENT";
			IS_URGENTField.Type = typeof(int).ToString();
			IS_URGENTField.Index = 8;
			fields.Add(IS_URGENTField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 9;
			fields.Add(COMMENTSField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 10;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 11;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 12;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 13;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 14;
			fields.Add(IDField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 15;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 16;
			fields.Add(FIDField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public int? AreaId{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string Dock{ get;set; }		
				
		[DataMember]
		public string DockName{ get;set; }		
				
		[DataMember]
		public string WmNo{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public int? IsUrgent{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
				
		private bool? _ValidFlag = true;
		
		[DataMember]	
		public bool? ValidFlag
		{
			get
			{
				return _ValidFlag;
			}
			set
			{
				_ValidFlag = value;
			}
		}
				
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			DockInfo info = new DockInfo();

			info.Plant = this.Plant;
			info.AreaId = this.AreaId;
			info.AssemblyLine = this.AssemblyLine;
			info.Dock = this.Dock;
			info.DockName = this.DockName;
			info.WmNo = this.WmNo;
			info.PlantZone = this.PlantZone;
			info.Workshop = this.Workshop;
			info.IsUrgent = this.IsUrgent;
			info.Comments = this.Comments;
			info.CreateUser = this.CreateUser;
			info.CreateDate = this.CreateDate;
			info.ModifyUser = this.ModifyUser;
			info.ModifyDate = this.ModifyDate;
			info.Id = this.Id;
			info.ValidFlag = this.ValidFlag;
			info.Fid = this.Fid;
			return info;			
		}
		 
		public DockInfo Clone()
		{
			return ((ICloneable) this).Clone() as DockInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// DockInfoCollection对应表[TM_BAS_DOCK]
    /// </summary>
	public partial class DockInfoCollection : BusinessObjectCollection<DockInfo>
	{
		public DockInfoCollection():base("TM_BAS_DOCK"){}	
	}
}
