#region Declaim
//---------------------------------------------------------------------------
// Name:		VmiSupplierInfo
// Function: 	Expose data in table VmiSupplier from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// VmiSupplierInfo对应表[TM_BAS_VMI_SUPPLIER]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class VmiSupplierInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public VmiSupplierInfo( 
					string aPlant,

					string aWmNo,

					string aZoneNo,

					string aSupplierNum,

					string aSupplierName,

					string aComments,

					bool aAsnFlag,

					bool aVmiFlag,

					string aCreateUser,

					DateTime aModifyDate,

					long aId,

					DateTime aCreateDate,

					Guid aFid,

					string aModifyUser,

					bool aValidFlag

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			WmNo = aWmNo;
		 
			ZoneNo = aZoneNo;
		 
			SupplierNum = aSupplierNum;
		 
			SupplierName = aSupplierName;
		 
			Comments = aComments;
		 
			AsnFlag = aAsnFlag;
		 
			VmiFlag = aVmiFlag;
		 
			CreateUser = aCreateUser;
		 
			ModifyDate = aModifyDate;
		 
			Id = aId;
		 
			CreateDate = aCreateDate;
		 
			Fid = aFid;
		 
			ModifyUser = aModifyUser;
		 
			ValidFlag = aValidFlag;
		}
		
		public VmiSupplierInfo():base("TM_BAS_VMI_SUPPLIER")
		{
			List<string> keys = new List<string>();
			           			keys.Add("ID");    _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField WM_NOField = new DataSchemaField();
			WM_NOField.Name = "WM_NO";
			WM_NOField.Type = typeof(string).ToString();
			WM_NOField.Index = 1;
			fields.Add(WM_NOField);
			 
			DataSchemaField ZONE_NOField = new DataSchemaField();
			ZONE_NOField.Name = "ZONE_NO";
			ZONE_NOField.Type = typeof(string).ToString();
			ZONE_NOField.Index = 2;
			fields.Add(ZONE_NOField);
			 
			DataSchemaField SUPPLIER_NUMField = new DataSchemaField();
			SUPPLIER_NUMField.Name = "SUPPLIER_NUM";
			SUPPLIER_NUMField.Type = typeof(string).ToString();
			SUPPLIER_NUMField.Index = 3;
			fields.Add(SUPPLIER_NUMField);
			 
			DataSchemaField SUPPLIER_NAMEField = new DataSchemaField();
			SUPPLIER_NAMEField.Name = "SUPPLIER_NAME";
			SUPPLIER_NAMEField.Type = typeof(string).ToString();
			SUPPLIER_NAMEField.Index = 4;
			fields.Add(SUPPLIER_NAMEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 5;
			fields.Add(COMMENTSField);
			 
			DataSchemaField ASN_FLAGField = new DataSchemaField();
			ASN_FLAGField.Name = "ASN_FLAG";
			ASN_FLAGField.Type = typeof(bool).ToString();
			ASN_FLAGField.Index = 6;
			fields.Add(ASN_FLAGField);
			 
			DataSchemaField VMI_FLAGField = new DataSchemaField();
			VMI_FLAGField.Name = "VMI_FLAG";
			VMI_FLAGField.Type = typeof(bool).ToString();
			VMI_FLAGField.Index = 7;
			fields.Add(VMI_FLAGField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 8;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 9;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 10;
			fields.Add(IDField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 11;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 12;
			fields.Add(FIDField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 13;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 14;
			fields.Add(VALID_FLAGField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string WmNo{ get;set; }		
				
		[DataMember]
		public string ZoneNo{ get;set; }		
				
		[DataMember]
		public string SupplierNum{ get;set; }		
				
		[DataMember]
		public string SupplierName{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public bool? AsnFlag{ get;set; }		
				
		[DataMember]
		public bool? VmiFlag{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public DateTime? CreateDate{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public bool? ValidFlag{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			VmiSupplierInfo info = new VmiSupplierInfo();

			info.Plant = this.Plant;
			info.WmNo = this.WmNo;
			info.ZoneNo = this.ZoneNo;
			info.SupplierNum = this.SupplierNum;
			info.SupplierName = this.SupplierName;
			info.Comments = this.Comments;
			info.AsnFlag = this.AsnFlag;
			info.VmiFlag = this.VmiFlag;
			info.CreateUser = this.CreateUser;
			info.ModifyDate = this.ModifyDate;
			info.Id = this.Id;
			info.CreateDate = this.CreateDate;
			info.Fid = this.Fid;
			info.ModifyUser = this.ModifyUser;
			info.ValidFlag = this.ValidFlag;
			return info;			
		}
		 
		public VmiSupplierInfo Clone()
		{
			return ((ICloneable) this).Clone() as VmiSupplierInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// VmiSupplierInfoCollection对应表[TM_BAS_VMI_SUPPLIER]
    /// </summary>
	public partial class VmiSupplierInfoCollection : BusinessObjectCollection<VmiSupplierInfo>
	{
		public VmiSupplierInfoCollection():base("TM_BAS_VMI_SUPPLIER"){}	
	}
}
