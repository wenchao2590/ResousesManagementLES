#region Declaim
//---------------------------------------------------------------------------
// Name:		RegionInfo
// Function: 	Expose data in table Region from database as business object to MES system.
// Tool:		T4
// CreateDate:	2017年11月24日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// RegionInfo对应表[TM_PCS_REGION]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class RegionInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public RegionInfo( 
					int aRegionIdentity,

					string aPlant,

					string aAssemblyLine,

					string aRegionName,

					string aPlantZone,

					string aWorkshop,

					int aRegionSize,

					int aRegionOrder,

					int aPermanentRegion,

					int aRecalculateFlag,

					string aOrderType,

					string aReplaceDcpPoint,

					bool aIsReplace,

					int aOffset,

					string aComments,

					string aCreateUser,

					DateTime aCreateDate,

					string aUpdateUser,

					DateTime aUpdateDate

				 
		) : this()
		{
			 
			RegionIdentity = aRegionIdentity;
		 
			Plant = aPlant;
		 
			AssemblyLine = aAssemblyLine;
		 
			RegionName = aRegionName;
		 
			PlantZone = aPlantZone;
		 
			Workshop = aWorkshop;
		 
			RegionSize = aRegionSize;
		 
			RegionOrder = aRegionOrder;
		 
			PermanentRegion = aPermanentRegion;
		 
			RecalculateFlag = aRecalculateFlag;
		 
			OrderType = aOrderType;
		 
			ReplaceDcpPoint = aReplaceDcpPoint;
		 
			IsReplace = aIsReplace;
		 
			Offset = aOffset;
		 
			Comments = aComments;
		 
			CreateUser = aCreateUser;
		 
			CreateDate = aCreateDate;
		 
			UpdateUser = aUpdateUser;
		 
			UpdateDate = aUpdateDate;
		}
		
		public RegionInfo():base("TM_PCS_REGION")
		{
			List<string> keys = new List<string>();
			 			keys.Add("REGION_IDENTITY"); 			keys.Add("PLANT"); 			keys.Add("ASSEMBLY_LINE");                _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField REGION_IDENTITYField = new DataSchemaField();
			REGION_IDENTITYField.Name = "REGION_IDENTITY";
			REGION_IDENTITYField.Type = typeof(int).ToString();
			REGION_IDENTITYField.Index = 0;
			fields.Add(REGION_IDENTITYField);
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 1;
			fields.Add(PLANTField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 2;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField REGION_NAMEField = new DataSchemaField();
			REGION_NAMEField.Name = "REGION_NAME";
			REGION_NAMEField.Type = typeof(string).ToString();
			REGION_NAMEField.Index = 3;
			fields.Add(REGION_NAMEField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 4;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 5;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField REGION_SIZEField = new DataSchemaField();
			REGION_SIZEField.Name = "REGION_SIZE";
			REGION_SIZEField.Type = typeof(int).ToString();
			REGION_SIZEField.Index = 6;
			fields.Add(REGION_SIZEField);
			 
			DataSchemaField REGION_ORDERField = new DataSchemaField();
			REGION_ORDERField.Name = "REGION_ORDER";
			REGION_ORDERField.Type = typeof(int).ToString();
			REGION_ORDERField.Index = 7;
			fields.Add(REGION_ORDERField);
			 
			DataSchemaField PERMANENT_REGIONField = new DataSchemaField();
			PERMANENT_REGIONField.Name = "PERMANENT_REGION";
			PERMANENT_REGIONField.Type = typeof(int).ToString();
			PERMANENT_REGIONField.Index = 8;
			fields.Add(PERMANENT_REGIONField);
			 
			DataSchemaField RECALCULATE_FLAGField = new DataSchemaField();
			RECALCULATE_FLAGField.Name = "RECALCULATE_FLAG";
			RECALCULATE_FLAGField.Type = typeof(int).ToString();
			RECALCULATE_FLAGField.Index = 9;
			fields.Add(RECALCULATE_FLAGField);
			 
			DataSchemaField ORDER_TYPEField = new DataSchemaField();
			ORDER_TYPEField.Name = "ORDER_TYPE";
			ORDER_TYPEField.Type = typeof(string).ToString();
			ORDER_TYPEField.Index = 10;
			fields.Add(ORDER_TYPEField);
			 
			DataSchemaField REPLACE_DCP_POINTField = new DataSchemaField();
			REPLACE_DCP_POINTField.Name = "REPLACE_DCP_POINT";
			REPLACE_DCP_POINTField.Type = typeof(string).ToString();
			REPLACE_DCP_POINTField.Index = 11;
			fields.Add(REPLACE_DCP_POINTField);
			 
			DataSchemaField IS_REPLACEField = new DataSchemaField();
			IS_REPLACEField.Name = "IS_REPLACE";
			IS_REPLACEField.Type = typeof(bool).ToString();
			IS_REPLACEField.Index = 12;
			fields.Add(IS_REPLACEField);
			 
			DataSchemaField OFFSETField = new DataSchemaField();
			OFFSETField.Name = "OFFSET";
			OFFSETField.Type = typeof(int).ToString();
			OFFSETField.Index = 13;
			fields.Add(OFFSETField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 14;
			fields.Add(COMMENTSField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 15;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 16;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField UPDATE_USERField = new DataSchemaField();
			UPDATE_USERField.Name = "UPDATE_USER";
			UPDATE_USERField.Type = typeof(string).ToString();
			UPDATE_USERField.Index = 17;
			fields.Add(UPDATE_USERField);
			 
			DataSchemaField UPDATE_DATEField = new DataSchemaField();
			UPDATE_DATEField.Name = "UPDATE_DATE";
			UPDATE_DATEField.Type = typeof(DateTime).ToString();
			UPDATE_DATEField.Index = 18;
			fields.Add(UPDATE_DATEField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public int RegionIdentity{ get;set; }		
				
		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string RegionName{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public int? RegionSize{ get;set; }		
				
		[DataMember]
		public int RegionOrder{ get;set; }		
				
		[DataMember]
		public int? PermanentRegion{ get;set; }		
				
		[DataMember]
		public int? RecalculateFlag{ get;set; }		
				
		[DataMember]
		public string OrderType{ get;set; }		
				
		[DataMember]
		public string ReplaceDcpPoint{ get;set; }		
				
		[DataMember]
		public bool? IsReplace{ get;set; }		
				
		[DataMember]
		public int? Offset{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string UpdateUser{ get;set; }		
				
		[DataMember]
		public DateTime? UpdateDate{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			RegionInfo info = new RegionInfo();

			info.RegionIdentity = this.RegionIdentity;
			info.Plant = this.Plant;
			info.AssemblyLine = this.AssemblyLine;
			info.RegionName = this.RegionName;
			info.PlantZone = this.PlantZone;
			info.Workshop = this.Workshop;
			info.RegionSize = this.RegionSize;
			info.RegionOrder = this.RegionOrder;
			info.PermanentRegion = this.PermanentRegion;
			info.RecalculateFlag = this.RecalculateFlag;
			info.OrderType = this.OrderType;
			info.ReplaceDcpPoint = this.ReplaceDcpPoint;
			info.IsReplace = this.IsReplace;
			info.Offset = this.Offset;
			info.Comments = this.Comments;
			info.CreateUser = this.CreateUser;
			info.CreateDate = this.CreateDate;
			info.UpdateUser = this.UpdateUser;
			info.UpdateDate = this.UpdateDate;
			return info;			
		}
		 
		public RegionInfo Clone()
		{
			return ((ICloneable) this).Clone() as RegionInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// RegionInfoCollection对应表[TM_PCS_REGION]
    /// </summary>
	public partial class RegionInfoCollection : BusinessObjectCollection<RegionInfo>
	{
		public RegionInfoCollection():base("TM_PCS_REGION"){}	
	}
}
