#region Declaim
//---------------------------------------------------------------------------
// Name:		WorkshopInfo
// Function: 	Expose data in table Workshop from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年8月21日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// WorkshopInfo对应表[TM_BAS_WORKSHOP]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class WorkshopInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public WorkshopInfo( 
					string aPlant,

					string aWorkshop,

					string aWorkshopName,

					string aComments,

					int aTimeReferenceType,

					int aWorkScheduleType,

					int aWorkshopType,

					DateTime aCreateDate,

					long aId,

					bool aValidFlag,

					string aModifyUser,

					Guid aFid,

					string aCreateUser,

					DateTime aModifyDate

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			Workshop = aWorkshop;
		 
			WorkshopName = aWorkshopName;
		 
			Comments = aComments;
		 
			TimeReferenceType = aTimeReferenceType;
		 
			WorkScheduleType = aWorkScheduleType;
		 
			WorkshopType = aWorkshopType;
		 
			CreateDate = aCreateDate;
		 
			Id = aId;
		 
			ValidFlag = aValidFlag;
		 
			ModifyUser = aModifyUser;
		 
			Fid = aFid;
		 
			CreateUser = aCreateUser;
		 
			ModifyDate = aModifyDate;
		}
		
		public WorkshopInfo():base("TM_BAS_WORKSHOP")
		{
			List<string> keys = new List<string>();
			         			keys.Add("ID");     _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 1;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField WORKSHOP_NAMEField = new DataSchemaField();
			WORKSHOP_NAMEField.Name = "WORKSHOP_NAME";
			WORKSHOP_NAMEField.Type = typeof(string).ToString();
			WORKSHOP_NAMEField.Index = 2;
			fields.Add(WORKSHOP_NAMEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 3;
			fields.Add(COMMENTSField);
			 
			DataSchemaField TIME_REFERENCE_TYPEField = new DataSchemaField();
			TIME_REFERENCE_TYPEField.Name = "TIME_REFERENCE_TYPE";
			TIME_REFERENCE_TYPEField.Type = typeof(int).ToString();
			TIME_REFERENCE_TYPEField.Index = 4;
			fields.Add(TIME_REFERENCE_TYPEField);
			 
			DataSchemaField WORK_SCHEDULE_TYPEField = new DataSchemaField();
			WORK_SCHEDULE_TYPEField.Name = "WORK_SCHEDULE_TYPE";
			WORK_SCHEDULE_TYPEField.Type = typeof(int).ToString();
			WORK_SCHEDULE_TYPEField.Index = 5;
			fields.Add(WORK_SCHEDULE_TYPEField);
			 
			DataSchemaField WORKSHOP_TYPEField = new DataSchemaField();
			WORKSHOP_TYPEField.Name = "WORKSHOP_TYPE";
			WORKSHOP_TYPEField.Type = typeof(int).ToString();
			WORKSHOP_TYPEField.Index = 6;
			fields.Add(WORKSHOP_TYPEField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 7;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 8;
			fields.Add(IDField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 9;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 10;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 11;
			fields.Add(FIDField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 12;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 13;
			fields.Add(MODIFY_DATEField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string WorkshopName{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public int? TimeReferenceType{ get;set; }		
				
		[DataMember]
		public int? WorkScheduleType{ get;set; }		
				
		[DataMember]
		public int? WorkshopType{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
				
		private bool? _ValidFlag = true;
		
		[DataMember]	
		public bool? ValidFlag
		{
			get
			{
				return _ValidFlag;
			}
			set
			{
				_ValidFlag = value;
			}
		}
				
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			WorkshopInfo info = new WorkshopInfo();

			info.Plant = this.Plant;
			info.Workshop = this.Workshop;
			info.WorkshopName = this.WorkshopName;
			info.Comments = this.Comments;
			info.TimeReferenceType = this.TimeReferenceType;
			info.WorkScheduleType = this.WorkScheduleType;
			info.WorkshopType = this.WorkshopType;
			info.CreateDate = this.CreateDate;
			info.Id = this.Id;
			info.ValidFlag = this.ValidFlag;
			info.ModifyUser = this.ModifyUser;
			info.Fid = this.Fid;
			info.CreateUser = this.CreateUser;
			info.ModifyDate = this.ModifyDate;
			return info;			
		}
		 
		public WorkshopInfo Clone()
		{
			return ((ICloneable) this).Clone() as WorkshopInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// WorkshopInfoCollection对应表[TM_BAS_WORKSHOP]
    /// </summary>
	public partial class WorkshopInfoCollection : BusinessObjectCollection<WorkshopInfo>
	{
		public WorkshopInfoCollection():base("TM_BAS_WORKSHOP"){}	
	}
}
