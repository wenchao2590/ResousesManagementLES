#region Declaim
//---------------------------------------------------------------------------
// Name:		WorkScheduleInfo
// Function: 	Expose data in table WorkSchedule from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// WorkScheduleInfo对应表[TM_BAS_WORK_SCHEDULE]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class WorkScheduleInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public WorkScheduleInfo( 
					string aPlant,

					string aWorkshop,

					string aAssemblyLine,

					DateTime aDate,

					int aDayType,

					int aShift,

					DateTime aBeginTime,

					DateTime aEndTime,

					bool aAllowOverride,

					bool aValidFlag,

					DateTime aModifyDate,

					string aCreateUser,

					long aId,

					DateTime aCreateDate,

					string aModifyUser

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			Workshop = aWorkshop;
		 
			AssemblyLine = aAssemblyLine;
		 
			Date = aDate;
		 
			DayType = aDayType;
		 
			Shift = aShift;
		 
			BeginTime = aBeginTime;
		 
			EndTime = aEndTime;
		 
			AllowOverride = aAllowOverride;
		 
			ValidFlag = aValidFlag;
		 
			ModifyDate = aModifyDate;
		 
			CreateUser = aCreateUser;
		 
			Id = aId;
		 
			CreateDate = aCreateDate;
		 
			ModifyUser = aModifyUser;
		}
		
		public WorkScheduleInfo():base("TM_BAS_WORK_SCHEDULE")
		{
			List<string> keys = new List<string>();
			             			keys.Add("ID");  _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 1;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 2;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField DATEField = new DataSchemaField();
			DATEField.Name = "DATE";
			DATEField.Type = typeof(DateTime).ToString();
			DATEField.Index = 3;
			fields.Add(DATEField);
			 
			DataSchemaField DAY_TYPEField = new DataSchemaField();
			DAY_TYPEField.Name = "DAY_TYPE";
			DAY_TYPEField.Type = typeof(int).ToString();
			DAY_TYPEField.Index = 4;
			fields.Add(DAY_TYPEField);
			 
			DataSchemaField SHIFTField = new DataSchemaField();
			SHIFTField.Name = "SHIFT";
			SHIFTField.Type = typeof(int).ToString();
			SHIFTField.Index = 5;
			fields.Add(SHIFTField);
			 
			DataSchemaField BEGIN_TIMEField = new DataSchemaField();
			BEGIN_TIMEField.Name = "BEGIN_TIME";
			BEGIN_TIMEField.Type = typeof(DateTime).ToString();
			BEGIN_TIMEField.Index = 6;
			fields.Add(BEGIN_TIMEField);
			 
			DataSchemaField END_TIMEField = new DataSchemaField();
			END_TIMEField.Name = "END_TIME";
			END_TIMEField.Type = typeof(DateTime).ToString();
			END_TIMEField.Index = 7;
			fields.Add(END_TIMEField);
			 
			DataSchemaField ALLOW_OVERRIDEField = new DataSchemaField();
			ALLOW_OVERRIDEField.Name = "ALLOW_OVERRIDE";
			ALLOW_OVERRIDEField.Type = typeof(bool).ToString();
			ALLOW_OVERRIDEField.Index = 8;
			fields.Add(ALLOW_OVERRIDEField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 9;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 10;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 11;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 12;
			fields.Add(IDField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 13;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 14;
			fields.Add(MODIFY_USERField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public DateTime? Date{ get;set; }		
				
		[DataMember]
		public int? DayType{ get;set; }		
				
		[DataMember]
		public int? Shift{ get;set; }		
				
		[DataMember]
		public DateTime? BeginTime{ get;set; }		
				
		[DataMember]
		public DateTime? EndTime{ get;set; }		
				
		[DataMember]
		public bool? AllowOverride{ get;set; }		
				
		[DataMember]
		public bool? ValidFlag{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			WorkScheduleInfo info = new WorkScheduleInfo();

			info.Plant = this.Plant;
			info.Workshop = this.Workshop;
			info.AssemblyLine = this.AssemblyLine;
			info.Date = this.Date;
			info.DayType = this.DayType;
			info.Shift = this.Shift;
			info.BeginTime = this.BeginTime;
			info.EndTime = this.EndTime;
			info.AllowOverride = this.AllowOverride;
			info.ValidFlag = this.ValidFlag;
			info.ModifyDate = this.ModifyDate;
			info.CreateUser = this.CreateUser;
			info.Id = this.Id;
			info.CreateDate = this.CreateDate;
			info.ModifyUser = this.ModifyUser;
			return info;			
		}
		 
		public WorkScheduleInfo Clone()
		{
			return ((ICloneable) this).Clone() as WorkScheduleInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// WorkScheduleInfoCollection对应表[TM_BAS_WORK_SCHEDULE]
    /// </summary>
	public partial class WorkScheduleInfoCollection : BusinessObjectCollection<WorkScheduleInfo>
	{
		public WorkScheduleInfoCollection():base("TM_BAS_WORK_SCHEDULE"){}	
	}
}
