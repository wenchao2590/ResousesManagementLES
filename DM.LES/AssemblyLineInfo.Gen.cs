#region Declaim
//---------------------------------------------------------------------------
// Name:		AssemblyLineInfo
// Function: 	Expose data in table AssemblyLine from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年8月21日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// AssemblyLineInfo对应表[TM_BAS_ASSEMBLY_LINE]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class AssemblyLineInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public AssemblyLineInfo( 
					string aPlant,

					string aWorkshop,

					string aAssemblyLine,

					string aAssemblyLineName,

					string aAssemblyLineNickname,

					string aAddress,

					int aAssemblyLineType,

					string aAssemblyLinePulse,

					int aJph,

					int aTimeReferenceType,

					string aCmanager,

					string aEmanager,

					int aWorkScheduleType,

					string aFisLineCode,

					string aPlantZone,

					string aSapAssemblyLine,

					string aComments,

					string aModifyUser,

					string aCreateUser,

					long aId,

					DateTime aModifyDate,

					DateTime aCreateDate,

					Guid aFid,

					bool aValidFlag

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			Workshop = aWorkshop;
		 
			AssemblyLine = aAssemblyLine;
		 
			AssemblyLineName = aAssemblyLineName;
		 
			AssemblyLineNickname = aAssemblyLineNickname;
		 
			Address = aAddress;
		 
			AssemblyLineType = aAssemblyLineType;
		 
			AssemblyLinePulse = aAssemblyLinePulse;
		 
			Jph = aJph;
		 
			TimeReferenceType = aTimeReferenceType;
		 
			Cmanager = aCmanager;
		 
			Emanager = aEmanager;
		 
			WorkScheduleType = aWorkScheduleType;
		 
			FisLineCode = aFisLineCode;
		 
			PlantZone = aPlantZone;
		 
			SapAssemblyLine = aSapAssemblyLine;
		 
			Comments = aComments;
		 
			ModifyUser = aModifyUser;
		 
			CreateUser = aCreateUser;
		 
			Id = aId;
		 
			ModifyDate = aModifyDate;
		 
			CreateDate = aCreateDate;
		 
			Fid = aFid;
		 
			ValidFlag = aValidFlag;
		}
		
		public AssemblyLineInfo():base("TM_BAS_ASSEMBLY_LINE")
		{
			List<string> keys = new List<string>();
			                    			keys.Add("ID");    _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 1;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 2;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField ASSEMBLY_LINE_NAMEField = new DataSchemaField();
			ASSEMBLY_LINE_NAMEField.Name = "ASSEMBLY_LINE_NAME";
			ASSEMBLY_LINE_NAMEField.Type = typeof(string).ToString();
			ASSEMBLY_LINE_NAMEField.Index = 3;
			fields.Add(ASSEMBLY_LINE_NAMEField);
			 
			DataSchemaField ASSEMBLY_LINE_NICKNAMEField = new DataSchemaField();
			ASSEMBLY_LINE_NICKNAMEField.Name = "ASSEMBLY_LINE_NICKNAME";
			ASSEMBLY_LINE_NICKNAMEField.Type = typeof(string).ToString();
			ASSEMBLY_LINE_NICKNAMEField.Index = 4;
			fields.Add(ASSEMBLY_LINE_NICKNAMEField);
			 
			DataSchemaField ADDRESSField = new DataSchemaField();
			ADDRESSField.Name = "ADDRESS";
			ADDRESSField.Type = typeof(string).ToString();
			ADDRESSField.Index = 5;
			fields.Add(ADDRESSField);
			 
			DataSchemaField ASSEMBLY_LINE_TYPEField = new DataSchemaField();
			ASSEMBLY_LINE_TYPEField.Name = "ASSEMBLY_LINE_TYPE";
			ASSEMBLY_LINE_TYPEField.Type = typeof(int).ToString();
			ASSEMBLY_LINE_TYPEField.Index = 6;
			fields.Add(ASSEMBLY_LINE_TYPEField);
			 
			DataSchemaField ASSEMBLY_LINE_PULSEField = new DataSchemaField();
			ASSEMBLY_LINE_PULSEField.Name = "ASSEMBLY_LINE_PULSE";
			ASSEMBLY_LINE_PULSEField.Type = typeof(string).ToString();
			ASSEMBLY_LINE_PULSEField.Index = 7;
			fields.Add(ASSEMBLY_LINE_PULSEField);
			 
			DataSchemaField JPHField = new DataSchemaField();
			JPHField.Name = "JPH";
			JPHField.Type = typeof(int).ToString();
			JPHField.Index = 8;
			fields.Add(JPHField);
			 
			DataSchemaField TIME_REFERENCE_TYPEField = new DataSchemaField();
			TIME_REFERENCE_TYPEField.Name = "TIME_REFERENCE_TYPE";
			TIME_REFERENCE_TYPEField.Type = typeof(int).ToString();
			TIME_REFERENCE_TYPEField.Index = 9;
			fields.Add(TIME_REFERENCE_TYPEField);
			 
			DataSchemaField CMANAGERField = new DataSchemaField();
			CMANAGERField.Name = "CMANAGER";
			CMANAGERField.Type = typeof(string).ToString();
			CMANAGERField.Index = 10;
			fields.Add(CMANAGERField);
			 
			DataSchemaField EMANAGERField = new DataSchemaField();
			EMANAGERField.Name = "EMANAGER";
			EMANAGERField.Type = typeof(string).ToString();
			EMANAGERField.Index = 11;
			fields.Add(EMANAGERField);
			 
			DataSchemaField WORK_SCHEDULE_TYPEField = new DataSchemaField();
			WORK_SCHEDULE_TYPEField.Name = "WORK_SCHEDULE_TYPE";
			WORK_SCHEDULE_TYPEField.Type = typeof(int).ToString();
			WORK_SCHEDULE_TYPEField.Index = 12;
			fields.Add(WORK_SCHEDULE_TYPEField);
			 
			DataSchemaField FIS_LINE_CODEField = new DataSchemaField();
			FIS_LINE_CODEField.Name = "FIS_LINE_CODE";
			FIS_LINE_CODEField.Type = typeof(string).ToString();
			FIS_LINE_CODEField.Index = 13;
			fields.Add(FIS_LINE_CODEField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 14;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField SAP_ASSEMBLY_LINEField = new DataSchemaField();
			SAP_ASSEMBLY_LINEField.Name = "SAP_ASSEMBLY_LINE";
			SAP_ASSEMBLY_LINEField.Type = typeof(string).ToString();
			SAP_ASSEMBLY_LINEField.Index = 15;
			fields.Add(SAP_ASSEMBLY_LINEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 16;
			fields.Add(COMMENTSField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 17;
			fields.Add(MODIFY_USERField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 18;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 19;
			fields.Add(IDField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 20;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 21;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 22;
			fields.Add(FIDField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 23;
			fields.Add(VALID_FLAGField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string AssemblyLineName{ get;set; }		
				
		[DataMember]
		public string AssemblyLineNickname{ get;set; }		
				
		[DataMember]
		public string Address{ get;set; }		
				
		[DataMember]
		public int? AssemblyLineType{ get;set; }		
				
		[DataMember]
		public string AssemblyLinePulse{ get;set; }		
				
		[DataMember]
		public int? Jph{ get;set; }		
				
		[DataMember]
		public int? TimeReferenceType{ get;set; }		
				
		[DataMember]
		public string Cmanager{ get;set; }		
				
		[DataMember]
		public string Emanager{ get;set; }		
				
		[DataMember]
		public int? WorkScheduleType{ get;set; }		
				
		[DataMember]
		public string FisLineCode{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string SapAssemblyLine{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public bool? ValidFlag{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			AssemblyLineInfo info = new AssemblyLineInfo();

			info.Plant = this.Plant;
			info.Workshop = this.Workshop;
			info.AssemblyLine = this.AssemblyLine;
			info.AssemblyLineName = this.AssemblyLineName;
			info.AssemblyLineNickname = this.AssemblyLineNickname;
			info.Address = this.Address;
			info.AssemblyLineType = this.AssemblyLineType;
			info.AssemblyLinePulse = this.AssemblyLinePulse;
			info.Jph = this.Jph;
			info.TimeReferenceType = this.TimeReferenceType;
			info.Cmanager = this.Cmanager;
			info.Emanager = this.Emanager;
			info.WorkScheduleType = this.WorkScheduleType;
			info.FisLineCode = this.FisLineCode;
			info.PlantZone = this.PlantZone;
			info.SapAssemblyLine = this.SapAssemblyLine;
			info.Comments = this.Comments;
			info.ModifyUser = this.ModifyUser;
			info.CreateUser = this.CreateUser;
			info.Id = this.Id;
			info.ModifyDate = this.ModifyDate;
			info.CreateDate = this.CreateDate;
			info.Fid = this.Fid;
			info.ValidFlag = this.ValidFlag;
			return info;			
		}
		 
		public AssemblyLineInfo Clone()
		{
			return ((ICloneable) this).Clone() as AssemblyLineInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// AssemblyLineInfoCollection对应表[TM_BAS_ASSEMBLY_LINE]
    /// </summary>
	public partial class AssemblyLineInfoCollection : BusinessObjectCollection<AssemblyLineInfo>
	{
		public AssemblyLineInfoCollection():base("TM_BAS_ASSEMBLY_LINE"){}	
	}
}
