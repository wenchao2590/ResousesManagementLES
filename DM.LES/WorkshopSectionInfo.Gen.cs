#region Declaim
//---------------------------------------------------------------------------
// Name:		WorkshopSectionInfo
// Function: 	Expose data in table WorkshopSection from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// WorkshopSectionInfo对应表[TM_BAS_WORKSHOP_SECTION]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class WorkshopSectionInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public WorkshopSectionInfo( 
					string aPlant,

					string aWorkshop,

					string aAssemblyLine,

					string aWorkshopSection,

					string aWorkshopSectionName,

					string aPlantZone,

					string aDescription,

					string aComments,

					DateTime aModifyDate,

					string aCreateUser,

					long aId,

					DateTime aCreateDate,

					Guid aFid,

					bool aValidFlag,

					string aModifyUser

				 
		) : this()
		{
			 
			Plant = aPlant;
		 
			Workshop = aWorkshop;
		 
			AssemblyLine = aAssemblyLine;
		 
			WorkshopSection = aWorkshopSection;
		 
			WorkshopSectionName = aWorkshopSectionName;
		 
			PlantZone = aPlantZone;
		 
			Description = aDescription;
		 
			Comments = aComments;
		 
			ModifyDate = aModifyDate;
		 
			CreateUser = aCreateUser;
		 
			Id = aId;
		 
			CreateDate = aCreateDate;
		 
			Fid = aFid;
		 
			ValidFlag = aValidFlag;
		 
			ModifyUser = aModifyUser;
		}
		
		public WorkshopSectionInfo():base("TM_BAS_WORKSHOP_SECTION")
		{
			List<string> keys = new List<string>();
			           			keys.Add("ID");    _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField PLANTField = new DataSchemaField();
			PLANTField.Name = "PLANT";
			PLANTField.Type = typeof(string).ToString();
			PLANTField.Index = 0;
			fields.Add(PLANTField);
			 
			DataSchemaField WORKSHOPField = new DataSchemaField();
			WORKSHOPField.Name = "WORKSHOP";
			WORKSHOPField.Type = typeof(string).ToString();
			WORKSHOPField.Index = 1;
			fields.Add(WORKSHOPField);
			 
			DataSchemaField ASSEMBLY_LINEField = new DataSchemaField();
			ASSEMBLY_LINEField.Name = "ASSEMBLY_LINE";
			ASSEMBLY_LINEField.Type = typeof(string).ToString();
			ASSEMBLY_LINEField.Index = 2;
			fields.Add(ASSEMBLY_LINEField);
			 
			DataSchemaField WORKSHOP_SECTIONField = new DataSchemaField();
			WORKSHOP_SECTIONField.Name = "WORKSHOP_SECTION";
			WORKSHOP_SECTIONField.Type = typeof(string).ToString();
			WORKSHOP_SECTIONField.Index = 3;
			fields.Add(WORKSHOP_SECTIONField);
			 
			DataSchemaField WORKSHOP_SECTION_NAMEField = new DataSchemaField();
			WORKSHOP_SECTION_NAMEField.Name = "WORKSHOP_SECTION_NAME";
			WORKSHOP_SECTION_NAMEField.Type = typeof(string).ToString();
			WORKSHOP_SECTION_NAMEField.Index = 4;
			fields.Add(WORKSHOP_SECTION_NAMEField);
			 
			DataSchemaField PLANT_ZONEField = new DataSchemaField();
			PLANT_ZONEField.Name = "PLANT_ZONE";
			PLANT_ZONEField.Type = typeof(string).ToString();
			PLANT_ZONEField.Index = 5;
			fields.Add(PLANT_ZONEField);
			 
			DataSchemaField DESCRIPTIONField = new DataSchemaField();
			DESCRIPTIONField.Name = "DESCRIPTION";
			DESCRIPTIONField.Type = typeof(string).ToString();
			DESCRIPTIONField.Index = 6;
			fields.Add(DESCRIPTIONField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 7;
			fields.Add(COMMENTSField);
			 
			DataSchemaField MODIFY_DATEField = new DataSchemaField();
			MODIFY_DATEField.Name = "MODIFY_DATE";
			MODIFY_DATEField.Type = typeof(DateTime).ToString();
			MODIFY_DATEField.Index = 8;
			fields.Add(MODIFY_DATEField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 9;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField IDField = new DataSchemaField();
			IDField.Name = "ID";
			IDField.Type = typeof(long).ToString();
			IDField.Index = 10;
			fields.Add(IDField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 11;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField FIDField = new DataSchemaField();
			FIDField.Name = "FID";
			FIDField.Type = typeof(Guid).ToString();
			FIDField.Index = 12;
			fields.Add(FIDField);
			 
			DataSchemaField VALID_FLAGField = new DataSchemaField();
			VALID_FLAGField.Name = "VALID_FLAG";
			VALID_FLAGField.Type = typeof(bool).ToString();
			VALID_FLAGField.Index = 13;
			fields.Add(VALID_FLAGField);
			 
			DataSchemaField MODIFY_USERField = new DataSchemaField();
			MODIFY_USERField.Name = "MODIFY_USER";
			MODIFY_USERField.Type = typeof(string).ToString();
			MODIFY_USERField.Index = 14;
			fields.Add(MODIFY_USERField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public string Plant{ get;set; }		
				
		[DataMember]
		public string Workshop{ get;set; }		
				
		[DataMember]
		public string AssemblyLine{ get;set; }		
				
		[DataMember]
		public string WorkshopSection{ get;set; }		
				
		[DataMember]
		public string WorkshopSectionName{ get;set; }		
				
		[DataMember]
		public string PlantZone{ get;set; }		
				
		[DataMember]
		public string Description{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public DateTime? ModifyDate{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public long Id{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public Guid? Fid{ get;set; }		
				
		[DataMember]
		public bool? ValidFlag{ get;set; }		
				
		[DataMember]
		public string ModifyUser{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			WorkshopSectionInfo info = new WorkshopSectionInfo();

			info.Plant = this.Plant;
			info.Workshop = this.Workshop;
			info.AssemblyLine = this.AssemblyLine;
			info.WorkshopSection = this.WorkshopSection;
			info.WorkshopSectionName = this.WorkshopSectionName;
			info.PlantZone = this.PlantZone;
			info.Description = this.Description;
			info.Comments = this.Comments;
			info.ModifyDate = this.ModifyDate;
			info.CreateUser = this.CreateUser;
			info.Id = this.Id;
			info.CreateDate = this.CreateDate;
			info.Fid = this.Fid;
			info.ValidFlag = this.ValidFlag;
			info.ModifyUser = this.ModifyUser;
			return info;			
		}
		 
		public WorkshopSectionInfo Clone()
		{
			return ((ICloneable) this).Clone() as WorkshopSectionInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// WorkshopSectionInfoCollection对应表[TM_BAS_WORKSHOP_SECTION]
    /// </summary>
	public partial class WorkshopSectionInfoCollection : BusinessObjectCollection<WorkshopSectionInfo>
	{
		public WorkshopSectionInfoCollection():base("TM_BAS_WORKSHOP_SECTION"){}	
	}
}
