#region Declaim
//---------------------------------------------------------------------------
// Name:		MeasuringUnitInfo
// Function: 	Expose data in table MeasuringUnit from database as business object to MES system.
// Tool:		T4
// CreateDate:	2020年3月30日
// <auto-generated>
//     This code was generated by a tool. 
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion 

#region Imported Namespace

using Infrustructure.Data;
using Infrustructure.Data.Integration;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;

#endregion

namespace DM.LES 
{   
	/// <summary>
    /// MeasuringUnitInfo对应表[TM_BAS_MEASURING_UNIT]
    /// </summary>	
	[Serializable] 
	[DataContract]	
    public partial class MeasuringUnitInfo : BusinessObject, ICloneable 
	{		  
		#region Constructors
		
		public MeasuringUnitInfo( 
					long aMeasuringUnit,

					string aMeasuringUnitNo,

					string aMeasuringUnitName,

					string aComments,

					DateTime aCreateDate,

					string aUpdateUser,

					string aCreateUser,

					DateTime aUpdateDate

				 
		) : this()
		{
			 
			MeasuringUnit = aMeasuringUnit;
		 
			MeasuringUnitNo = aMeasuringUnitNo;
		 
			MeasuringUnitName = aMeasuringUnitName;
		 
			Comments = aComments;
		 
			CreateDate = aCreateDate;
		 
			UpdateUser = aUpdateUser;
		 
			CreateUser = aCreateUser;
		 
			UpdateDate = aUpdateDate;
		}
		
		public MeasuringUnitInfo():base("TM_BAS_MEASURING_UNIT")
		{
			List<string> keys = new List<string>();
			 			keys.Add("MEASURING_UNIT");       _Keys = keys.ToArray();
			
			Schema = new DataSchema();
			List<DataSchemaField> fields = new List<DataSchemaField>();
			
			 
			DataSchemaField MEASURING_UNITField = new DataSchemaField();
			MEASURING_UNITField.Name = "MEASURING_UNIT";
			MEASURING_UNITField.Type = typeof(long).ToString();
			MEASURING_UNITField.Index = 0;
			fields.Add(MEASURING_UNITField);
			 
			DataSchemaField MEASURING_UNIT_NOField = new DataSchemaField();
			MEASURING_UNIT_NOField.Name = "MEASURING_UNIT_NO";
			MEASURING_UNIT_NOField.Type = typeof(string).ToString();
			MEASURING_UNIT_NOField.Index = 1;
			fields.Add(MEASURING_UNIT_NOField);
			 
			DataSchemaField MEASURING_UNIT_NAMEField = new DataSchemaField();
			MEASURING_UNIT_NAMEField.Name = "MEASURING_UNIT_NAME";
			MEASURING_UNIT_NAMEField.Type = typeof(string).ToString();
			MEASURING_UNIT_NAMEField.Index = 2;
			fields.Add(MEASURING_UNIT_NAMEField);
			 
			DataSchemaField COMMENTSField = new DataSchemaField();
			COMMENTSField.Name = "COMMENTS";
			COMMENTSField.Type = typeof(string).ToString();
			COMMENTSField.Index = 3;
			fields.Add(COMMENTSField);
			 
			DataSchemaField CREATE_DATEField = new DataSchemaField();
			CREATE_DATEField.Name = "CREATE_DATE";
			CREATE_DATEField.Type = typeof(DateTime).ToString();
			CREATE_DATEField.Index = 4;
			fields.Add(CREATE_DATEField);
			 
			DataSchemaField UPDATE_USERField = new DataSchemaField();
			UPDATE_USERField.Name = "UPDATE_USER";
			UPDATE_USERField.Type = typeof(string).ToString();
			UPDATE_USERField.Index = 5;
			fields.Add(UPDATE_USERField);
			 
			DataSchemaField CREATE_USERField = new DataSchemaField();
			CREATE_USERField.Name = "CREATE_USER";
			CREATE_USERField.Type = typeof(string).ToString();
			CREATE_USERField.Index = 6;
			fields.Add(CREATE_USERField);
			 
			DataSchemaField UPDATE_DATEField = new DataSchemaField();
			UPDATE_DATEField.Name = "UPDATE_DATE";
			UPDATE_DATEField.Type = typeof(DateTime).ToString();
			UPDATE_DATEField.Index = 7;
			fields.Add(UPDATE_DATEField);
						
			Schema.Fields = fields.ToArray();
		}
		
		#endregion

		#region Attributes

		[DataMember]
		public long MeasuringUnit{ get;set; }		
				
		[DataMember]
		public string MeasuringUnitNo{ get;set; }		
				
		[DataMember]
		public string MeasuringUnitName{ get;set; }		
				
		[DataMember]
		public string Comments{ get;set; }		
				
		[DataMember]
		public DateTime CreateDate{ get;set; }		
				
		[DataMember]
		public string UpdateUser{ get;set; }		
				
		[DataMember]
		public string CreateUser{ get;set; }		
				
		[DataMember]
		public DateTime? UpdateDate{ get;set; }		
				
		#endregion

	 
		#region ICloneable Members

		object ICloneable.Clone()
		{
			MeasuringUnitInfo info = new MeasuringUnitInfo();

			info.MeasuringUnit = this.MeasuringUnit;
			info.MeasuringUnitNo = this.MeasuringUnitNo;
			info.MeasuringUnitName = this.MeasuringUnitName;
			info.Comments = this.Comments;
			info.CreateDate = this.CreateDate;
			info.UpdateUser = this.UpdateUser;
			info.CreateUser = this.CreateUser;
			info.UpdateDate = this.UpdateDate;
			return info;			
		}
		 
		public MeasuringUnitInfo Clone()
		{
			return ((ICloneable) this).Clone() as MeasuringUnitInfo;	
		}
		#endregion

		public override string ToString()
		{
			return base.ToString();
		} 
	}

	/// <summary>
    /// MeasuringUnitInfoCollection对应表[TM_BAS_MEASURING_UNIT]
    /// </summary>
	public partial class MeasuringUnitInfoCollection : BusinessObjectCollection<MeasuringUnitInfo>
	{
		public MeasuringUnitInfoCollection():base("TM_BAS_MEASURING_UNIT"){}	
	}
}
