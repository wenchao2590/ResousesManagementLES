<#@ include file="$(SolutionDir)\Reference\DBEntity.SQLServer.ttinclude" #> 
<#@ output extension=".txt" #> 
<#	  
	var tableNames = "TM_BAS_DEVICE";     
	var mouldName = "LES";
	var NameSpace = "BLL." + mouldName; 
	var lcTableName_Up = "";  
 if(tableNames.StartsWith("1"))return "";
	//Output File Path
	var outputFilePath = Path.GetDirectoryName(Host.TemplateFile);
	                   
	var manager = Manager.Create(Host, GenerationEnvironment);
	var dbExporter = new DBExporter(); 
    var entities = dbExporter.LoadEntities(); 
    foreach(Entity tbl in entities){  
		 if(!tableNames.Split(';').Contains(tbl.Name))
			{
					continue;
			}

		//表名按规则转换
		lcTableName_Up = Helper.TableNameToPascal(tbl.Name.ToLower());
 if(string.IsNullOrEmpty(lcTableName_Up))
			continue;

		manager.StartNewFile(lcTableName_Up + "BLL.Gen.cs", outputFilePath);
#>
#region Declaim
//---------------------------------------------------------------------------
// Name:		<#= Helper.TableNameToPascal(tbl.Name) #>BLL
// Function: 	Expose data in table <#= tbl.Name #> from database as business object to system.
// Tool:		T4
// CreateDate:	<#= DateTime.Now.ToLongDateString() #>
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace
using DAL.<#= mouldName #>;
using DM.<#= mouldName #>;
using Infrustructure.ExpressionToSql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
#endregion

namespace <#= NameSpace #> 
{     
	/// <summary>
    /// <#= lcTableName_Up #>BLL对应表[<#= tbl.Name #>]
    /// </summary>
    public partial class <#=lcTableName_Up #>BLL
	{
		#region Common
        <#= lcTableName_Up #>DAL dal = new <#= lcTableName_Up #>DAL();
        /// <summary>
        /// 分页获取集合
        /// </summary>
        /// <param name="textWhere">string 条件语句,无须where</param>
        /// <param name="textOrder">string 排序语句,无须order by</param>
        /// <param name="pageIndex">int 页码,从1开始</param>
        /// <param name="pageRow">int 每页行数</param>
        /// <param name="dataCount">out int 数据行数</param>
        /// <returns>List<WmsVmiPackageInfo></returns>
        public List<<#= lcTableName_Up #>Info> GetListPage(string textWhere, string textOrder, int pageIndex, int pageRow, out int dataCount)
        {
            dataCount = dal.GetCounts(textWhere);
            return dal.GetListByPage(textWhere, textOrder, pageIndex, pageRow);
        }

		/// <summary>
        /// 初始化语句
        /// </summary>
		public ExpressionToSqlCore<<#= lcTableName_Up #>Info> InitSqlPack()
        {
			return dal.InitSqlPack();
		}
		/// <summary>
        /// 根据系统产生得sql更新
        /// </summary>
        /// <param name="sqlPacks"></param>
        /// <returns></returns>
        public int Updates(List<ExpressionToSqlCore<<#= lcTableName_Up #>Info>> sqlPacks)
        {
            return dal.Updates(sqlPacks);
        }
        /// <summary>
        /// 根据系统产生得sql更新
        /// </summary>
        /// <param name="sqlPacks"></param>
        /// <returns></returns>
        public int Updates(List<SqlPack> sqlPacks)
        {
            return dal.Updates(sqlPacks);
        }
		/// <summary>
        /// 分页获取集合
        /// </summary>
		public List<<#= lcTableName_Up #>Info> GetListPage(Expression<Func<<#= lcTableName_Up #>Info, bool>> expreeWhere, Expression<Func<IQueryable<<#= lcTableName_Up #>Info>, IOrderedQueryable<<#= lcTableName_Up #>Info>>> orderBy, int pageIndex, int pageRow, out int dataCount)
        {
            return dal.GetListPage(expreeWhere, orderBy, pageIndex, pageRow, out dataCount);
        }

        public <#= lcTableName_Up #>Info Select(long id)
        {
             return dal.Select(id);
        }

        /// <summary>
		/// 获取List
		/// </summary>
		/// <param name="textWhere">条件Sql</param>
		/// <param name="orderText">排序</param>
		/// <returns>WmsVmiPackageInfo Collection </returns>
		public List<<#= lcTableName_Up #>Info> GetList(string textWhere, string orderText)
        {
            return dal.GetList(textWhere, orderText);
        }

		/// <summary>
		/// 获取List
		/// </summary>
		/// <param name="textWhere">条件Sql</param>
		/// <param name="orderText">排序</param>
		/// <returns>WmsVmiPackageInfo Collection </returns>
		public List<<#= lcTableName_Up #>Info> GetList(Expression<Func<<#= lcTableName_Up #>Info, bool>> predicate, Expression<Func<IQueryable<<#= lcTableName_Up #>Info>, IOrderedQueryable<<#= lcTableName_Up #>Info>>> orderBy = null)
        {
            return dal.GetList(predicate, orderBy);
        }


		/// <summary>
		/// 获取List
		/// </summary>
		/// <param name="textWhere">条件Sql</param>
		/// <param name="orderText">排序</param>
		/// <returns>WmsVmiPackageInfo Collection </returns>
		public List<<#= lcTableName_Up #>Info> GetTopList(int top,string textWhere, string orderText)
        {
            return dal.GetTopList(top,textWhere, orderText);
        }

		/// <summary>
		/// 获取List
		/// </summary>
        public List<<#= lcTableName_Up #>Info> GetTopList(int topCount, Expression<Func<<#= lcTableName_Up #>Info, bool>> predicate, Expression<Func<IQueryable<<#= lcTableName_Up #>Info>, IOrderedQueryable<<#= lcTableName_Up #>Info>>> orderBy = null)
        {
            return dal.GetTopList(topCount, predicate, orderBy);
        }

		/// <summary>
		/// 获取LockList
		/// </summary>
		/// <param name="textWhere">条件Sql</param>
		/// <param name="orderText">排序</param>
		/// <returns>WmsVmiPackageInfo Collection </returns>
		public List<<#= lcTableName_Up #>Info> GetLockTopList(int top,string textWhere, string orderText)
        {
            return dal.GetLockTopList(top,textWhere, orderText);
        }

		public List<<#= lcTableName_Up #>Info> GetLockList(Expression<Func<<#= lcTableName_Up #>Info, bool>> predicate, Expression<Func<IQueryable<<#= lcTableName_Up #>Info>, IOrderedQueryable<<#= lcTableName_Up #>Info>>> orderBy)
        {
		  return dal.GetLockList(predicate, orderBy);
		}

		/// <summary>
        /// Exists data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>VmiSupplierInfo Collection </returns>
        public bool Exists(Expression<Func<<#= lcTableName_Up #>Info, bool>> predicate)
        {
            return dal.Exists(predicate);
        }
        /// <summary>
        /// Exists data collection
        /// </summary>
        /// <param name="sql">SQL Statement</param>
        /// <returns>VmiSupplierInfo Collection </returns>
        public bool Exists(string textWhere)
        {
            return dal.Exists(textWhere);
        }

		/// <summary>
        /// 更新
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool Update(Dictionary<string, object> fields, long id)
        {
            return dal.Update(fields, id)  ;
        }

		/// <summary>
        /// 插入
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public long Insert(<#= lcTableName_Up #>Info info)
        {
            return dal.Add(info);
        }
		/// <summary>
        /// 直接删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool Delete(long id)
        {
            return dal.Delete(id) > 0 ? true : false;
        }
		/// <summary>
        /// 逻辑删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool LogicDelete(long id, string loginUser)
        {
            return dal.LogicDelete(id, loginUser) > 0 ? true : false;
        }
		/// <summary>
        /// 更新
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool Update(string fields, long id)
        {
            return dal.UpdateInfo(fields, id) > 0 ? true : false;
        }
		/// <summary>
        /// 获取总数
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            return dal.GetCounts(textWhere);
        }

		/// <summary>
        /// 获取总数
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public int GetCounts(Expression<Func<<#= lcTableName_Up #>Info, bool>> predicate)
        {
            return dal.GetCounts(predicate);
        }

		/// <summary>
        /// 批量插入
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public int BatchAdd(IList<<#= lcTableName_Up #>Info> entities)
        {
            return dal.BatchAdd(entities);
        }

		/// <summary>
        /// 批量更新数据
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public int BatchUpdate(IList<<#= lcTableName_Up #>Info> entities, Expression<Func<<#= lcTableName_Up #>Info, object>> updatedProperties, Expression<Func<<#= lcTableName_Up #>Info, object>> keyProperties)
        {
            return dal.BatchUpdate(entities, updatedProperties, keyProperties);
        }

    		/// <summary>
        /// 更新对象数据
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
		public int Update(Expression<Func<<#= lcTableName_Up #>Info>> infoExpression, Expression<Func<<#= lcTableName_Up #>Info, bool>> whereExpression)
        { 
            return dal.Update(infoExpression,whereExpression);
        }


		/// <summary>
        /// 根据对象条件更新数据
        /// </summary> 
        /// <returns></returns>
        public int UpdateEntity(<#= lcTableName_Up #>Info entity, Expression<Func<<#= lcTableName_Up #>Info, object>> updatedProperties, Expression<Func<<#= lcTableName_Up #>Info, object>> keyProperties)
        {
            return dal.UpdateEntity(entity, updatedProperties, keyProperties);
        }
		 /// <summary>
        /// 批量删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public int BatchDelete(IList<<#= lcTableName_Up #>Info> entities, Expression<Func<<#= lcTableName_Up #>Info, object>> keyProperties)
        {
            return dal.BatchDelete(entities, keyProperties);
        }

		/// <summary>
        /// 获取插入SQL
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public static string GetInsertSql(<#= lcTableName_Up #>Info info)
        {
            return <#= lcTableName_Up #>DAL.GetInsertSql(info);
        }
		/// <summary>
        /// 获取插入SQL
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
		public int DataSqlBulkCopy(IList<<#= lcTableName_Up #>Info> entities)
        {
			return dal.DataSqlBulkCopy(entities);	
		}
        #endregion

		/// <summary>
        /// 根据语句获取集合
        /// </summary>
        /// <param name="sql">SQL语句</param>
        /// <returns></returns>
		public List<<#= lcTableName_Up #>Info> GetListBySql(string sql)
        {
			return dal.GetList(sql);
		}

		/// <summary>
        /// 根据ID进行集合批量删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
		public int BatchDeleteById(List<<#= lcTableName_Up #>Info> infos)
        {
			return dal.BatchDelete(infos, w => w.Id);
		}
	}
}
<#   
		manager.EndBlock();		
    }

	manager.Process(true); 
#>
