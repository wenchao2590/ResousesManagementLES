#region Declaim
//---------------------------------------------------------------------------
// Name:		DeviceBLL
// Function: 	Expose data in table TM_BAS_DEVICE from database as business object to system.
// Tool:		T4
// CreateDate:	2020-12-08
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------
#endregion

#region Imported Namespace
using DAL.LES;
using DM.LES;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
#endregion

namespace BLL.LES 
{     
	/// <summary>
    /// DeviceBLL对应表[TM_BAS_DEVICE]
    /// </summary>
    public partial class DeviceBLL
	{
		#region Common
        DeviceDAL dal = new DeviceDAL();
        /// <summary>
        /// 分页获取集合
        /// </summary>
        /// <param name="textWhere">string 条件语句,无须where</param>
        /// <param name="textOrder">string 排序语句,无须order by</param>
        /// <param name="pageIndex">int 页码,从1开始</param>
        /// <param name="pageRow">int 每页行数</param>
        /// <param name="dataCount">out int 数据行数</param>
        /// <returns>List<WmsVmiPackageInfo></returns>
        public List<DeviceInfo> GetListPage(string textWhere, string textOrder, int pageIndex, int pageRow, out int dataCount)
        {
            dataCount = dal.GetCounts(textWhere);
            return dal.GetListByPage(textWhere, textOrder, pageIndex, pageRow);
        }

		
        /// <summary>
		/// 获取List
		/// </summary>
		/// <param name="textWhere">条件Sql</param>
		/// <param name="orderText">排序</param>
		/// <returns>WmsVmiPackageInfo Collection </returns>
		public List<DeviceInfo> GetList(string textWhere, string orderText)
        {
            return dal.GetList(textWhere, orderText);
        }

	 


		 
   

		/// <summary>
        /// 插入
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public long Insert(DeviceInfo info)
        {
            return dal.Add(info);
        }
		/// <summary>
        /// 直接删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool Delete(long id)
        {
            return dal.Delete(id) > 0 ? true : false;
        }
		/// <summary>
        /// 逻辑删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool LogicDelete(long id, string loginUser)
        {
            return dal.LogicDelete(id, loginUser) > 0 ? true : false;
        }
		/// <summary>
        /// 更新
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public bool Update(string fields, long id)
        {
            return dal.UpdateInfo(fields, id) > 0 ? true : false;
        }
		/// <summary>
        /// 获取总数
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public int GetCounts(string textWhere)
        {
            return dal.GetCounts(textWhere);
        }
          

		/// <summary>
        /// 获取插入SQL
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
        public static string GetInsertSql(DeviceInfo info)
        {
            return DeviceDAL.GetInsertSql(info);
        }
		 
        #endregion

		/// <summary>
        /// 根据语句获取集合
        /// </summary>
        /// <param name="sql">SQL语句</param>
        /// <returns></returns>
		public List<DeviceInfo> GetListBySql(string sql)
        {
			return dal.GetList(sql);
		}

		/// <summary>
        /// 根据ID进行集合批量删除
        /// </summary>
        /// <param name="info"></param>
        /// <returns></returns>
		public int BatchDeleteById(List<DeviceInfo> infos)
        {
            int count = 0;
            foreach (var item in infos)
            {
                count+= dal.Delete(item.Id);
            }
            return count;
		}
	}
}
